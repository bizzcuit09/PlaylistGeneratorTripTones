/*
 * This combined file was created by the DataTables downloader builder:
 *   https://datatables.net/download
 *
 * To rebuild or modify this file with the latest versions of the included
 * software please visit:
 *   https://datatables.net/download/#dt/dt-1.10.18/e-1.9.0/af-2.3.3/b-1.5.6/cr-1.5.0/fc-3.2.5/fh-3.1.4/kt-2.5.0/r-2.2.2/rg-1.1.0/rr-1.2.4/sc-2.0.0/sl-1.3.0
 *
 * Included libraries:
 *   DataTables 1.10.18, Editor 1.9.0, AutoFill 2.3.3, Buttons 1.5.6, ColReorder 1.5.0, FixedColumns 3.2.5, FixedHeader 3.1.4, KeyTable 2.5.0, Responsive 2.2.2, RowGroup 1.1.0, RowReorder 1.2.4, Scroller 2.0.0, Select 1.3.0
 */

/*! DataTables 1.10.18
 * Â©2008-2018 SpryMedia Ltd - datatables.net/license
 */

/**
 * @summary     DataTables
 * @description Paginate, search and order HTML tables
 * @version     1.10.18
 * @file        jquery.dataTables.js
 * @author      SpryMedia Ltd
 * @contact     www.datatables.net
 * @copyright   Copyright 2008-2018 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */

/*jslint evil: true, undef: true, browser: true */
/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/

(function( factory ) {
	"use strict";

	if ( typeof define === 'function' && define.amd ) {
		// AMD
		define( ['jquery'], function ( $ ) {
			return factory( $, window, document );
		} );
	}
	else if ( typeof exports === 'object' ) {
		// CommonJS
		module.exports = function (root, $) {
			if ( ! root ) {
				// CommonJS environments without a window global must pass a
				// root. This will give an error otherwise
				root = window;
			}

			if ( ! $ ) {
				$ = typeof window !== 'undefined' ? // jQuery's factory checks for a global window
					require('jquery') :
					require('jquery')( root );
			}

			return factory( $, root, root.document );
		};
	}
	else {
		// Browser
		factory( jQuery, window, document );
	}
}
(function( $, window, document, undefined ) {
	"use strict";

	/**
	 * DataTables is a plug-in for the jQuery Javascript library. It is a highly
	 * flexible tool, based upon the foundations of progressive enhancement,
	 * which will add advanced interaction controls to any HTML table. For a
	 * full list of features please refer to
	 * [DataTables.net](href="http://datatables.net).
	 *
	 * Note that the `DataTable` object is not a global variable but is aliased
	 * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may
	 * be  accessed.
	 *
	 *  @class
	 *  @param {object} [init={}] Configuration object for DataTables. Options
	 *    are defined by {@link DataTable.defaults}
	 *  @requires jQuery 1.7+
	 *
	 *  @example
	 *    // Basic initialisation
	 *    $(document).ready( function {
	 *      $('#example').dataTable();
	 *    } );
	 *
	 *  @example
	 *    // Initialisation with configuration options - in this case, disable
	 *    // pagination and sorting.
	 *    $(document).ready( function {
	 *      $('#example').dataTable( {
	 *        "paginate": false,
	 *        "sort": false
	 *      } );
	 *    } );
	 */
	var DataTable = function ( options )
	{
		/**
		 * Perform a jQuery selector action on the table's TR elements (from the tbody) and
		 * return the resulting jQuery object.
		 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
		 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
		 *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter
		 *    criterion ("applied") or all TR elements (i.e. no filter).
		 *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.
		 *    Can be either 'current', whereby the current sorting of the table is used, or
		 *    'original' whereby the original order the data was read into the table is used.
		 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
		 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
		 *    'current' and filter is 'applied', regardless of what they might be given as.
		 *  @returns {object} jQuery object, filtered by the given selector.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Highlight every second row
		 *      oTable.$('tr:odd').css('backgroundColor', 'blue');
		 *    } );
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Filter to rows with 'Webkit' in them, add a background colour and then
		 *      // remove the filter, thus highlighting the 'Webkit' rows only.
		 *      oTable.fnFilter('Webkit');
		 *      oTable.$('tr', {"search": "applied"}).css('backgroundColor', 'blue');
		 *      oTable.fnFilter('');
		 *    } );
		 */
		this.$ = function ( sSelector, oOpts )
		{
			return this.api(true).$( sSelector, oOpts );
		};
		
		
		/**
		 * Almost identical to $ in operation, but in this case returns the data for the matched
		 * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes
		 * rather than any descendants, so the data can be obtained for the row/cell. If matching
		 * rows are found, the data returned is the original data array/object that was used to
		 * create the row (or a generated array if from a DOM source).
		 *
		 * This method is often useful in-combination with $ where both functions are given the
		 * same parameters and the array indexes will match identically.
		 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
		 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
		 *  @param {string} [oOpts.filter=none] Select elements that meet the current filter
		 *    criterion ("applied") or all elements (i.e. no filter).
		 *  @param {string} [oOpts.order=current] Order of the data in the processed array.
		 *    Can be either 'current', whereby the current sorting of the table is used, or
		 *    'original' whereby the original order the data was read into the table is used.
		 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
		 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
		 *    'current' and filter is 'applied', regardless of what they might be given as.
		 *  @returns {array} Data for the matched elements. If any elements, as a result of the
		 *    selector, were not TR, TD or TH elements in the DataTable, they will have a null
		 *    entry in the array.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Get the data from the first row in the table
		 *      var data = oTable._('tr:first');
		 *
		 *      // Do something useful with the data
		 *      alert( "First cell is: "+data[0] );
		 *    } );
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Filter to 'Webkit' and get all data for
		 *      oTable.fnFilter('Webkit');
		 *      var data = oTable._('tr', {"search": "applied"});
		 *
		 *      // Do something with the data
		 *      alert( data.length+" rows matched the search" );
		 *    } );
		 */
		this._ = function ( sSelector, oOpts )
		{
			return this.api(true).rows( sSelector, oOpts ).data();
		};
		
		
		/**
		 * Create a DataTables Api instance, with the currently selected tables for
		 * the Api's context.
		 * @param {boolean} [traditional=false] Set the API instance's context to be
		 *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was
		 *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),
		 *   or if all tables captured in the jQuery object should be used.
		 * @return {DataTables.Api}
		 */
		this.api = function ( traditional )
		{
			return traditional ?
				new _Api(
					_fnSettingsFromNode( this[ _ext.iApiIndex ] )
				) :
				new _Api( this );
		};
		
		
		/**
		 * Add a single new row or multiple rows of data to the table. Please note
		 * that this is suitable for client-side processing only - if you are using
		 * server-side processing (i.e. "bServerSide": true), then to add data, you
		 * must add it to the data source, i.e. the server-side, through an Ajax call.
		 *  @param {array|object} data The data to be added to the table. This can be:
		 *    <ul>
		 *      <li>1D array of data - add a single row with the data provided</li>
		 *      <li>2D array of arrays - add multiple rows in a single call</li>
		 *      <li>object - data object when using <i>mData</i></li>
		 *      <li>array of objects - multiple data objects when using <i>mData</i></li>
		 *    </ul>
		 *  @param {bool} [redraw=true] redraw the table or not
		 *  @returns {array} An array of integers, representing the list of indexes in
		 *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to
		 *    the table.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    // Global var for counter
		 *    var giCount = 2;
		 *
		 *    $(document).ready(function() {
		 *      $('#example').dataTable();
		 *    } );
		 *
		 *    function fnClickAddRow() {
		 *      $('#example').dataTable().fnAddData( [
		 *        giCount+".1",
		 *        giCount+".2",
		 *        giCount+".3",
		 *        giCount+".4" ]
		 *      );
		 *
		 *      giCount++;
		 *    }
		 */
		this.fnAddData = function( data, redraw )
		{
			var api = this.api( true );
		
			/* Check if we want to add multiple rows or not */
			var rows = $.isArray(data) && ( $.isArray(data[0]) || $.isPlainObject(data[0]) ) ?
				api.rows.add( data ) :
				api.row.add( data );
		
			if ( redraw === undefined || redraw ) {
				api.draw();
			}
		
			return rows.flatten().toArray();
		};
		
		
		/**
		 * This function will make DataTables recalculate the column sizes, based on the data
		 * contained in the table and the sizes applied to the columns (in the DOM, CSS or
		 * through the sWidth parameter). This can be useful when the width of the table's
		 * parent element changes (for example a window resize).
		 *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable( {
		 *        "sScrollY": "200px",
		 *        "bPaginate": false
		 *      } );
		 *
		 *      $(window).on('resize', function () {
		 *        oTable.fnAdjustColumnSizing();
		 *      } );
		 *    } );
		 */
		this.fnAdjustColumnSizing = function ( bRedraw )
		{
			var api = this.api( true ).columns.adjust();
			var settings = api.settings()[0];
			var scroll = settings.oScroll;
		
			if ( bRedraw === undefined || bRedraw ) {
				api.draw( false );
			}
			else if ( scroll.sX !== "" || scroll.sY !== "" ) {
				/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */
				_fnScrollDraw( settings );
			}
		};
		
		
		/**
		 * Quickly and simply clear a table
		 *  @param {bool} [bRedraw=true] redraw the table or not
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)
		 *      oTable.fnClearTable();
		 *    } );
		 */
		this.fnClearTable = function( bRedraw )
		{
			var api = this.api( true ).clear();
		
			if ( bRedraw === undefined || bRedraw ) {
				api.draw();
			}
		};
		
		
		/**
		 * The exact opposite of 'opening' a row, this function will close any rows which
		 * are currently 'open'.
		 *  @param {node} nTr the table row to 'close'
		 *  @returns {int} 0 on success, or 1 if failed (can't find the row)
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable;
		 *
		 *      // 'open' an information row when a row is clicked on
		 *      $('#example tbody tr').click( function () {
		 *        if ( oTable.fnIsOpen(this) ) {
		 *          oTable.fnClose( this );
		 *        } else {
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
		 *        }
		 *      } );
		 *
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
		this.fnClose = function( nTr )
		{
			this.api( true ).row( nTr ).child.hide();
		};
		
		
		/**
		 * Remove a row for the table
		 *  @param {mixed} target The index of the row from aoData to be deleted, or
		 *    the TR element you want to delete
		 *  @param {function|null} [callBack] Callback function
		 *  @param {bool} [redraw=true] Redraw the table or not
		 *  @returns {array} The row that was deleted
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Immediately remove the first row
		 *      oTable.fnDeleteRow( 0 );
		 *    } );
		 */
		this.fnDeleteRow = function( target, callback, redraw )
		{
			var api = this.api( true );
			var rows = api.rows( target );
			var settings = rows.settings()[0];
			var data = settings.aoData[ rows[0][0] ];
		
			rows.remove();
		
			if ( callback ) {
				callback.call( this, settings, data );
			}
		
			if ( redraw === undefined || redraw ) {
				api.draw();
			}
		
			return data;
		};
		
		
		/**
		 * Restore the table to it's original state in the DOM by removing all of DataTables
		 * enhancements, alterations to the DOM structure of the table and event listeners.
		 *  @param {boolean} [remove=false] Completely remove the table from the DOM
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      // This example is fairly pointless in reality, but shows how fnDestroy can be used
		 *      var oTable = $('#example').dataTable();
		 *      oTable.fnDestroy();
		 *    } );
		 */
		this.fnDestroy = function ( remove )
		{
			this.api( true ).destroy( remove );
		};
		
		
		/**
		 * Redraw the table
		 *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)
		 *      oTable.fnDraw();
		 *    } );
		 */
		this.fnDraw = function( complete )
		{
			// Note that this isn't an exact match to the old call to _fnDraw - it takes
			// into account the new data, but can hold position.
			this.api( true ).draw( complete );
		};
		
		
		/**
		 * Filter the input based on data
		 *  @param {string} sInput String to filter the table on
		 *  @param {int|null} [iColumn] Column to limit filtering to
		 *  @param {bool} [bRegex=false] Treat as regular expression or not
		 *  @param {bool} [bSmart=true] Perform smart filtering or not
		 *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)
		 *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Sometime later - filter...
		 *      oTable.fnFilter( 'test string' );
		 *    } );
		 */
		this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )
		{
			var api = this.api( true );
		
			if ( iColumn === null || iColumn === undefined ) {
				api.search( sInput, bRegex, bSmart, bCaseInsensitive );
			}
			else {
				api.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );
			}
		
			api.draw();
		};
		
		
		/**
		 * Get the data for the whole table, an individual row or an individual cell based on the
		 * provided parameters.
		 *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as
		 *    a TR node then the data source for the whole row will be returned. If given as a
		 *    TD/TH cell node then iCol will be automatically calculated and the data for the
		 *    cell returned. If given as an integer, then this is treated as the aoData internal
		 *    data index for the row (see fnGetPosition) and the data for that row used.
		 *  @param {int} [col] Optional column index that you want the data of.
		 *  @returns {array|object|string} If mRow is undefined, then the data for all rows is
		 *    returned. If mRow is defined, just data for that row, and is iCol is
		 *    defined, only data for the designated cell is returned.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    // Row data
		 *    $(document).ready(function() {
		 *      oTable = $('#example').dataTable();
		 *
		 *      oTable.$('tr').click( function () {
		 *        var data = oTable.fnGetData( this );
		 *        // ... do something with the array / object of data for the row
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Individual cell data
		 *    $(document).ready(function() {
		 *      oTable = $('#example').dataTable();
		 *
		 *      oTable.$('td').click( function () {
		 *        var sData = oTable.fnGetData( this );
		 *        alert( 'The cell clicked on had the value of '+sData );
		 *      } );
		 *    } );
		 */
		this.fnGetData = function( src, col )
		{
			var api = this.api( true );
		
			if ( src !== undefined ) {
				var type = src.nodeName ? src.nodeName.toLowerCase() : '';
		
				return col !== undefined || type == 'td' || type == 'th' ?
					api.cell( src, col ).data() :
					api.row( src ).data() || null;
			}
		
			return api.data().toArray();
		};
		
		
		/**
		 * Get an array of the TR nodes that are used in the table's body. Note that you will
		 * typically want to use the '$' API method in preference to this as it is more
		 * flexible.
		 *  @param {int} [iRow] Optional row index for the TR element you want
		 *  @returns {array|node} If iRow is undefined, returns an array of all TR elements
		 *    in the table's body, or iRow is defined, just the TR element requested.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Get the nodes from the table
		 *      var nNodes = oTable.fnGetNodes( );
		 *    } );
		 */
		this.fnGetNodes = function( iRow )
		{
			var api = this.api( true );
		
			return iRow !== undefined ?
				api.row( iRow ).node() :
				api.rows().nodes().flatten().toArray();
		};
		
		
		/**
		 * Get the array indexes of a particular cell from it's DOM element
		 * and column index including hidden columns
		 *  @param {node} node this can either be a TR, TD or TH in the table's body
		 *  @returns {int} If nNode is given as a TR, then a single index is returned, or
		 *    if given as a cell, an array of [row index, column index (visible),
		 *    column index (all)] is given.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      $('#example tbody td').click( function () {
		 *        // Get the position of the current data from the node
		 *        var aPos = oTable.fnGetPosition( this );
		 *
		 *        // Get the data array for this row
		 *        var aData = oTable.fnGetData( aPos[0] );
		 *
		 *        // Update the data array and return the value
		 *        aData[ aPos[1] ] = 'clicked';
		 *        this.innerHTML = 'clicked';
		 *      } );
		 *
		 *      // Init DataTables
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
		this.fnGetPosition = function( node )
		{
			var api = this.api( true );
			var nodeName = node.nodeName.toUpperCase();
		
			if ( nodeName == 'TR' ) {
				return api.row( node ).index();
			}
			else if ( nodeName == 'TD' || nodeName == 'TH' ) {
				var cell = api.cell( node ).index();
		
				return [
					cell.row,
					cell.columnVisible,
					cell.column
				];
			}
			return null;
		};
		
		
		/**
		 * Check to see if a row is 'open' or not.
		 *  @param {node} nTr the table row to check
		 *  @returns {boolean} true if the row is currently open, false otherwise
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable;
		 *
		 *      // 'open' an information row when a row is clicked on
		 *      $('#example tbody tr').click( function () {
		 *        if ( oTable.fnIsOpen(this) ) {
		 *          oTable.fnClose( this );
		 *        } else {
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
		 *        }
		 *      } );
		 *
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
		this.fnIsOpen = function( nTr )
		{
			return this.api( true ).row( nTr ).child.isShown();
		};
		
		
		/**
		 * This function will place a new row directly after a row which is currently
		 * on display on the page, with the HTML contents that is passed into the
		 * function. This can be used, for example, to ask for confirmation that a
		 * particular record should be deleted.
		 *  @param {node} nTr The table row to 'open'
		 *  @param {string|node|jQuery} mHtml The HTML to put into the row
		 *  @param {string} sClass Class to give the new TD cell
		 *  @returns {node} The row opened. Note that if the table row passed in as the
		 *    first parameter, is not found in the table, this method will silently
		 *    return.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable;
		 *
		 *      // 'open' an information row when a row is clicked on
		 *      $('#example tbody tr').click( function () {
		 *        if ( oTable.fnIsOpen(this) ) {
		 *          oTable.fnClose( this );
		 *        } else {
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
		 *        }
		 *      } );
		 *
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
		this.fnOpen = function( nTr, mHtml, sClass )
		{
			return this.api( true )
				.row( nTr )
				.child( mHtml, sClass )
				.show()
				.child()[0];
		};
		
		
		/**
		 * Change the pagination - provides the internal logic for pagination in a simple API
		 * function. With this function you can have a DataTables table go to the next,
		 * previous, first or last pages.
		 *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"
		 *    or page number to jump to (integer), note that page 0 is the first page.
		 *  @param {bool} [bRedraw=true] Redraw the table or not
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      oTable.fnPageChange( 'next' );
		 *    } );
		 */
		this.fnPageChange = function ( mAction, bRedraw )
		{
			var api = this.api( true ).page( mAction );
		
			if ( bRedraw === undefined || bRedraw ) {
				api.draw(false);
			}
		};
		
		
		/**
		 * Show a particular column
		 *  @param {int} iCol The column whose display should be changed
		 *  @param {bool} bShow Show (true) or hide (false) the column
		 *  @param {bool} [bRedraw=true] Redraw the table or not
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Hide the second column after initialisation
		 *      oTable.fnSetColumnVis( 1, false );
		 *    } );
		 */
		this.fnSetColumnVis = function ( iCol, bShow, bRedraw )
		{
			var api = this.api( true ).column( iCol ).visible( bShow );
		
			if ( bRedraw === undefined || bRedraw ) {
				api.columns.adjust().draw();
			}
		};
		
		
		/**
		 * Get the settings for a particular table for external manipulation
		 *  @returns {object} DataTables settings object. See
		 *    {@link DataTable.models.oSettings}
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      var oSettings = oTable.fnSettings();
		 *
		 *      // Show an example parameter from the settings
		 *      alert( oSettings._iDisplayStart );
		 *    } );
		 */
		this.fnSettings = function()
		{
			return _fnSettingsFromNode( this[_ext.iApiIndex] );
		};
		
		
		/**
		 * Sort the table by a particular column
		 *  @param {int} iCol the data index to sort on. Note that this will not match the
		 *    'display index' if you have hidden data entries
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Sort immediately with columns 0 and 1
		 *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );
		 *    } );
		 */
		this.fnSort = function( aaSort )
		{
			this.api( true ).order( aaSort ).draw();
		};
		
		
		/**
		 * Attach a sort listener to an element for a given column
		 *  @param {node} nNode the element to attach the sort listener to
		 *  @param {int} iColumn the column that a click on this node will sort on
		 *  @param {function} [fnCallback] callback function when sort is run
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Sort on column 1, when 'sorter' is clicked on
		 *      oTable.fnSortListener( document.getElementById('sorter'), 1 );
		 *    } );
		 */
		this.fnSortListener = function( nNode, iColumn, fnCallback )
		{
			this.api( true ).order.listener( nNode, iColumn, fnCallback );
		};
		
		
		/**
		 * Update a table cell or row - this method will accept either a single value to
		 * update the cell with, an array of values with one element for each column or
		 * an object in the same format as the original data source. The function is
		 * self-referencing in order to make the multi column updates easier.
		 *  @param {object|array|string} mData Data to update the cell/row with
		 *  @param {node|int} mRow TR element you want to update or the aoData index
		 *  @param {int} [iColumn] The column to update, give as null or undefined to
		 *    update a whole row.
		 *  @param {bool} [bRedraw=true] Redraw the table or not
		 *  @param {bool} [bAction=true] Perform pre-draw actions or not
		 *  @returns {int} 0 on success, 1 on error
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell
		 *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row
		 *    } );
		 */
		this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )
		{
			var api = this.api( true );
		
			if ( iColumn === undefined || iColumn === null ) {
				api.row( mRow ).data( mData );
			}
			else {
				api.cell( mRow, iColumn ).data( mData );
			}
		
			if ( bAction === undefined || bAction ) {
				api.columns.adjust();
			}
		
			if ( bRedraw === undefined || bRedraw ) {
				api.draw();
			}
			return 0;
		};
		
		
		/**
		 * Provide a common method for plug-ins to check the version of DataTables being used, in order
		 * to ensure compatibility.
		 *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the
		 *    formats "X" and "X.Y" are also acceptable.
		 *  @returns {boolean} true if this version of DataTables is greater or equal to the required
		 *    version, or false if this version of DataTales is not suitable
		 *  @method
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      alert( oTable.fnVersionCheck( '1.9.0' ) );
		 *    } );
		 */
		this.fnVersionCheck = _ext.fnVersionCheck;
		

		var _that = this;
		var emptyInit = options === undefined;
		var len = this.length;

		if ( emptyInit ) {
			options = {};
		}

		this.oApi = this.internal = _ext.internal;

		// Extend with old style plug-in API methods
		for ( var fn in DataTable.ext.internal ) {
			if ( fn ) {
				this[fn] = _fnExternApiFunc(fn);
			}
		}

		this.each(function() {
			// For each initialisation we want to give it a clean initialisation
			// object that can be bashed around
			var o = {};
			var oInit = len > 1 ? // optimisation for single table case
				_fnExtend( o, options, true ) :
				options;

			/*global oInit,_that,emptyInit*/
			var i=0, iLen, j, jLen, k, kLen;
			var sId = this.getAttribute( 'id' );
			var bInitHandedOff = false;
			var defaults = DataTable.defaults;
			var $this = $(this);
			
			
			/* Sanity check */
			if ( this.nodeName.toLowerCase() != 'table' )
			{
				_fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );
				return;
			}
			
			/* Backwards compatibility for the defaults */
			_fnCompatOpts( defaults );
			_fnCompatCols( defaults.column );
			
			/* Convert the camel-case defaults to Hungarian */
			_fnCamelToHungarian( defaults, defaults, true );
			_fnCamelToHungarian( defaults.column, defaults.column, true );
			
			/* Setting up the initialisation object */
			_fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ) );
			
			
			
			/* Check to see if we are re-initialising a table */
			var allSettings = DataTable.settings;
			for ( i=0, iLen=allSettings.length ; i<iLen ; i++ )
			{
				var s = allSettings[i];
			
				/* Base check on table node */
				if (
					s.nTable == this ||
					(s.nTHead && s.nTHead.parentNode == this) ||
					(s.nTFoot && s.nTFoot.parentNode == this)
				) {
					var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;
					var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;
			
					if ( emptyInit || bRetrieve )
					{
						return s.oInstance;
					}
					else if ( bDestroy )
					{
						s.oInstance.fnDestroy();
						break;
					}
					else
					{
						_fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );
						return;
					}
				}
			
				/* If the element we are initialising has the same ID as a table which was previously
				 * initialised, but the table nodes don't match (from before) then we destroy the old
				 * instance by simply deleting it. This is under the assumption that the table has been
				 * destroyed by other methods. Anyone using non-id selectors will need to do this manually
				 */
				if ( s.sTableId == this.id )
				{
					allSettings.splice( i, 1 );
					break;
				}
			}
			
			/* Ensure the table has an ID - required for accessibility */
			if ( sId === null || sId === "" )
			{
				sId = "DataTables_Table_"+(DataTable.ext._unique++);
				this.id = sId;
			}
			
			/* Create the settings object for this table and set some of the default parameters */
			var oSettings = $.extend( true, {}, DataTable.models.oSettings, {
				"sDestroyWidth": $this[0].style.width,
				"sInstance":     sId,
				"sTableId":      sId
			} );
			oSettings.nTable = this;
			oSettings.oApi   = _that.internal;
			oSettings.oInit  = oInit;
			
			allSettings.push( oSettings );
			
			// Need to add the instance after the instance after the settings object has been added
			// to the settings array, so we can self reference the table instance if more than one
			oSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();
			
			// Backwards compatibility, before we apply all the defaults
			_fnCompatOpts( oInit );
			_fnLanguageCompat( oInit.oLanguage );
			
			// If the length menu is given, but the init display length is not, use the length menu
			if ( oInit.aLengthMenu && ! oInit.iDisplayLength )
			{
				oInit.iDisplayLength = $.isArray( oInit.aLengthMenu[0] ) ?
					oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];
			}
			
			// Apply the defaults and init options to make a single init object will all
			// options defined from defaults and instance options.
			oInit = _fnExtend( $.extend( true, {}, defaults ), oInit );
			
			
			// Map the initialisation options onto the settings object
			_fnMap( oSettings.oFeatures, oInit, [
				"bPaginate",
				"bLengthChange",
				"bFilter",
				"bSort",
				"bSortMulti",
				"bInfo",
				"bProcessing",
				"bAutoWidth",
				"bSortClasses",
				"bServerSide",
				"bDeferRender"
			] );
			_fnMap( oSettings, oInit, [
				"asStripeClasses",
				"ajax",
				"fnServerData",
				"fnFormatNumber",
				"sServerMethod",
				"aaSorting",
				"aaSortingFixed",
				"aLengthMenu",
				"sPaginationType",
				"sAjaxSource",
				"sAjaxDataProp",
				"iStateDuration",
				"sDom",
				"bSortCellsTop",
				"iTabIndex",
				"fnStateLoadCallback",
				"fnStateSaveCallback",
				"renderer",
				"searchDelay",
				"rowId",
				[ "iCookieDuration", "iStateDuration" ], // backwards compat
				[ "oSearch", "oPreviousSearch" ],
				[ "aoSearchCols", "aoPreSearchCols" ],
				[ "iDisplayLength", "_iDisplayLength" ]
			] );
			_fnMap( oSettings.oScroll, oInit, [
				[ "sScrollX", "sX" ],
				[ "sScrollXInner", "sXInner" ],
				[ "sScrollY", "sY" ],
				[ "bScrollCollapse", "bCollapse" ]
			] );
			_fnMap( oSettings.oLanguage, oInit, "fnInfoCallback" );
			
			/* Callback functions which are array driven */
			_fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );
			_fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );
			_fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );
			_fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );
			_fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );
			_fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );
			_fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );
			_fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );
			_fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );
			_fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );
			_fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );
			
			oSettings.rowIdFn = _fnGetObjectDataFn( oInit.rowId );
			
			/* Browser support detection */
			_fnBrowserDetect( oSettings );
			
			var oClasses = oSettings.oClasses;
			
			$.extend( oClasses, DataTable.ext.classes, oInit.oClasses );
			$this.addClass( oClasses.sTable );
			
			
			if ( oSettings.iInitDisplayStart === undefined )
			{
				/* Display start point, taking into account the save saving */
				oSettings.iInitDisplayStart = oInit.iDisplayStart;
				oSettings._iDisplayStart = oInit.iDisplayStart;
			}
			
			if ( oInit.iDeferLoading !== null )
			{
				oSettings.bDeferLoading = true;
				var tmp = $.isArray( oInit.iDeferLoading );
				oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;
				oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
			}
			
			/* Language definitions */
			var oLanguage = oSettings.oLanguage;
			$.extend( true, oLanguage, oInit.oLanguage );
			
			if ( oLanguage.sUrl )
			{
				/* Get the language definitions from a file - because this Ajax call makes the language
				 * get async to the remainder of this function we use bInitHandedOff to indicate that
				 * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor
				 */
				$.ajax( {
					dataType: 'json',
					url: oLanguage.sUrl,
					success: function ( json ) {
						_fnLanguageCompat( json );
						_fnCamelToHungarian( defaults.oLanguage, json );
						$.extend( true, oLanguage, json );
						_fnInitialise( oSettings );
					},
					error: function () {
						// Error occurred loading language file, continue on as best we can
						_fnInitialise( oSettings );
					}
				} );
				bInitHandedOff = true;
			}
			
			/*
			 * Stripes
			 */
			if ( oInit.asStripeClasses === null )
			{
				oSettings.asStripeClasses =[
					oClasses.sStripeOdd,
					oClasses.sStripeEven
				];
			}
			
			/* Remove row stripe classes if they are already on the table row */
			var stripeClasses = oSettings.asStripeClasses;
			var rowOne = $this.children('tbody').find('tr').eq(0);
			if ( $.inArray( true, $.map( stripeClasses, function(el, i) {
				return rowOne.hasClass(el);
			} ) ) !== -1 ) {
				$('tbody tr', this).removeClass( stripeClasses.join(' ') );
				oSettings.asDestroyStripes = stripeClasses.slice();
			}
			
			/*
			 * Columns
			 * See if we should load columns automatically or use defined ones
			 */
			var anThs = [];
			var aoColumnsInit;
			var nThead = this.getElementsByTagName('thead');
			if ( nThead.length !== 0 )
			{
				_fnDetectHeader( oSettings.aoHeader, nThead[0] );
				anThs = _fnGetUniqueThs( oSettings );
			}
			
			/* If not given a column array, generate one with nulls */
			if ( oInit.aoColumns === null )
			{
				aoColumnsInit = [];
				for ( i=0, iLen=anThs.length ; i<iLen ; i++ )
				{
					aoColumnsInit.push( null );
				}
			}
			else
			{
				aoColumnsInit = oInit.aoColumns;
			}
			
			/* Add the columns */
			for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )
			{
				_fnAddColumn( oSettings, anThs ? anThs[i] : null );
			}
			
			/* Apply the column definitions */
			_fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {
				_fnColumnOptions( oSettings, iCol, oDef );
			} );
			
			/* HTML5 attribute detection - build an mData object automatically if the
			 * attributes are found
			 */
			if ( rowOne.length ) {
				var a = function ( cell, name ) {
					return cell.getAttribute( 'data-'+name ) !== null ? name : null;
				};
			
				$( rowOne[0] ).children('th, td').each( function (i, cell) {
					var col = oSettings.aoColumns[i];
			
					if ( col.mData === i ) {
						var sort = a( cell, 'sort' ) || a( cell, 'order' );
						var filter = a( cell, 'filter' ) || a( cell, 'search' );
			
						if ( sort !== null || filter !== null ) {
							col.mData = {
								_:      i+'.display',
								sort:   sort !== null   ? i+'.@data-'+sort   : undefined,
								type:   sort !== null   ? i+'.@data-'+sort   : undefined,
								filter: filter !== null ? i+'.@data-'+filter : undefined
							};
			
							_fnColumnOptions( oSettings, i );
						}
					}
				} );
			}
			
			var features = oSettings.oFeatures;
			var loadedInit = function () {
				/*
				 * Sorting
				 * @todo For modularisation (1.11) this needs to do into a sort start up handler
				 */
			
				// If aaSorting is not defined, then we use the first indicator in asSorting
				// in case that has been altered, so the default sort reflects that option
				if ( oInit.aaSorting === undefined ) {
					var sorting = oSettings.aaSorting;
					for ( i=0, iLen=sorting.length ; i<iLen ; i++ ) {
						sorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];
					}
				}
			
				/* Do a first pass on the sorting classes (allows any size changes to be taken into
				 * account, and also will apply sorting disabled classes if disabled
				 */
				_fnSortingClasses( oSettings );
			
				if ( features.bSort ) {
					_fnCallbackReg( oSettings, 'aoDrawCallback', function () {
						if ( oSettings.bSorted ) {
							var aSort = _fnSortFlatten( oSettings );
							var sortedColumns = {};
			
							$.each( aSort, function (i, val) {
								sortedColumns[ val.src ] = val.dir;
							} );
			
							_fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );
							_fnSortAria( oSettings );
						}
					} );
				}
			
				_fnCallbackReg( oSettings, 'aoDrawCallback', function () {
					if ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {
						_fnSortingClasses( oSettings );
					}
				}, 'sc' );
			
			
				/*
				 * Final init
				 * Cache the header, body and footer as required, creating them if needed
				 */
			
				// Work around for Webkit bug 83867 - store the caption-side before removing from doc
				var captions = $this.children('caption').each( function () {
					this._captionSide = $(this).css('caption-side');
				} );
			
				var thead = $this.children('thead');
				if ( thead.length === 0 ) {
					thead = $('<thead/>').appendTo($this);
				}
				oSettings.nTHead = thead[0];
			
				var tbody = $this.children('tbody');
				if ( tbody.length === 0 ) {
					tbody = $('<tbody/>').appendTo($this);
				}
				oSettings.nTBody = tbody[0];
			
				var tfoot = $this.children('tfoot');
				if ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "") ) {
					// If we are a scrolling table, and no footer has been given, then we need to create
					// a tfoot element for the caption element to be appended to
					tfoot = $('<tfoot/>').appendTo($this);
				}
			
				if ( tfoot.length === 0 || tfoot.children().length === 0 ) {
					$this.addClass( oClasses.sNoFooter );
				}
				else if ( tfoot.length > 0 ) {
					oSettings.nTFoot = tfoot[0];
					_fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );
				}
			
				/* Check if there is data passing into the constructor */
				if ( oInit.aaData ) {
					for ( i=0 ; i<oInit.aaData.length ; i++ ) {
						_fnAddData( oSettings, oInit.aaData[ i ] );
					}
				}
				else if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' ) {
					/* Grab the data from the page - only do this when deferred loading or no Ajax
					 * source since there is no point in reading the DOM data if we are then going
					 * to replace it with Ajax data
					 */
					_fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );
				}
			
				/* Copy the data index array */
				oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
			
				/* Initialisation complete - table can be drawn */
				oSettings.bInitialised = true;
			
				/* Check if we need to initialise the table (it might not have been handed off to the
				 * language processor)
				 */
				if ( bInitHandedOff === false ) {
					_fnInitialise( oSettings );
				}
			};
			
			/* Must be done after everything which can be overridden by the state saving! */
			if ( oInit.bStateSave )
			{
				features.bStateSave = true;
				_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );
				_fnLoadState( oSettings, oInit, loadedInit );
			}
			else {
				loadedInit();
			}
			
		} );
		_that = null;
		return this;
	};

	
	/*
	 * It is useful to have variables which are scoped locally so only the
	 * DataTables functions can access them and they don't leak into global space.
	 * At the same time these functions are often useful over multiple files in the
	 * core and API, so we list, or at least document, all variables which are used
	 * by DataTables as private variables here. This also ensures that there is no
	 * clashing of variable names and that they can easily referenced for reuse.
	 */
	
	
	// Defined else where
	//  _selector_run
	//  _selector_opts
	//  _selector_first
	//  _selector_row_indexes
	
	var _ext; // DataTable.ext
	var _Api; // DataTable.Api
	var _api_register; // DataTable.Api.register
	var _api_registerPlural; // DataTable.Api.registerPlural
	
	var _re_dic = {};
	var _re_new_lines = /[\r\n]/g;
	var _re_html = /<.*?>/g;
	
	// This is not strict ISO8601 - Date.parse() is quite lax, although
	// implementations differ between browsers.
	var _re_date = /^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/;
	
	// Escape regular expression special characters
	var _re_escape_regex = new RegExp( '(\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^', '-' ].join('|\\') + ')', 'g' );
	
	// http://en.wikipedia.org/wiki/Foreign_exchange_market
	// - \u20BD - Russian ruble.
	// - \u20a9 - South Korean Won
	// - \u20BA - Turkish Lira
	// - \u20B9 - Indian Rupee
	// - R - Brazil (R$) and South Africa
	// - fr - Swiss Franc
	// - kr - Swedish krona, Norwegian krone and Danish krone
	// - \u2009 is thin space and \u202F is narrow no-break space, both used in many
	// - É - Bitcoin
	// - Î - Ethereum
	//   standards as thousands separators.
	var _re_formatted_numeric = /[',$Â£â¬Â¥%\u2009\u202F\u20BD\u20a9\u20BArfkÉÎ]/gi;
	
	
	var _empty = function ( d ) {
		return !d || d === true || d === '-' ? true : false;
	};
	
	
	var _intVal = function ( s ) {
		var integer = parseInt( s, 10 );
		return !isNaN(integer) && isFinite(s) ? integer : null;
	};
	
	// Convert from a formatted number with characters other than `.` as the
	// decimal place, to a Javascript number
	var _numToDecimal = function ( num, decimalPoint ) {
		// Cache created regular expressions for speed as this function is called often
		if ( ! _re_dic[ decimalPoint ] ) {
			_re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );
		}
		return typeof num === 'string' && decimalPoint !== '.' ?
			num.replace( /\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :
			num;
	};
	
	
	var _isNumber = function ( d, decimalPoint, formatted ) {
		var strType = typeof d === 'string';
	
		// If empty return immediately so there must be a number if it is a
		// formatted string (this stops the string "k", or "kr", etc being detected
		// as a formatted number for currency
		if ( _empty( d ) ) {
			return true;
		}
	
		if ( decimalPoint && strType ) {
			d = _numToDecimal( d, decimalPoint );
		}
	
		if ( formatted && strType ) {
			d = d.replace( _re_formatted_numeric, '' );
		}
	
		return !isNaN( parseFloat(d) ) && isFinite( d );
	};
	
	
	// A string without HTML in it can be considered to be HTML still
	var _isHtml = function ( d ) {
		return _empty( d ) || typeof d === 'string';
	};
	
	
	var _htmlNumeric = function ( d, decimalPoint, formatted ) {
		if ( _empty( d ) ) {
			return true;
		}
	
		var html = _isHtml( d );
		return ! html ?
			null :
			_isNumber( _stripHtml( d ), decimalPoint, formatted ) ?
				true :
				null;
	};
	
	
	var _pluck = function ( a, prop, prop2 ) {
		var out = [];
		var i=0, ien=a.length;
	
		// Could have the test in the loop for slightly smaller code, but speed
		// is essential here
		if ( prop2 !== undefined ) {
			for ( ; i<ien ; i++ ) {
				if ( a[i] && a[i][ prop ] ) {
					out.push( a[i][ prop ][ prop2 ] );
				}
			}
		}
		else {
			for ( ; i<ien ; i++ ) {
				if ( a[i] ) {
					out.push( a[i][ prop ] );
				}
			}
		}
	
		return out;
	};
	
	
	// Basically the same as _pluck, but rather than looping over `a` we use `order`
	// as the indexes to pick from `a`
	var _pluck_order = function ( a, order, prop, prop2 )
	{
		var out = [];
		var i=0, ien=order.length;
	
		// Could have the test in the loop for slightly smaller code, but speed
		// is essential here
		if ( prop2 !== undefined ) {
			for ( ; i<ien ; i++ ) {
				if ( a[ order[i] ][ prop ] ) {
					out.push( a[ order[i] ][ prop ][ prop2 ] );
				}
			}
		}
		else {
			for ( ; i<ien ; i++ ) {
				out.push( a[ order[i] ][ prop ] );
			}
		}
	
		return out;
	};
	
	
	var _range = function ( len, start )
	{
		var out = [];
		var end;
	
		if ( start === undefined ) {
			start = 0;
			end = len;
		}
		else {
			end = start;
			start = len;
		}
	
		for ( var i=start ; i<end ; i++ ) {
			out.push( i );
		}
	
		return out;
	};
	
	
	var _removeEmpty = function ( a )
	{
		var out = [];
	
		for ( var i=0, ien=a.length ; i<ien ; i++ ) {
			if ( a[i] ) { // careful - will remove all falsy values!
				out.push( a[i] );
			}
		}
	
		return out;
	};
	
	
	var _stripHtml = function ( d ) {
		return d.replace( _re_html, '' );
	};
	
	
	/**
	 * Determine if all values in the array are unique. This means we can short
	 * cut the _unique method at the cost of a single loop. A sorted array is used
	 * to easily check the values.
	 *
	 * @param  {array} src Source array
	 * @return {boolean} true if all unique, false otherwise
	 * @ignore
	 */
	var _areAllUnique = function ( src ) {
		if ( src.length < 2 ) {
			return true;
		}
	
		var sorted = src.slice().sort();
		var last = sorted[0];
	
		for ( var i=1, ien=sorted.length ; i<ien ; i++ ) {
			if ( sorted[i] === last ) {
				return false;
			}
	
			last = sorted[i];
		}
	
		return true;
	};
	
	
	/**
	 * Find the unique elements in a source array.
	 *
	 * @param  {array} src Source array
	 * @return {array} Array of unique items
	 * @ignore
	 */
	var _unique = function ( src )
	{
		if ( _areAllUnique( src ) ) {
			return src.slice();
		}
	
		// A faster unique method is to use object keys to identify used values,
		// but this doesn't work with arrays or objects, which we must also
		// consider. See jsperf.com/compare-array-unique-versions/4 for more
		// information.
		var
			out = [],
			val,
			i, ien=src.length,
			j, k=0;
	
		again: for ( i=0 ; i<ien ; i++ ) {
			val = src[i];
	
			for ( j=0 ; j<k ; j++ ) {
				if ( out[j] === val ) {
					continue again;
				}
			}
	
			out.push( val );
			k++;
		}
	
		return out;
	};
	
	
	/**
	 * DataTables utility methods
	 * 
	 * This namespace provides helper methods that DataTables uses internally to
	 * create a DataTable, but which are not exclusively used only for DataTables.
	 * These methods can be used by extension authors to save the duplication of
	 * code.
	 *
	 *  @namespace
	 */
	DataTable.util = {
		/**
		 * Throttle the calls to a function. Arguments and context are maintained
		 * for the throttled function.
		 *
		 * @param {function} fn Function to be called
		 * @param {integer} freq Call frequency in mS
		 * @return {function} Wrapped function
		 */
		throttle: function ( fn, freq ) {
			var
				frequency = freq !== undefined ? freq : 200,
				last,
				timer;
	
			return function () {
				var
					that = this,
					now  = +new Date(),
					args = arguments;
	
				if ( last && now < last + frequency ) {
					clearTimeout( timer );
	
					timer = setTimeout( function () {
						last = undefined;
						fn.apply( that, args );
					}, frequency );
				}
				else {
					last = now;
					fn.apply( that, args );
				}
			};
		},
	
	
		/**
		 * Escape a string such that it can be used in a regular expression
		 *
		 *  @param {string} val string to escape
		 *  @returns {string} escaped string
		 */
		escapeRegex: function ( val ) {
			return val.replace( _re_escape_regex, '\\$1' );
		}
	};
	
	
	
	/**
	 * Create a mapping object that allows camel case parameters to be looked up
	 * for their Hungarian counterparts. The mapping is stored in a private
	 * parameter called `_hungarianMap` which can be accessed on the source object.
	 *  @param {object} o
	 *  @memberof DataTable#oApi
	 */
	function _fnHungarianMap ( o )
	{
		var
			hungarian = 'a aa ai ao as b fn i m o s ',
			match,
			newKey,
			map = {};
	
		$.each( o, function (key, val) {
			match = key.match(/^([^A-Z]+?)([A-Z])/);
	
			if ( match && hungarian.indexOf(match[1]+' ') !== -1 )
			{
				newKey = key.replace( match[0], match[2].toLowerCase() );
				map[ newKey ] = key;
	
				if ( match[1] === 'o' )
				{
					_fnHungarianMap( o[key] );
				}
			}
		} );
	
		o._hungarianMap = map;
	}
	
	
	/**
	 * Convert from camel case parameters to Hungarian, based on a Hungarian map
	 * created by _fnHungarianMap.
	 *  @param {object} src The model object which holds all parameters that can be
	 *    mapped.
	 *  @param {object} user The object to convert from camel case to Hungarian.
	 *  @param {boolean} force When set to `true`, properties which already have a
	 *    Hungarian value in the `user` object will be overwritten. Otherwise they
	 *    won't be.
	 *  @memberof DataTable#oApi
	 */
	function _fnCamelToHungarian ( src, user, force )
	{
		if ( ! src._hungarianMap ) {
			_fnHungarianMap( src );
		}
	
		var hungarianKey;
	
		$.each( user, function (key, val) {
			hungarianKey = src._hungarianMap[ key ];
	
			if ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )
			{
				// For objects, we need to buzz down into the object to copy parameters
				if ( hungarianKey.charAt(0) === 'o' )
				{
					// Copy the camelCase options over to the hungarian
					if ( ! user[ hungarianKey ] ) {
						user[ hungarianKey ] = {};
					}
					$.extend( true, user[hungarianKey], user[key] );
	
					_fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );
				}
				else {
					user[hungarianKey] = user[ key ];
				}
			}
		} );
	}
	
	
	/**
	 * Language compatibility - when certain options are given, and others aren't, we
	 * need to duplicate the values over, in order to provide backwards compatibility
	 * with older language files.
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnLanguageCompat( lang )
	{
		// Note the use of the Hungarian notation for the parameters in this method as
		// this is called after the mapping of camelCase to Hungarian
		var defaults = DataTable.defaults.oLanguage;
	
		// Default mapping
		var defaultDecimal = defaults.sDecimal;
		if ( defaultDecimal ) {
			_addNumericSort( defaultDecimal );
		}
	
		if ( lang ) {
			var zeroRecords = lang.sZeroRecords;
	
			// Backwards compatibility - if there is no sEmptyTable given, then use the same as
			// sZeroRecords - assuming that is given.
			if ( ! lang.sEmptyTable && zeroRecords &&
				defaults.sEmptyTable === "No data available in table" )
			{
				_fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );
			}
	
			// Likewise with loading records
			if ( ! lang.sLoadingRecords && zeroRecords &&
				defaults.sLoadingRecords === "Loading..." )
			{
				_fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );
			}
	
			// Old parameter name of the thousands separator mapped onto the new
			if ( lang.sInfoThousands ) {
				lang.sThousands = lang.sInfoThousands;
			}
	
			var decimal = lang.sDecimal;
			if ( decimal && defaultDecimal !== decimal ) {
				_addNumericSort( decimal );
			}
		}
	}
	
	
	/**
	 * Map one parameter onto another
	 *  @param {object} o Object to map
	 *  @param {*} knew The new parameter name
	 *  @param {*} old The old parameter name
	 */
	var _fnCompatMap = function ( o, knew, old ) {
		if ( o[ knew ] !== undefined ) {
			o[ old ] = o[ knew ];
		}
	};
	
	
	/**
	 * Provide backwards compatibility for the main DT options. Note that the new
	 * options are mapped onto the old parameters, so this is an external interface
	 * change only.
	 *  @param {object} init Object to map
	 */
	function _fnCompatOpts ( init )
	{
		_fnCompatMap( init, 'ordering',      'bSort' );
		_fnCompatMap( init, 'orderMulti',    'bSortMulti' );
		_fnCompatMap( init, 'orderClasses',  'bSortClasses' );
		_fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );
		_fnCompatMap( init, 'order',         'aaSorting' );
		_fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );
		_fnCompatMap( init, 'paging',        'bPaginate' );
		_fnCompatMap( init, 'pagingType',    'sPaginationType' );
		_fnCompatMap( init, 'pageLength',    'iDisplayLength' );
		_fnCompatMap( init, 'searching',     'bFilter' );
	
		// Boolean initialisation of x-scrolling
		if ( typeof init.sScrollX === 'boolean' ) {
			init.sScrollX = init.sScrollX ? '100%' : '';
		}
		if ( typeof init.scrollX === 'boolean' ) {
			init.scrollX = init.scrollX ? '100%' : '';
		}
	
		// Column search objects are in an array, so it needs to be converted
		// element by element
		var searchCols = init.aoSearchCols;
	
		if ( searchCols ) {
			for ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {
				if ( searchCols[i] ) {
					_fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );
				}
			}
		}
	}
	
	
	/**
	 * Provide backwards compatibility for column options. Note that the new options
	 * are mapped onto the old parameters, so this is an external interface change
	 * only.
	 *  @param {object} init Object to map
	 */
	function _fnCompatCols ( init )
	{
		_fnCompatMap( init, 'orderable',     'bSortable' );
		_fnCompatMap( init, 'orderData',     'aDataSort' );
		_fnCompatMap( init, 'orderSequence', 'asSorting' );
		_fnCompatMap( init, 'orderDataType', 'sortDataType' );
	
		// orderData can be given as an integer
		var dataSort = init.aDataSort;
		if ( typeof dataSort === 'number' && ! $.isArray( dataSort ) ) {
			init.aDataSort = [ dataSort ];
		}
	}
	
	
	/**
	 * Browser feature detection for capabilities, quirks
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnBrowserDetect( settings )
	{
		// We don't need to do this every time DataTables is constructed, the values
		// calculated are specific to the browser and OS configuration which we
		// don't expect to change between initialisations
		if ( ! DataTable.__browser ) {
			var browser = {};
			DataTable.__browser = browser;
	
			// Scrolling feature / quirks detection
			var n = $('<div/>')
				.css( {
					position: 'fixed',
					top: 0,
					left: $(window).scrollLeft()*-1, // allow for scrolling
					height: 1,
					width: 1,
					overflow: 'hidden'
				} )
				.append(
					$('<div/>')
						.css( {
							position: 'absolute',
							top: 1,
							left: 1,
							width: 100,
							overflow: 'scroll'
						} )
						.append(
							$('<div/>')
								.css( {
									width: '100%',
									height: 10
								} )
						)
				)
				.appendTo( 'body' );
	
			var outer = n.children();
			var inner = outer.children();
	
			// Numbers below, in order, are:
			// inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth
			//
			// IE6 XP:                           100 100 100  83
			// IE7 Vista:                        100 100 100  83
			// IE 8+ Windows:                     83  83 100  83
			// Evergreen Windows:                 83  83 100  83
			// Evergreen Mac with scrollbars:     85  85 100  85
			// Evergreen Mac without scrollbars: 100 100 100 100
	
			// Get scrollbar width
			browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;
	
			// IE6/7 will oversize a width 100% element inside a scrolling element, to
			// include the width of the scrollbar, while other browsers ensure the inner
			// element is contained without forcing scrolling
			browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;
	
			// In rtl text layout, some browsers (most, but not all) will place the
			// scrollbar on the left, rather than the right.
			browser.bScrollbarLeft = Math.round( inner.offset().left ) !== 1;
	
			// IE8- don't provide height and width for getBoundingClientRect
			browser.bBounding = n[0].getBoundingClientRect().width ? true : false;
	
			n.remove();
		}
	
		$.extend( settings.oBrowser, DataTable.__browser );
		settings.oScroll.iBarWidth = DataTable.__browser.barWidth;
	}
	
	
	/**
	 * Array.prototype reduce[Right] method, used for browsers which don't support
	 * JS 1.6. Done this way to reduce code size, since we iterate either way
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnReduce ( that, fn, init, start, end, inc )
	{
		var
			i = start,
			value,
			isSet = false;
	
		if ( init !== undefined ) {
			value = init;
			isSet = true;
		}
	
		while ( i !== end ) {
			if ( ! that.hasOwnProperty(i) ) {
				continue;
			}
	
			value = isSet ?
				fn( value, that[i], i, that ) :
				that[i];
	
			isSet = true;
			i += inc;
		}
	
		return value;
	}
	
	/**
	 * Add a column to the list used for the table with default values
	 *  @param {object} oSettings dataTables settings object
	 *  @param {node} nTh The th element for this column
	 *  @memberof DataTable#oApi
	 */
	function _fnAddColumn( oSettings, nTh )
	{
		// Add column to aoColumns array
		var oDefaults = DataTable.defaults.column;
		var iCol = oSettings.aoColumns.length;
		var oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {
			"nTh": nTh ? nTh : document.createElement('th'),
			"sTitle":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',
			"aDataSort": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
			"mData": oDefaults.mData ? oDefaults.mData : iCol,
			idx: iCol
		} );
		oSettings.aoColumns.push( oCol );
	
		// Add search object for column specific search. Note that the `searchCols[ iCol ]`
		// passed into extend can be undefined. This allows the user to give a default
		// with only some of the parameters defined, and also not give a default
		var searchCols = oSettings.aoPreSearchCols;
		searchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );
	
		// Use the default column options function to initialise classes etc
		_fnColumnOptions( oSettings, iCol, $(nTh).data() );
	}
	
	
	/**
	 * Apply options for a column
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iCol column index to consider
	 *  @param {object} oOptions object with sType, bVisible and bSearchable etc
	 *  @memberof DataTable#oApi
	 */
	function _fnColumnOptions( oSettings, iCol, oOptions )
	{
		var oCol = oSettings.aoColumns[ iCol ];
		var oClasses = oSettings.oClasses;
		var th = $(oCol.nTh);
	
		// Try to get width information from the DOM. We can't get it from CSS
		// as we'd need to parse the CSS stylesheet. `width` option can override
		if ( ! oCol.sWidthOrig ) {
			// Width attribute
			oCol.sWidthOrig = th.attr('width') || null;
	
			// Style attribute
			var t = (th.attr('style') || '').match(/width:\s*(\d+[pxem%]+)/);
			if ( t ) {
				oCol.sWidthOrig = t[1];
			}
		}
	
		/* User specified column options */
		if ( oOptions !== undefined && oOptions !== null )
		{
			// Backwards compatibility
			_fnCompatCols( oOptions );
	
			// Map camel case parameters to their Hungarian counterparts
			_fnCamelToHungarian( DataTable.defaults.column, oOptions );
	
			/* Backwards compatibility for mDataProp */
			if ( oOptions.mDataProp !== undefined && !oOptions.mData )
			{
				oOptions.mData = oOptions.mDataProp;
			}
	
			if ( oOptions.sType )
			{
				oCol._sManualType = oOptions.sType;
			}
	
			// `class` is a reserved word in Javascript, so we need to provide
			// the ability to use a valid name for the camel case input
			if ( oOptions.className && ! oOptions.sClass )
			{
				oOptions.sClass = oOptions.className;
			}
			if ( oOptions.sClass ) {
				th.addClass( oOptions.sClass );
			}
	
			$.extend( oCol, oOptions );
			_fnMap( oCol, oOptions, "sWidth", "sWidthOrig" );
	
			/* iDataSort to be applied (backwards compatibility), but aDataSort will take
			 * priority if defined
			 */
			if ( oOptions.iDataSort !== undefined )
			{
				oCol.aDataSort = [ oOptions.iDataSort ];
			}
			_fnMap( oCol, oOptions, "aDataSort" );
		}
	
		/* Cache the data get and set functions for speed */
		var mDataSrc = oCol.mData;
		var mData = _fnGetObjectDataFn( mDataSrc );
		var mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;
	
		var attrTest = function( src ) {
			return typeof src === 'string' && src.indexOf('@') !== -1;
		};
		oCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (
			attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)
		);
		oCol._setter = null;
	
		oCol.fnGetData = function (rowData, type, meta) {
			var innerData = mData( rowData, type, undefined, meta );
	
			return mRender && type ?
				mRender( innerData, type, rowData, meta ) :
				innerData;
		};
		oCol.fnSetData = function ( rowData, val, meta ) {
			return _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );
		};
	
		// Indicate if DataTables should read DOM data as an object or array
		// Used in _fnGetRowElements
		if ( typeof mDataSrc !== 'number' ) {
			oSettings._rowReadObject = true;
		}
	
		/* Feature sorting overrides column specific when off */
		if ( !oSettings.oFeatures.bSort )
		{
			oCol.bSortable = false;
			th.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called
		}
	
		/* Check that the class assignment is correct for sorting */
		var bAsc = $.inArray('asc', oCol.asSorting) !== -1;
		var bDesc = $.inArray('desc', oCol.asSorting) !== -1;
		if ( !oCol.bSortable || (!bAsc && !bDesc) )
		{
			oCol.sSortingClass = oClasses.sSortableNone;
			oCol.sSortingClassJUI = "";
		}
		else if ( bAsc && !bDesc )
		{
			oCol.sSortingClass = oClasses.sSortableAsc;
			oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
		}
		else if ( !bAsc && bDesc )
		{
			oCol.sSortingClass = oClasses.sSortableDesc;
			oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
		}
		else
		{
			oCol.sSortingClass = oClasses.sSortable;
			oCol.sSortingClassJUI = oClasses.sSortJUI;
		}
	}
	
	
	/**
	 * Adjust the table column widths for new data. Note: you would probably want to
	 * do a redraw after calling this function!
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnAdjustColumnSizing ( settings )
	{
		/* Not interested in doing column width calculation if auto-width is disabled */
		if ( settings.oFeatures.bAutoWidth !== false )
		{
			var columns = settings.aoColumns;
	
			_fnCalculateColumnWidths( settings );
			for ( var i=0 , iLen=columns.length ; i<iLen ; i++ )
			{
				columns[i].nTh.style.width = columns[i].sWidth;
			}
		}
	
		var scroll = settings.oScroll;
		if ( scroll.sY !== '' || scroll.sX !== '')
		{
			_fnScrollDraw( settings );
		}
	
		_fnCallbackFire( settings, null, 'column-sizing', [settings] );
	}
	
	
	/**
	 * Covert the index of a visible column to the index in the data array (take account
	 * of hidden columns)
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iMatch Visible column index to lookup
	 *  @returns {int} i the data index
	 *  @memberof DataTable#oApi
	 */
	function _fnVisibleToColumnIndex( oSettings, iMatch )
	{
		var aiVis = _fnGetColumns( oSettings, 'bVisible' );
	
		return typeof aiVis[iMatch] === 'number' ?
			aiVis[iMatch] :
			null;
	}
	
	
	/**
	 * Covert the index of an index in the data array and convert it to the visible
	 *   column index (take account of hidden columns)
	 *  @param {int} iMatch Column index to lookup
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {int} i the data index
	 *  @memberof DataTable#oApi
	 */
	function _fnColumnIndexToVisible( oSettings, iMatch )
	{
		var aiVis = _fnGetColumns( oSettings, 'bVisible' );
		var iPos = $.inArray( iMatch, aiVis );
	
		return iPos !== -1 ? iPos : null;
	}
	
	
	/**
	 * Get the number of visible columns
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {int} i the number of visible columns
	 *  @memberof DataTable#oApi
	 */
	function _fnVisbleColumns( oSettings )
	{
		var vis = 0;
	
		// No reduce in IE8, use a loop for now
		$.each( oSettings.aoColumns, function ( i, col ) {
			if ( col.bVisible && $(col.nTh).css('display') !== 'none' ) {
				vis++;
			}
		} );
	
		return vis;
	}
	
	
	/**
	 * Get an array of column indexes that match a given property
	 *  @param {object} oSettings dataTables settings object
	 *  @param {string} sParam Parameter in aoColumns to look for - typically
	 *    bVisible or bSearchable
	 *  @returns {array} Array of indexes with matched properties
	 *  @memberof DataTable#oApi
	 */
	function _fnGetColumns( oSettings, sParam )
	{
		var a = [];
	
		$.map( oSettings.aoColumns, function(val, i) {
			if ( val[sParam] ) {
				a.push( i );
			}
		} );
	
		return a;
	}
	
	
	/**
	 * Calculate the 'type' of a column
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnColumnTypes ( settings )
	{
		var columns = settings.aoColumns;
		var data = settings.aoData;
		var types = DataTable.ext.type.detect;
		var i, ien, j, jen, k, ken;
		var col, cell, detectedType, cache;
	
		// For each column, spin over the 
		for ( i=0, ien=columns.length ; i<ien ; i++ ) {
			col = columns[i];
			cache = [];
	
			if ( ! col.sType && col._sManualType ) {
				col.sType = col._sManualType;
			}
			else if ( ! col.sType ) {
				for ( j=0, jen=types.length ; j<jen ; j++ ) {
					for ( k=0, ken=data.length ; k<ken ; k++ ) {
						// Use a cache array so we only need to get the type data
						// from the formatter once (when using multiple detectors)
						if ( cache[k] === undefined ) {
							cache[k] = _fnGetCellData( settings, k, i, 'type' );
						}
	
						detectedType = types[j]( cache[k], settings );
	
						// If null, then this type can't apply to this column, so
						// rather than testing all cells, break out. There is an
						// exception for the last type which is `html`. We need to
						// scan all rows since it is possible to mix string and HTML
						// types
						if ( ! detectedType && j !== types.length-1 ) {
							break;
						}
	
						// Only a single match is needed for html type since it is
						// bottom of the pile and very similar to string
						if ( detectedType === 'html' ) {
							break;
						}
					}
	
					// Type is valid for all data points in the column - use this
					// type
					if ( detectedType ) {
						col.sType = detectedType;
						break;
					}
				}
	
				// Fall back - if no type was detected, always use string
				if ( ! col.sType ) {
					col.sType = 'string';
				}
			}
		}
	}
	
	
	/**
	 * Take the column definitions and static columns arrays and calculate how
	 * they relate to column indexes. The callback function will then apply the
	 * definition found for a column to a suitable configuration object.
	 *  @param {object} oSettings dataTables settings object
	 *  @param {array} aoColDefs The aoColumnDefs array that is to be applied
	 *  @param {array} aoCols The aoColumns array that defines columns individually
	 *  @param {function} fn Callback function - takes two parameters, the calculated
	 *    column index and the definition for that column.
	 *  @memberof DataTable#oApi
	 */
	function _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )
	{
		var i, iLen, j, jLen, k, kLen, def;
		var columns = oSettings.aoColumns;
	
		// Column definitions with aTargets
		if ( aoColDefs )
		{
			/* Loop over the definitions array - loop in reverse so first instance has priority */
			for ( i=aoColDefs.length-1 ; i>=0 ; i-- )
			{
				def = aoColDefs[i];
	
				/* Each definition can target multiple columns, as it is an array */
				var aTargets = def.targets !== undefined ?
					def.targets :
					def.aTargets;
	
				if ( ! $.isArray( aTargets ) )
				{
					aTargets = [ aTargets ];
				}
	
				for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )
				{
					if ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )
					{
						/* Add columns that we don't yet know about */
						while( columns.length <= aTargets[j] )
						{
							_fnAddColumn( oSettings );
						}
	
						/* Integer, basic index */
						fn( aTargets[j], def );
					}
					else if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )
					{
						/* Negative integer, right to left column counting */
						fn( columns.length+aTargets[j], def );
					}
					else if ( typeof aTargets[j] === 'string' )
					{
						/* Class name matching on TH element */
						for ( k=0, kLen=columns.length ; k<kLen ; k++ )
						{
							if ( aTargets[j] == "_all" ||
							     $(columns[k].nTh).hasClass( aTargets[j] ) )
							{
								fn( k, def );
							}
						}
					}
				}
			}
		}
	
		// Statically defined columns array
		if ( aoCols )
		{
			for ( i=0, iLen=aoCols.length ; i<iLen ; i++ )
			{
				fn( i, aoCols[i] );
			}
		}
	}
	
	/**
	 * Add a data array to the table, creating DOM node etc. This is the parallel to
	 * _fnGatherData, but for adding rows from a Javascript source, rather than a
	 * DOM source.
	 *  @param {object} oSettings dataTables settings object
	 *  @param {array} aData data array to be added
	 *  @param {node} [nTr] TR element to add to the table - optional. If not given,
	 *    DataTables will create a row automatically
	 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
	 *    if nTr is.
	 *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed
	 *  @memberof DataTable#oApi
	 */
	function _fnAddData ( oSettings, aDataIn, nTr, anTds )
	{
		/* Create the object for storing information about this new row */
		var iRow = oSettings.aoData.length;
		var oData = $.extend( true, {}, DataTable.models.oRow, {
			src: nTr ? 'dom' : 'data',
			idx: iRow
		} );
	
		oData._aData = aDataIn;
		oSettings.aoData.push( oData );
	
		/* Create the cells */
		var nTd, sThisType;
		var columns = oSettings.aoColumns;
	
		// Invalidate the column types as the new data needs to be revalidated
		for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
		{
			columns[i].sType = null;
		}
	
		/* Add to the display array */
		oSettings.aiDisplayMaster.push( iRow );
	
		var id = oSettings.rowIdFn( aDataIn );
		if ( id !== undefined ) {
			oSettings.aIds[ id ] = oData;
		}
	
		/* Create the DOM information, or register it if already present */
		if ( nTr || ! oSettings.oFeatures.bDeferRender )
		{
			_fnCreateTr( oSettings, iRow, nTr, anTds );
		}
	
		return iRow;
	}
	
	
	/**
	 * Add one or more TR elements to the table. Generally we'd expect to
	 * use this for reading data from a DOM sourced table, but it could be
	 * used for an TR element. Note that if a TR is given, it is used (i.e.
	 * it is not cloned).
	 *  @param {object} settings dataTables settings object
	 *  @param {array|node|jQuery} trs The TR element(s) to add to the table
	 *  @returns {array} Array of indexes for the added rows
	 *  @memberof DataTable#oApi
	 */
	function _fnAddTr( settings, trs )
	{
		var row;
	
		// Allow an individual node to be passed in
		if ( ! (trs instanceof $) ) {
			trs = $(trs);
		}
	
		return trs.map( function (i, el) {
			row = _fnGetRowElements( settings, el );
			return _fnAddData( settings, row.data, el, row.cells );
		} );
	}
	
	
	/**
	 * Take a TR element and convert it to an index in aoData
	 *  @param {object} oSettings dataTables settings object
	 *  @param {node} n the TR element to find
	 *  @returns {int} index if the node is found, null if not
	 *  @memberof DataTable#oApi
	 */
	function _fnNodeToDataIndex( oSettings, n )
	{
		return (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;
	}
	
	
	/**
	 * Take a TD element and convert it into a column data index (not the visible index)
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iRow The row number the TD/TH can be found in
	 *  @param {node} n The TD/TH element to find
	 *  @returns {int} index if the node is found, -1 if not
	 *  @memberof DataTable#oApi
	 */
	function _fnNodeToColumnIndex( oSettings, iRow, n )
	{
		return $.inArray( n, oSettings.aoData[ iRow ].anCells );
	}
	
	
	/**
	 * Get the data for a given cell from the internal cache, taking into account data mapping
	 *  @param {object} settings dataTables settings object
	 *  @param {int} rowIdx aoData row id
	 *  @param {int} colIdx Column index
	 *  @param {string} type data get type ('display', 'type' 'filter' 'sort')
	 *  @returns {*} Cell data
	 *  @memberof DataTable#oApi
	 */
	function _fnGetCellData( settings, rowIdx, colIdx, type )
	{
		var draw           = settings.iDraw;
		var col            = settings.aoColumns[colIdx];
		var rowData        = settings.aoData[rowIdx]._aData;
		var defaultContent = col.sDefaultContent;
		var cellData       = col.fnGetData( rowData, type, {
			settings: settings,
			row:      rowIdx,
			col:      colIdx
		} );
	
		if ( cellData === undefined ) {
			if ( settings.iDrawError != draw && defaultContent === null ) {
				_fnLog( settings, 0, "Requested unknown parameter "+
					(typeof col.mData=='function' ? '{function}' : "'"+col.mData+"'")+
					" for row "+rowIdx+", column "+colIdx, 4 );
				settings.iDrawError = draw;
			}
			return defaultContent;
		}
	
		// When the data source is null and a specific data type is requested (i.e.
		// not the original data), we can use default column data
		if ( (cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined ) {
			cellData = defaultContent;
		}
		else if ( typeof cellData === 'function' ) {
			// If the data source is a function, then we run it and use the return,
			// executing in the scope of the data object (for instances)
			return cellData.call( rowData );
		}
	
		if ( cellData === null && type == 'display' ) {
			return '';
		}
		return cellData;
	}
	
	
	/**
	 * Set the value for a specific cell, into the internal data cache
	 *  @param {object} settings dataTables settings object
	 *  @param {int} rowIdx aoData row id
	 *  @param {int} colIdx Column index
	 *  @param {*} val Value to set
	 *  @memberof DataTable#oApi
	 */
	function _fnSetCellData( settings, rowIdx, colIdx, val )
	{
		var col     = settings.aoColumns[colIdx];
		var rowData = settings.aoData[rowIdx]._aData;
	
		col.fnSetData( rowData, val, {
			settings: settings,
			row:      rowIdx,
			col:      colIdx
		}  );
	}
	
	
	// Private variable that is used to match action syntax in the data property object
	var __reArray = /\[.*?\]$/;
	var __reFn = /\(\)$/;
	
	/**
	 * Split string on periods, taking into account escaped periods
	 * @param  {string} str String to split
	 * @return {array} Split string
	 */
	function _fnSplitObjNotation( str )
	{
		return $.map( str.match(/(\\.|[^\.])+/g) || [''], function ( s ) {
			return s.replace(/\\\./g, '.');
		} );
	}
	
	
	/**
	 * Return a function that can be used to get data from a source object, taking
	 * into account the ability to use nested objects as a source
	 *  @param {string|int|function} mSource The data source for the object
	 *  @returns {function} Data get function
	 *  @memberof DataTable#oApi
	 */
	function _fnGetObjectDataFn( mSource )
	{
		if ( $.isPlainObject( mSource ) )
		{
			/* Build an object of get functions, and wrap them in a single call */
			var o = {};
			$.each( mSource, function (key, val) {
				if ( val ) {
					o[key] = _fnGetObjectDataFn( val );
				}
			} );
	
			return function (data, type, row, meta) {
				var t = o[type] || o._;
				return t !== undefined ?
					t(data, type, row, meta) :
					data;
			};
		}
		else if ( mSource === null )
		{
			/* Give an empty string for rendering / sorting etc */
			return function (data) { // type, row and meta also passed, but not used
				return data;
			};
		}
		else if ( typeof mSource === 'function' )
		{
			return function (data, type, row, meta) {
				return mSource( data, type, row, meta );
			};
		}
		else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||
			      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )
		{
			/* If there is a . in the source string then the data source is in a
			 * nested object so we loop over the data for each level to get the next
			 * level down. On each loop we test for undefined, and if found immediately
			 * return. This allows entire objects to be missing and sDefaultContent to
			 * be used if defined, rather than throwing an error
			 */
			var fetchData = function (data, type, src) {
				var arrayNotation, funcNotation, out, innerSrc;
	
				if ( src !== "" )
				{
					var a = _fnSplitObjNotation( src );
	
					for ( var i=0, iLen=a.length ; i<iLen ; i++ )
					{
						// Check if we are dealing with special notation
						arrayNotation = a[i].match(__reArray);
						funcNotation = a[i].match(__reFn);
	
						if ( arrayNotation )
						{
							// Array notation
							a[i] = a[i].replace(__reArray, '');
	
							// Condition allows simply [] to be passed in
							if ( a[i] !== "" ) {
								data = data[ a[i] ];
							}
							out = [];
	
							// Get the remainder of the nested object to get
							a.splice( 0, i+1 );
							innerSrc = a.join('.');
	
							// Traverse each entry in the array getting the properties requested
							if ( $.isArray( data ) ) {
								for ( var j=0, jLen=data.length ; j<jLen ; j++ ) {
									out.push( fetchData( data[j], type, innerSrc ) );
								}
							}
	
							// If a string is given in between the array notation indicators, that
							// is used to join the strings together, otherwise an array is returned
							var join = arrayNotation[0].substring(1, arrayNotation[0].length-1);
							data = (join==="") ? out : out.join(join);
	
							// The inner call to fetchData has already traversed through the remainder
							// of the source requested, so we exit from the loop
							break;
						}
						else if ( funcNotation )
						{
							// Function call
							a[i] = a[i].replace(__reFn, '');
							data = data[ a[i] ]();
							continue;
						}
	
						if ( data === null || data[ a[i] ] === undefined )
						{
							return undefined;
						}
						data = data[ a[i] ];
					}
				}
	
				return data;
			};
	
			return function (data, type) { // row and meta also passed, but not used
				return fetchData( data, type, mSource );
			};
		}
		else
		{
			/* Array or flat object mapping */
			return function (data, type) { // row and meta also passed, but not used
				return data[mSource];
			};
		}
	}
	
	
	/**
	 * Return a function that can be used to set data from a source object, taking
	 * into account the ability to use nested objects as a source
	 *  @param {string|int|function} mSource The data source for the object
	 *  @returns {function} Data set function
	 *  @memberof DataTable#oApi
	 */
	function _fnSetObjectDataFn( mSource )
	{
		if ( $.isPlainObject( mSource ) )
		{
			/* Unlike get, only the underscore (global) option is used for for
			 * setting data since we don't know the type here. This is why an object
			 * option is not documented for `mData` (which is read/write), but it is
			 * for `mRender` which is read only.
			 */
			return _fnSetObjectDataFn( mSource._ );
		}
		else if ( mSource === null )
		{
			/* Nothing to do when the data source is null */
			return function () {};
		}
		else if ( typeof mSource === 'function' )
		{
			return function (data, val, meta) {
				mSource( data, 'set', val, meta );
			};
		}
		else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||
			      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )
		{
			/* Like the get, we need to get data from a nested object */
			var setData = function (data, val, src) {
				var a = _fnSplitObjNotation( src ), b;
				var aLast = a[a.length-1];
				var arrayNotation, funcNotation, o, innerSrc;
	
				for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )
				{
					// Check if we are dealing with an array notation request
					arrayNotation = a[i].match(__reArray);
					funcNotation = a[i].match(__reFn);
	
					if ( arrayNotation )
					{
						a[i] = a[i].replace(__reArray, '');
						data[ a[i] ] = [];
	
						// Get the remainder of the nested object to set so we can recurse
						b = a.slice();
						b.splice( 0, i+1 );
						innerSrc = b.join('.');
	
						// Traverse each entry in the array setting the properties requested
						if ( $.isArray( val ) )
						{
							for ( var j=0, jLen=val.length ; j<jLen ; j++ )
							{
								o = {};
								setData( o, val[j], innerSrc );
								data[ a[i] ].push( o );
							}
						}
						else
						{
							// We've been asked to save data to an array, but it
							// isn't array data to be saved. Best that can be done
							// is to just save the value.
							data[ a[i] ] = val;
						}
	
						// The inner call to setData has already traversed through the remainder
						// of the source and has set the data, thus we can exit here
						return;
					}
					else if ( funcNotation )
					{
						// Function call
						a[i] = a[i].replace(__reFn, '');
						data = data[ a[i] ]( val );
					}
	
					// If the nested object doesn't currently exist - since we are
					// trying to set the value - create it
					if ( data[ a[i] ] === null || data[ a[i] ] === undefined )
					{
						data[ a[i] ] = {};
					}
					data = data[ a[i] ];
				}
	
				// Last item in the input - i.e, the actual set
				if ( aLast.match(__reFn ) )
				{
					// Function call
					data = data[ aLast.replace(__reFn, '') ]( val );
				}
				else
				{
					// If array notation is used, we just want to strip it and use the property name
					// and assign the value. If it isn't used, then we get the result we want anyway
					data[ aLast.replace(__reArray, '') ] = val;
				}
			};
	
			return function (data, val) { // meta is also passed in, but not used
				return setData( data, val, mSource );
			};
		}
		else
		{
			/* Array or flat object mapping */
			return function (data, val) { // meta is also passed in, but not used
				data[mSource] = val;
			};
		}
	}
	
	
	/**
	 * Return an array with the full table data
	 *  @param {object} oSettings dataTables settings object
	 *  @returns array {array} aData Master data array
	 *  @memberof DataTable#oApi
	 */
	function _fnGetDataMaster ( settings )
	{
		return _pluck( settings.aoData, '_aData' );
	}
	
	
	/**
	 * Nuke the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnClearTable( settings )
	{
		settings.aoData.length = 0;
		settings.aiDisplayMaster.length = 0;
		settings.aiDisplay.length = 0;
		settings.aIds = {};
	}
	
	
	 /**
	 * Take an array of integers (index array) and remove a target integer (value - not
	 * the key!)
	 *  @param {array} a Index array to target
	 *  @param {int} iTarget value to find
	 *  @memberof DataTable#oApi
	 */
	function _fnDeleteIndex( a, iTarget, splice )
	{
		var iTargetIndex = -1;
	
		for ( var i=0, iLen=a.length ; i<iLen ; i++ )
		{
			if ( a[i] == iTarget )
			{
				iTargetIndex = i;
			}
			else if ( a[i] > iTarget )
			{
				a[i]--;
			}
		}
	
		if ( iTargetIndex != -1 && splice === undefined )
		{
			a.splice( iTargetIndex, 1 );
		}
	}
	
	
	/**
	 * Mark cached data as invalid such that a re-read of the data will occur when
	 * the cached data is next requested. Also update from the data source object.
	 *
	 * @param {object} settings DataTables settings object
	 * @param {int}    rowIdx   Row index to invalidate
	 * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'
	 *     or 'data'
	 * @param {int}    [colIdx] Column index to invalidate. If undefined the whole
	 *     row will be invalidated
	 * @memberof DataTable#oApi
	 *
	 * @todo For the modularisation of v1.11 this will need to become a callback, so
	 *   the sort and filter methods can subscribe to it. That will required
	 *   initialisation options for sorting, which is why it is not already baked in
	 */
	function _fnInvalidate( settings, rowIdx, src, colIdx )
	{
		var row = settings.aoData[ rowIdx ];
		var i, ien;
		var cellWrite = function ( cell, col ) {
			// This is very frustrating, but in IE if you just write directly
			// to innerHTML, and elements that are overwritten are GC'ed,
			// even if there is a reference to them elsewhere
			while ( cell.childNodes.length ) {
				cell.removeChild( cell.firstChild );
			}
	
			cell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );
		};
	
		// Are we reading last data from DOM or the data object?
		if ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {
			// Read the data from the DOM
			row._aData = _fnGetRowElements(
					settings, row, colIdx, colIdx === undefined ? undefined : row._aData
				)
				.data;
		}
		else {
			// Reading from data object, update the DOM
			var cells = row.anCells;
	
			if ( cells ) {
				if ( colIdx !== undefined ) {
					cellWrite( cells[colIdx], colIdx );
				}
				else {
					for ( i=0, ien=cells.length ; i<ien ; i++ ) {
						cellWrite( cells[i], i );
					}
				}
			}
		}
	
		// For both row and cell invalidation, the cached data for sorting and
		// filtering is nulled out
		row._aSortData = null;
		row._aFilterData = null;
	
		// Invalidate the type for a specific column (if given) or all columns since
		// the data might have changed
		var cols = settings.aoColumns;
		if ( colIdx !== undefined ) {
			cols[ colIdx ].sType = null;
		}
		else {
			for ( i=0, ien=cols.length ; i<ien ; i++ ) {
				cols[i].sType = null;
			}
	
			// Update DataTables special `DT_*` attributes for the row
			_fnRowAttributes( settings, row );
		}
	}
	
	
	/**
	 * Build a data source object from an HTML row, reading the contents of the
	 * cells that are in the row.
	 *
	 * @param {object} settings DataTables settings object
	 * @param {node|object} TR element from which to read data or existing row
	 *   object from which to re-read the data from the cells
	 * @param {int} [colIdx] Optional column index
	 * @param {array|object} [d] Data source object. If `colIdx` is given then this
	 *   parameter should also be given and will be used to write the data into.
	 *   Only the column in question will be written
	 * @returns {object} Object with two parameters: `data` the data read, in
	 *   document order, and `cells` and array of nodes (they can be useful to the
	 *   caller, so rather than needing a second traversal to get them, just return
	 *   them from here).
	 * @memberof DataTable#oApi
	 */
	function _fnGetRowElements( settings, row, colIdx, d )
	{
		var
			tds = [],
			td = row.firstChild,
			name, col, o, i=0, contents,
			columns = settings.aoColumns,
			objectRead = settings._rowReadObject;
	
		// Allow the data object to be passed in, or construct
		d = d !== undefined ?
			d :
			objectRead ?
				{} :
				[];
	
		var attr = function ( str, td  ) {
			if ( typeof str === 'string' ) {
				var idx = str.indexOf('@');
	
				if ( idx !== -1 ) {
					var attr = str.substring( idx+1 );
					var setter = _fnSetObjectDataFn( str );
					setter( d, td.getAttribute( attr ) );
				}
			}
		};
	
		// Read data from a cell and store into the data object
		var cellProcess = function ( cell ) {
			if ( colIdx === undefined || colIdx === i ) {
				col = columns[i];
				contents = $.trim(cell.innerHTML);
	
				if ( col && col._bAttrSrc ) {
					var setter = _fnSetObjectDataFn( col.mData._ );
					setter( d, contents );
	
					attr( col.mData.sort, cell );
					attr( col.mData.type, cell );
					attr( col.mData.filter, cell );
				}
				else {
					// Depending on the `data` option for the columns the data can
					// be read to either an object or an array.
					if ( objectRead ) {
						if ( ! col._setter ) {
							// Cache the setter function
							col._setter = _fnSetObjectDataFn( col.mData );
						}
						col._setter( d, contents );
					}
					else {
						d[i] = contents;
					}
				}
			}
	
			i++;
		};
	
		if ( td ) {
			// `tr` element was passed in
			while ( td ) {
				name = td.nodeName.toUpperCase();
	
				if ( name == "TD" || name == "TH" ) {
					cellProcess( td );
					tds.push( td );
				}
	
				td = td.nextSibling;
			}
		}
		else {
			// Existing row object passed in
			tds = row.anCells;
	
			for ( var j=0, jen=tds.length ; j<jen ; j++ ) {
				cellProcess( tds[j] );
			}
		}
	
		// Read the ID from the DOM if present
		var rowNode = row.firstChild ? row : row.nTr;
	
		if ( rowNode ) {
			var id = rowNode.getAttribute( 'id' );
	
			if ( id ) {
				_fnSetObjectDataFn( settings.rowId )( d, id );
			}
		}
	
		return {
			data: d,
			cells: tds
		};
	}
	/**
	 * Create a new TR element (and it's TD children) for a row
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iRow Row to consider
	 *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,
	 *    DataTables will create a row automatically
	 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
	 *    if nTr is.
	 *  @memberof DataTable#oApi
	 */
	function _fnCreateTr ( oSettings, iRow, nTrIn, anTds )
	{
		var
			row = oSettings.aoData[iRow],
			rowData = row._aData,
			cells = [],
			nTr, nTd, oCol,
			i, iLen;
	
		if ( row.nTr === null )
		{
			nTr = nTrIn || document.createElement('tr');
	
			row.nTr = nTr;
			row.anCells = cells;
	
			/* Use a private property on the node to allow reserve mapping from the node
			 * to the aoData array for fast look up
			 */
			nTr._DT_RowIndex = iRow;
	
			/* Special parameters can be given by the data source to be used on the row */
			_fnRowAttributes( oSettings, row );
	
			/* Process each column */
			for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
			{
				oCol = oSettings.aoColumns[i];
	
				nTd = nTrIn ? anTds[i] : document.createElement( oCol.sCellType );
				nTd._DT_CellIndex = {
					row: iRow,
					column: i
				};
				
				cells.push( nTd );
	
				// Need to create the HTML if new, or if a rendering function is defined
				if ( (!nTrIn || oCol.mRender || oCol.mData !== i) &&
					 (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i+'.display')
				) {
					nTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );
				}
	
				/* Add user defined class */
				if ( oCol.sClass )
				{
					nTd.className += ' '+oCol.sClass;
				}
	
				// Visibility - add or remove as required
				if ( oCol.bVisible && ! nTrIn )
				{
					nTr.appendChild( nTd );
				}
				else if ( ! oCol.bVisible && nTrIn )
				{
					nTd.parentNode.removeChild( nTd );
				}
	
				if ( oCol.fnCreatedCell )
				{
					oCol.fnCreatedCell.call( oSettings.oInstance,
						nTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i
					);
				}
			}
	
			_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow, cells] );
		}
	
		// Remove once webkit bug 131819 and Chromium bug 365619 have been resolved
		// and deployed
		row.nTr.setAttribute( 'role', 'row' );
	}
	
	
	/**
	 * Add attributes to a row based on the special `DT_*` parameters in a data
	 * source object.
	 *  @param {object} settings DataTables settings object
	 *  @param {object} DataTables row object for the row to be modified
	 *  @memberof DataTable#oApi
	 */
	function _fnRowAttributes( settings, row )
	{
		var tr = row.nTr;
		var data = row._aData;
	
		if ( tr ) {
			var id = settings.rowIdFn( data );
	
			if ( id ) {
				tr.id = id;
			}
	
			if ( data.DT_RowClass ) {
				// Remove any classes added by DT_RowClass before
				var a = data.DT_RowClass.split(' ');
				row.__rowc = row.__rowc ?
					_unique( row.__rowc.concat( a ) ) :
					a;
	
				$(tr)
					.removeClass( row.__rowc.join(' ') )
					.addClass( data.DT_RowClass );
			}
	
			if ( data.DT_RowAttr ) {
				$(tr).attr( data.DT_RowAttr );
			}
	
			if ( data.DT_RowData ) {
				$(tr).data( data.DT_RowData );
			}
		}
	}
	
	
	/**
	 * Create the HTML header for the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnBuildHead( oSettings )
	{
		var i, ien, cell, row, column;
		var thead = oSettings.nTHead;
		var tfoot = oSettings.nTFoot;
		var createHeader = $('th, td', thead).length === 0;
		var classes = oSettings.oClasses;
		var columns = oSettings.aoColumns;
	
		if ( createHeader ) {
			row = $('<tr/>').appendTo( thead );
		}
	
		for ( i=0, ien=columns.length ; i<ien ; i++ ) {
			column = columns[i];
			cell = $( column.nTh ).addClass( column.sClass );
	
			if ( createHeader ) {
				cell.appendTo( row );
			}
	
			// 1.11 move into sorting
			if ( oSettings.oFeatures.bSort ) {
				cell.addClass( column.sSortingClass );
	
				if ( column.bSortable !== false ) {
					cell
						.attr( 'tabindex', oSettings.iTabIndex )
						.attr( 'aria-controls', oSettings.sTableId );
	
					_fnSortAttachListener( oSettings, column.nTh, i );
				}
			}
	
			if ( column.sTitle != cell[0].innerHTML ) {
				cell.html( column.sTitle );
			}
	
			_fnRenderer( oSettings, 'header' )(
				oSettings, cell, column, classes
			);
		}
	
		if ( createHeader ) {
			_fnDetectHeader( oSettings.aoHeader, thead );
		}
		
		/* ARIA role for the rows */
	 	$(thead).find('>tr').attr('role', 'row');
	
		/* Deal with the footer - add classes if required */
		$(thead).find('>tr>th, >tr>td').addClass( classes.sHeaderTH );
		$(tfoot).find('>tr>th, >tr>td').addClass( classes.sFooterTH );
	
		// Cache the footer cells. Note that we only take the cells from the first
		// row in the footer. If there is more than one row the user wants to
		// interact with, they need to use the table().foot() method. Note also this
		// allows cells to be used for multiple columns using colspan
		if ( tfoot !== null ) {
			var cells = oSettings.aoFooter[0];
	
			for ( i=0, ien=cells.length ; i<ien ; i++ ) {
				column = columns[i];
				column.nTf = cells[i].cell;
	
				if ( column.sClass ) {
					$(column.nTf).addClass( column.sClass );
				}
			}
		}
	}
	
	
	/**
	 * Draw the header (or footer) element based on the column visibility states. The
	 * methodology here is to use the layout array from _fnDetectHeader, modified for
	 * the instantaneous column visibility, to construct the new layout. The grid is
	 * traversed over cell at a time in a rows x columns grid fashion, although each
	 * cell insert can cover multiple elements in the grid - which is tracks using the
	 * aApplied array. Cell inserts in the grid will only occur where there isn't
	 * already a cell in that position.
	 *  @param {object} oSettings dataTables settings object
	 *  @param array {objects} aoSource Layout array from _fnDetectHeader
	 *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,
	 *  @memberof DataTable#oApi
	 */
	function _fnDrawHead( oSettings, aoSource, bIncludeHidden )
	{
		var i, iLen, j, jLen, k, kLen, n, nLocalTr;
		var aoLocal = [];
		var aApplied = [];
		var iColumns = oSettings.aoColumns.length;
		var iRowspan, iColspan;
	
		if ( ! aoSource )
		{
			return;
		}
	
		if (  bIncludeHidden === undefined )
		{
			bIncludeHidden = false;
		}
	
		/* Make a copy of the master layout array, but without the visible columns in it */
		for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )
		{
			aoLocal[i] = aoSource[i].slice();
			aoLocal[i].nTr = aoSource[i].nTr;
	
			/* Remove any columns which are currently hidden */
			for ( j=iColumns-1 ; j>=0 ; j-- )
			{
				if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )
				{
					aoLocal[i].splice( j, 1 );
				}
			}
	
			/* Prep the applied array - it needs an element for each row */
			aApplied.push( [] );
		}
	
		for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )
		{
			nLocalTr = aoLocal[i].nTr;
	
			/* All cells are going to be replaced, so empty out the row */
			if ( nLocalTr )
			{
				while( (n = nLocalTr.firstChild) )
				{
					nLocalTr.removeChild( n );
				}
			}
	
			for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )
			{
				iRowspan = 1;
				iColspan = 1;
	
				/* Check to see if there is already a cell (row/colspan) covering our target
				 * insert point. If there is, then there is nothing to do.
				 */
				if ( aApplied[i][j] === undefined )
				{
					nLocalTr.appendChild( aoLocal[i][j].cell );
					aApplied[i][j] = 1;
	
					/* Expand the cell to cover as many rows as needed */
					while ( aoLocal[i+iRowspan] !== undefined &&
					        aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )
					{
						aApplied[i+iRowspan][j] = 1;
						iRowspan++;
					}
	
					/* Expand the cell to cover as many columns as needed */
					while ( aoLocal[i][j+iColspan] !== undefined &&
					        aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )
					{
						/* Must update the applied array over the rows for the columns */
						for ( k=0 ; k<iRowspan ; k++ )
						{
							aApplied[i+k][j+iColspan] = 1;
						}
						iColspan++;
					}
	
					/* Do the actual expansion in the DOM */
					$(aoLocal[i][j].cell)
						.attr('rowspan', iRowspan)
						.attr('colspan', iColspan);
				}
			}
		}
	}
	
	
	/**
	 * Insert the required TR nodes into the table for display
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnDraw( oSettings )
	{
		/* Provide a pre-callback function which can be used to cancel the draw is false is returned */
		var aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );
		if ( $.inArray( false, aPreDraw ) !== -1 )
		{
			_fnProcessingDisplay( oSettings, false );
			return;
		}
	
		var i, iLen, n;
		var anRows = [];
		var iRowCount = 0;
		var asStripeClasses = oSettings.asStripeClasses;
		var iStripes = asStripeClasses.length;
		var iOpenRows = oSettings.aoOpenRows.length;
		var oLang = oSettings.oLanguage;
		var iInitDisplayStart = oSettings.iInitDisplayStart;
		var bServerSide = _fnDataSource( oSettings ) == 'ssp';
		var aiDisplay = oSettings.aiDisplay;
	
		oSettings.bDrawing = true;
	
		/* Check and see if we have an initial draw position from state saving */
		if ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )
		{
			oSettings._iDisplayStart = bServerSide ?
				iInitDisplayStart :
				iInitDisplayStart >= oSettings.fnRecordsDisplay() ?
					0 :
					iInitDisplayStart;
	
			oSettings.iInitDisplayStart = -1;
		}
	
		var iDisplayStart = oSettings._iDisplayStart;
		var iDisplayEnd = oSettings.fnDisplayEnd();
	
		/* Server-side processing draw intercept */
		if ( oSettings.bDeferLoading )
		{
			oSettings.bDeferLoading = false;
			oSettings.iDraw++;
			_fnProcessingDisplay( oSettings, false );
		}
		else if ( !bServerSide )
		{
			oSettings.iDraw++;
		}
		else if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )
		{
			return;
		}
	
		if ( aiDisplay.length !== 0 )
		{
			var iStart = bServerSide ? 0 : iDisplayStart;
			var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;
	
			for ( var j=iStart ; j<iEnd ; j++ )
			{
				var iDataIndex = aiDisplay[j];
				var aoData = oSettings.aoData[ iDataIndex ];
				if ( aoData.nTr === null )
				{
					_fnCreateTr( oSettings, iDataIndex );
				}
	
				var nRow = aoData.nTr;
	
				/* Remove the old striping classes and then add the new one */
				if ( iStripes !== 0 )
				{
					var sStripe = asStripeClasses[ iRowCount % iStripes ];
					if ( aoData._sRowStripe != sStripe )
					{
						$(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );
						aoData._sRowStripe = sStripe;
					}
				}
	
				// Row callback functions - might want to manipulate the row
				// iRowCount and j are not currently documented. Are they at all
				// useful?
				_fnCallbackFire( oSettings, 'aoRowCallback', null,
					[nRow, aoData._aData, iRowCount, j, iDataIndex] );
	
				anRows.push( nRow );
				iRowCount++;
			}
		}
		else
		{
			/* Table is empty - create a row with an empty message in it */
			var sZero = oLang.sZeroRecords;
			if ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )
			{
				sZero = oLang.sLoadingRecords;
			}
			else if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )
			{
				sZero = oLang.sEmptyTable;
			}
	
			anRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )
				.append( $('<td />', {
					'valign':  'top',
					'colSpan': _fnVisbleColumns( oSettings ),
					'class':   oSettings.oClasses.sRowEmpty
				} ).html( sZero ) )[0];
		}
	
		/* Header and footer callbacks */
		_fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],
			_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );
	
		_fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],
			_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );
	
		var body = $(oSettings.nTBody);
	
		body.children().detach();
		body.append( $(anRows) );
	
		/* Call all required callback functions for the end of a draw */
		_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );
	
		/* Draw is complete, sorting and filtering must be as well */
		oSettings.bSorted = false;
		oSettings.bFiltered = false;
		oSettings.bDrawing = false;
	}
	
	
	/**
	 * Redraw the table - taking account of the various features which are enabled
	 *  @param {object} oSettings dataTables settings object
	 *  @param {boolean} [holdPosition] Keep the current paging position. By default
	 *    the paging is reset to the first page
	 *  @memberof DataTable#oApi
	 */
	function _fnReDraw( settings, holdPosition )
	{
		var
			features = settings.oFeatures,
			sort     = features.bSort,
			filter   = features.bFilter;
	
		if ( sort ) {
			_fnSort( settings );
		}
	
		if ( filter ) {
			_fnFilterComplete( settings, settings.oPreviousSearch );
		}
		else {
			// No filtering, so we want to just use the display master
			settings.aiDisplay = settings.aiDisplayMaster.slice();
		}
	
		if ( holdPosition !== true ) {
			settings._iDisplayStart = 0;
		}
	
		// Let any modules know about the draw hold position state (used by
		// scrolling internally)
		settings._drawHold = holdPosition;
	
		_fnDraw( settings );
	
		settings._drawHold = false;
	}
	
	
	/**
	 * Add the options to the page HTML for the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnAddOptionsHtml ( oSettings )
	{
		var classes = oSettings.oClasses;
		var table = $(oSettings.nTable);
		var holding = $('<div/>').insertBefore( table ); // Holding element for speed
		var features = oSettings.oFeatures;
	
		// All DataTables are wrapped in a div
		var insert = $('<div/>', {
			id:      oSettings.sTableId+'_wrapper',
			'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)
		} );
	
		oSettings.nHolding = holding[0];
		oSettings.nTableWrapper = insert[0];
		oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;
	
		/* Loop over the user set positioning and place the elements as needed */
		var aDom = oSettings.sDom.split('');
		var featureNode, cOption, nNewNode, cNext, sAttr, j;
		for ( var i=0 ; i<aDom.length ; i++ )
		{
			featureNode = null;
			cOption = aDom[i];
	
			if ( cOption == '<' )
			{
				/* New container div */
				nNewNode = $('<div/>')[0];
	
				/* Check to see if we should append an id and/or a class name to the container */
				cNext = aDom[i+1];
				if ( cNext == "'" || cNext == '"' )
				{
					sAttr = "";
					j = 2;
					while ( aDom[i+j] != cNext )
					{
						sAttr += aDom[i+j];
						j++;
					}
	
					/* Replace jQuery UI constants @todo depreciated */
					if ( sAttr == "H" )
					{
						sAttr = classes.sJUIHeader;
					}
					else if ( sAttr == "F" )
					{
						sAttr = classes.sJUIFooter;
					}
	
					/* The attribute can be in the format of "#id.class", "#id" or "class" This logic
					 * breaks the string into parts and applies them as needed
					 */
					if ( sAttr.indexOf('.') != -1 )
					{
						var aSplit = sAttr.split('.');
						nNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);
						nNewNode.className = aSplit[1];
					}
					else if ( sAttr.charAt(0) == "#" )
					{
						nNewNode.id = sAttr.substr(1, sAttr.length-1);
					}
					else
					{
						nNewNode.className = sAttr;
					}
	
					i += j; /* Move along the position array */
				}
	
				insert.append( nNewNode );
				insert = $(nNewNode);
			}
			else if ( cOption == '>' )
			{
				/* End container div */
				insert = insert.parent();
			}
			// @todo Move options into their own plugins?
			else if ( cOption == 'l' && features.bPaginate && features.bLengthChange )
			{
				/* Length */
				featureNode = _fnFeatureHtmlLength( oSettings );
			}
			else if ( cOption == 'f' && features.bFilter )
			{
				/* Filter */
				featureNode = _fnFeatureHtmlFilter( oSettings );
			}
			else if ( cOption == 'r' && features.bProcessing )
			{
				/* pRocessing */
				featureNode = _fnFeatureHtmlProcessing( oSettings );
			}
			else if ( cOption == 't' )
			{
				/* Table */
				featureNode = _fnFeatureHtmlTable( oSettings );
			}
			else if ( cOption ==  'i' && features.bInfo )
			{
				/* Info */
				featureNode = _fnFeatureHtmlInfo( oSettings );
			}
			else if ( cOption == 'p' && features.bPaginate )
			{
				/* Pagination */
				featureNode = _fnFeatureHtmlPaginate( oSettings );
			}
			else if ( DataTable.ext.feature.length !== 0 )
			{
				/* Plug-in features */
				var aoFeatures = DataTable.ext.feature;
				for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )
				{
					if ( cOption == aoFeatures[k].cFeature )
					{
						featureNode = aoFeatures[k].fnInit( oSettings );
						break;
					}
				}
			}
	
			/* Add to the 2D features array */
			if ( featureNode )
			{
				var aanFeatures = oSettings.aanFeatures;
	
				if ( ! aanFeatures[cOption] )
				{
					aanFeatures[cOption] = [];
				}
	
				aanFeatures[cOption].push( featureNode );
				insert.append( featureNode );
			}
		}
	
		/* Built our DOM structure - replace the holding div with what we want */
		holding.replaceWith( insert );
		oSettings.nHolding = null;
	}
	
	
	/**
	 * Use the DOM source to create up an array of header cells. The idea here is to
	 * create a layout grid (array) of rows x columns, which contains a reference
	 * to the cell that that point in the grid (regardless of col/rowspan), such that
	 * any column / row could be removed and the new grid constructed
	 *  @param array {object} aLayout Array to store the calculated layout in
	 *  @param {node} nThead The header/footer element for the table
	 *  @memberof DataTable#oApi
	 */
	function _fnDetectHeader ( aLayout, nThead )
	{
		var nTrs = $(nThead).children('tr');
		var nTr, nCell;
		var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;
		var bUnique;
		var fnShiftCol = function ( a, i, j ) {
			var k = a[i];
	                while ( k[j] ) {
				j++;
			}
			return j;
		};
	
		aLayout.splice( 0, aLayout.length );
	
		/* We know how many rows there are in the layout - so prep it */
		for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
		{
			aLayout.push( [] );
		}
	
		/* Calculate a layout array */
		for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
		{
			nTr = nTrs[i];
			iColumn = 0;
	
			/* For every cell in the row... */
			nCell = nTr.firstChild;
			while ( nCell ) {
				if ( nCell.nodeName.toUpperCase() == "TD" ||
				     nCell.nodeName.toUpperCase() == "TH" )
				{
					/* Get the col and rowspan attributes from the DOM and sanitise them */
					iColspan = nCell.getAttribute('colspan') * 1;
					iRowspan = nCell.getAttribute('rowspan') * 1;
					iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;
					iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;
	
					/* There might be colspan cells already in this row, so shift our target
					 * accordingly
					 */
					iColShifted = fnShiftCol( aLayout, i, iColumn );
	
					/* Cache calculation for unique columns */
					bUnique = iColspan === 1 ? true : false;
	
					/* If there is col / rowspan, copy the information into the layout grid */
					for ( l=0 ; l<iColspan ; l++ )
					{
						for ( k=0 ; k<iRowspan ; k++ )
						{
							aLayout[i+k][iColShifted+l] = {
								"cell": nCell,
								"unique": bUnique
							};
							aLayout[i+k].nTr = nTr;
						}
					}
				}
				nCell = nCell.nextSibling;
			}
		}
	}
	
	
	/**
	 * Get an array of unique th elements, one for each column
	 *  @param {object} oSettings dataTables settings object
	 *  @param {node} nHeader automatically detect the layout from this node - optional
	 *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional
	 *  @returns array {node} aReturn list of unique th's
	 *  @memberof DataTable#oApi
	 */
	function _fnGetUniqueThs ( oSettings, nHeader, aLayout )
	{
		var aReturn = [];
		if ( !aLayout )
		{
			aLayout = oSettings.aoHeader;
			if ( nHeader )
			{
				aLayout = [];
				_fnDetectHeader( aLayout, nHeader );
			}
		}
	
		for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )
		{
			for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )
			{
				if ( aLayout[i][j].unique &&
					 (!aReturn[j] || !oSettings.bSortCellsTop) )
				{
					aReturn[j] = aLayout[i][j].cell;
				}
			}
		}
	
		return aReturn;
	}
	
	/**
	 * Create an Ajax call based on the table's settings, taking into account that
	 * parameters can have multiple forms, and backwards compatibility.
	 *
	 * @param {object} oSettings dataTables settings object
	 * @param {array} data Data to send to the server, required by
	 *     DataTables - may be augmented by developer callbacks
	 * @param {function} fn Callback function to run when data is obtained
	 */
	function _fnBuildAjax( oSettings, data, fn )
	{
		// Compatibility with 1.9-, allow fnServerData and event to manipulate
		_fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );
	
		// Convert to object based for 1.10+ if using the old array scheme which can
		// come from server-side processing or serverParams
		if ( data && $.isArray(data) ) {
			var tmp = {};
			var rbracket = /(.*?)\[\]$/;
	
			$.each( data, function (key, val) {
				var match = val.name.match(rbracket);
	
				if ( match ) {
					// Support for arrays
					var name = match[0];
	
					if ( ! tmp[ name ] ) {
						tmp[ name ] = [];
					}
					tmp[ name ].push( val.value );
				}
				else {
					tmp[val.name] = val.value;
				}
			} );
			data = tmp;
		}
	
		var ajaxData;
		var ajax = oSettings.ajax;
		var instance = oSettings.oInstance;
		var callback = function ( json ) {
			_fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );
			fn( json );
		};
	
		if ( $.isPlainObject( ajax ) && ajax.data )
		{
			ajaxData = ajax.data;
	
			var newData = typeof ajaxData === 'function' ?
				ajaxData( data, oSettings ) :  // fn can manipulate data or return
				ajaxData;                      // an object object or array to merge
	
			// If the function returned something, use that alone
			data = typeof ajaxData === 'function' && newData ?
				newData :
				$.extend( true, data, newData );
	
			// Remove the data property as we've resolved it already and don't want
			// jQuery to do it again (it is restored at the end of the function)
			delete ajax.data;
		}
	
		var baseAjax = {
			"data": data,
			"success": function (json) {
				var error = json.error || json.sError;
				if ( error ) {
					_fnLog( oSettings, 0, error );
				}
	
				oSettings.json = json;
				callback( json );
			},
			"dataType": "json",
			"cache": false,
			"type": oSettings.sServerMethod,
			"error": function (xhr, error, thrown) {
				var ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );
	
				if ( $.inArray( true, ret ) === -1 ) {
					if ( error == "parsererror" ) {
						_fnLog( oSettings, 0, 'Invalid JSON response', 1 );
					}
					else if ( xhr.readyState === 4 ) {
						_fnLog( oSettings, 0, 'Ajax error', 7 );
					}
				}
	
				_fnProcessingDisplay( oSettings, false );
			}
		};
	
		// Store the data submitted for the API
		oSettings.oAjaxData = data;
	
		// Allow plug-ins and external processes to modify the data
		_fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );
	
		if ( oSettings.fnServerData )
		{
			// DataTables 1.9- compatibility
			oSettings.fnServerData.call( instance,
				oSettings.sAjaxSource,
				$.map( data, function (val, key) { // Need to convert back to 1.9 trad format
					return { name: key, value: val };
				} ),
				callback,
				oSettings
			);
		}
		else if ( oSettings.sAjaxSource || typeof ajax === 'string' )
		{
			// DataTables 1.9- compatibility
			oSettings.jqXHR = $.ajax( $.extend( baseAjax, {
				url: ajax || oSettings.sAjaxSource
			} ) );
		}
		else if ( typeof ajax === 'function' )
		{
			// Is a function - let the caller define what needs to be done
			oSettings.jqXHR = ajax.call( instance, data, callback, oSettings );
		}
		else
		{
			// Object to extend the base settings
			oSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );
	
			// Restore for next time around
			ajax.data = ajaxData;
		}
	}
	
	
	/**
	 * Update the table using an Ajax call
	 *  @param {object} settings dataTables settings object
	 *  @returns {boolean} Block the table drawing or not
	 *  @memberof DataTable#oApi
	 */
	function _fnAjaxUpdate( settings )
	{
		if ( settings.bAjaxDataGet ) {
			settings.iDraw++;
			_fnProcessingDisplay( settings, true );
	
			_fnBuildAjax(
				settings,
				_fnAjaxParameters( settings ),
				function(json) {
					_fnAjaxUpdateDraw( settings, json );
				}
			);
	
			return false;
		}
		return true;
	}
	
	
	/**
	 * Build up the parameters in an object needed for a server-side processing
	 * request. Note that this is basically done twice, is different ways - a modern
	 * method which is used by default in DataTables 1.10 which uses objects and
	 * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if
	 * the sAjaxSource option is used in the initialisation, or the legacyAjax
	 * option is set.
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {bool} block the table drawing or not
	 *  @memberof DataTable#oApi
	 */
	function _fnAjaxParameters( settings )
	{
		var
			columns = settings.aoColumns,
			columnCount = columns.length,
			features = settings.oFeatures,
			preSearch = settings.oPreviousSearch,
			preColSearch = settings.aoPreSearchCols,
			i, data = [], dataProp, column, columnSearch,
			sort = _fnSortFlatten( settings ),
			displayStart = settings._iDisplayStart,
			displayLength = features.bPaginate !== false ?
				settings._iDisplayLength :
				-1;
	
		var param = function ( name, value ) {
			data.push( { 'name': name, 'value': value } );
		};
	
		// DataTables 1.9- compatible method
		param( 'sEcho',          settings.iDraw );
		param( 'iColumns',       columnCount );
		param( 'sColumns',       _pluck( columns, 'sName' ).join(',') );
		param( 'iDisplayStart',  displayStart );
		param( 'iDisplayLength', displayLength );
	
		// DataTables 1.10+ method
		var d = {
			draw:    settings.iDraw,
			columns: [],
			order:   [],
			start:   displayStart,
			length:  displayLength,
			search:  {
				value: preSearch.sSearch,
				regex: preSearch.bRegex
			}
		};
	
		for ( i=0 ; i<columnCount ; i++ ) {
			column = columns[i];
			columnSearch = preColSearch[i];
			dataProp = typeof column.mData=="function" ? 'function' : column.mData ;
	
			d.columns.push( {
				data:       dataProp,
				name:       column.sName,
				searchable: column.bSearchable,
				orderable:  column.bSortable,
				search:     {
					value: columnSearch.sSearch,
					regex: columnSearch.bRegex
				}
			} );
	
			param( "mDataProp_"+i, dataProp );
	
			if ( features.bFilter ) {
				param( 'sSearch_'+i,     columnSearch.sSearch );
				param( 'bRegex_'+i,      columnSearch.bRegex );
				param( 'bSearchable_'+i, column.bSearchable );
			}
	
			if ( features.bSort ) {
				param( 'bSortable_'+i, column.bSortable );
			}
		}
	
		if ( features.bFilter ) {
			param( 'sSearch', preSearch.sSearch );
			param( 'bRegex', preSearch.bRegex );
		}
	
		if ( features.bSort ) {
			$.each( sort, function ( i, val ) {
				d.order.push( { column: val.col, dir: val.dir } );
	
				param( 'iSortCol_'+i, val.col );
				param( 'sSortDir_'+i, val.dir );
			} );
	
			param( 'iSortingCols', sort.length );
		}
	
		// If the legacy.ajax parameter is null, then we automatically decide which
		// form to use, based on sAjaxSource
		var legacy = DataTable.ext.legacy.ajax;
		if ( legacy === null ) {
			return settings.sAjaxSource ? data : d;
		}
	
		// Otherwise, if legacy has been specified then we use that to decide on the
		// form
		return legacy ? data : d;
	}
	
	
	/**
	 * Data the data from the server (nuking the old) and redraw the table
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} json json data return from the server.
	 *  @param {string} json.sEcho Tracking flag for DataTables to match requests
	 *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering
	 *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering
	 *  @param {array} json.aaData The data to display on this page
	 *  @param {string} [json.sColumns] Column ordering (sName, comma separated)
	 *  @memberof DataTable#oApi
	 */
	function _fnAjaxUpdateDraw ( settings, json )
	{
		// v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.
		// Support both
		var compat = function ( old, modern ) {
			return json[old] !== undefined ? json[old] : json[modern];
		};
	
		var data = _fnAjaxDataSrc( settings, json );
		var draw            = compat( 'sEcho',                'draw' );
		var recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );
		var recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );
	
		if ( draw ) {
			// Protect against out of sequence returns
			if ( draw*1 < settings.iDraw ) {
				return;
			}
			settings.iDraw = draw * 1;
		}
	
		_fnClearTable( settings );
		settings._iRecordsTotal   = parseInt(recordsTotal, 10);
		settings._iRecordsDisplay = parseInt(recordsFiltered, 10);
	
		for ( var i=0, ien=data.length ; i<ien ; i++ ) {
			_fnAddData( settings, data[i] );
		}
		settings.aiDisplay = settings.aiDisplayMaster.slice();
	
		settings.bAjaxDataGet = false;
		_fnDraw( settings );
	
		if ( ! settings._bInitComplete ) {
			_fnInitComplete( settings, json );
		}
	
		settings.bAjaxDataGet = true;
		_fnProcessingDisplay( settings, false );
	}
	
	
	/**
	 * Get the data from the JSON data source to use for drawing a table. Using
	 * `_fnGetObjectDataFn` allows the data to be sourced from a property of the
	 * source object, or from a processing function.
	 *  @param {object} oSettings dataTables settings object
	 *  @param  {object} json Data source object / array from the server
	 *  @return {array} Array of data to use
	 */
	function _fnAjaxDataSrc ( oSettings, json )
	{
		var dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?
			oSettings.ajax.dataSrc :
			oSettings.sAjaxDataProp; // Compatibility with 1.9-.
	
		// Compatibility with 1.9-. In order to read from aaData, check if the
		// default has been changed, if not, check for aaData
		if ( dataSrc === 'data' ) {
			return json.aaData || json[dataSrc];
		}
	
		return dataSrc !== "" ?
			_fnGetObjectDataFn( dataSrc )( json ) :
			json;
	}
	
	/**
	 * Generate the node required for filtering text
	 *  @returns {node} Filter control element
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlFilter ( settings )
	{
		var classes = settings.oClasses;
		var tableId = settings.sTableId;
		var language = settings.oLanguage;
		var previousSearch = settings.oPreviousSearch;
		var features = settings.aanFeatures;
		var input = '<input type="search" class="'+classes.sFilterInput+'"/>';
	
		var str = language.sSearch;
		str = str.match(/_INPUT_/) ?
			str.replace('_INPUT_', input) :
			str+input;
	
		var filter = $('<div/>', {
				'id': ! features.f ? tableId+'_filter' : null,
				'class': classes.sFilter
			} )
			.append( $('<label/>' ).append( str ) );
	
		var searchFn = function() {
			/* Update all other filter input elements for the new display */
			var n = features.f;
			var val = !this.value ? "" : this.value; // mental IE8 fix :-(
	
			/* Now do the filter */
			if ( val != previousSearch.sSearch ) {
				_fnFilterComplete( settings, {
					"sSearch": val,
					"bRegex": previousSearch.bRegex,
					"bSmart": previousSearch.bSmart ,
					"bCaseInsensitive": previousSearch.bCaseInsensitive
				} );
	
				// Need to redraw, without resorting
				settings._iDisplayStart = 0;
				_fnDraw( settings );
			}
		};
	
		var searchDelay = settings.searchDelay !== null ?
			settings.searchDelay :
			_fnDataSource( settings ) === 'ssp' ?
				400 :
				0;
	
		var jqFilter = $('input', filter)
			.val( previousSearch.sSearch )
			.attr( 'placeholder', language.sSearchPlaceholder )
			.on(
				'keyup.DT search.DT input.DT paste.DT cut.DT',
				searchDelay ?
					_fnThrottle( searchFn, searchDelay ) :
					searchFn
			)
			.on( 'keypress.DT', function(e) {
				/* Prevent form submission */
				if ( e.keyCode == 13 ) {
					return false;
				}
			} )
			.attr('aria-controls', tableId);
	
		// Update the input elements whenever the table is filtered
		$(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {
			if ( settings === s ) {
				// IE9 throws an 'unknown error' if document.activeElement is used
				// inside an iframe or frame...
				try {
					if ( jqFilter[0] !== document.activeElement ) {
						jqFilter.val( previousSearch.sSearch );
					}
				}
				catch ( e ) {}
			}
		} );
	
		return filter[0];
	}
	
	
	/**
	 * Filter the table using both the global filter and column based filtering
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} oSearch search information
	 *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)
	 *  @memberof DataTable#oApi
	 */
	function _fnFilterComplete ( oSettings, oInput, iForce )
	{
		var oPrevSearch = oSettings.oPreviousSearch;
		var aoPrevSearch = oSettings.aoPreSearchCols;
		var fnSaveFilter = function ( oFilter ) {
			/* Save the filtering values */
			oPrevSearch.sSearch = oFilter.sSearch;
			oPrevSearch.bRegex = oFilter.bRegex;
			oPrevSearch.bSmart = oFilter.bSmart;
			oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
		};
		var fnRegex = function ( o ) {
			// Backwards compatibility with the bEscapeRegex option
			return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;
		};
	
		// Resolve any column types that are unknown due to addition or invalidation
		// @todo As per sort - can this be moved into an event handler?
		_fnColumnTypes( oSettings );
	
		/* In server-side processing all filtering is done by the server, so no point hanging around here */
		if ( _fnDataSource( oSettings ) != 'ssp' )
		{
			/* Global filter */
			_fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );
			fnSaveFilter( oInput );
	
			/* Now do the individual column filter */
			for ( var i=0 ; i<aoPrevSearch.length ; i++ )
			{
				_fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),
					aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );
			}
	
			/* Custom filtering */
			_fnFilterCustom( oSettings );
		}
		else
		{
			fnSaveFilter( oInput );
		}
	
		/* Tell the draw function we have been filtering */
		oSettings.bFiltered = true;
		_fnCallbackFire( oSettings, null, 'search', [oSettings] );
	}
	
	
	/**
	 * Apply custom filtering functions
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnFilterCustom( settings )
	{
		var filters = DataTable.ext.search;
		var displayRows = settings.aiDisplay;
		var row, rowIdx;
	
		for ( var i=0, ien=filters.length ; i<ien ; i++ ) {
			var rows = [];
	
			// Loop over each row and see if it should be included
			for ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {
				rowIdx = displayRows[ j ];
				row = settings.aoData[ rowIdx ];
	
				if ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {
					rows.push( rowIdx );
				}
			}
	
			// So the array reference doesn't break set the results into the
			// existing array
			displayRows.length = 0;
			$.merge( displayRows, rows );
		}
	}
	
	
	/**
	 * Filter the table on a per-column basis
	 *  @param {object} oSettings dataTables settings object
	 *  @param {string} sInput string to filter on
	 *  @param {int} iColumn column to filter
	 *  @param {bool} bRegex treat search string as a regular expression or not
	 *  @param {bool} bSmart use smart filtering or not
	 *  @param {bool} bCaseInsensitive Do case insenstive matching or not
	 *  @memberof DataTable#oApi
	 */
	function _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )
	{
		if ( searchStr === '' ) {
			return;
		}
	
		var data;
		var out = [];
		var display = settings.aiDisplay;
		var rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );
	
		for ( var i=0 ; i<display.length ; i++ ) {
			data = settings.aoData[ display[i] ]._aFilterData[ colIdx ];
	
			if ( rpSearch.test( data ) ) {
				out.push( display[i] );
			}
		}
	
		settings.aiDisplay = out;
	}
	
	
	/**
	 * Filter the data table based on user input and draw the table
	 *  @param {object} settings dataTables settings object
	 *  @param {string} input string to filter on
	 *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)
	 *  @param {bool} regex treat as a regular expression or not
	 *  @param {bool} smart perform smart filtering or not
	 *  @param {bool} caseInsensitive Do case insenstive matching or not
	 *  @memberof DataTable#oApi
	 */
	function _fnFilter( settings, input, force, regex, smart, caseInsensitive )
	{
		var rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );
		var prevSearch = settings.oPreviousSearch.sSearch;
		var displayMaster = settings.aiDisplayMaster;
		var display, invalidated, i;
		var filtered = [];
	
		// Need to take account of custom filtering functions - always filter
		if ( DataTable.ext.search.length !== 0 ) {
			force = true;
		}
	
		// Check if any of the rows were invalidated
		invalidated = _fnFilterData( settings );
	
		// If the input is blank - we just want the full data set
		if ( input.length <= 0 ) {
			settings.aiDisplay = displayMaster.slice();
		}
		else {
			// New search - start from the master array
			if ( invalidated ||
				 force ||
				 prevSearch.length > input.length ||
				 input.indexOf(prevSearch) !== 0 ||
				 settings.bSorted // On resort, the display master needs to be
				                  // re-filtered since indexes will have changed
			) {
				settings.aiDisplay = displayMaster.slice();
			}
	
			// Search the display array
			display = settings.aiDisplay;
	
			for ( i=0 ; i<display.length ; i++ ) {
				if ( rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {
					filtered.push( display[i] );
				}
			}
	
			settings.aiDisplay = filtered;
		}
	}
	
	
	/**
	 * Build a regular expression object suitable for searching a table
	 *  @param {string} sSearch string to search for
	 *  @param {bool} bRegex treat as a regular expression or not
	 *  @param {bool} bSmart perform smart filtering or not
	 *  @param {bool} bCaseInsensitive Do case insensitive matching or not
	 *  @returns {RegExp} constructed object
	 *  @memberof DataTable#oApi
	 */
	function _fnFilterCreateSearch( search, regex, smart, caseInsensitive )
	{
		search = regex ?
			search :
			_fnEscapeRegex( search );
		
		if ( smart ) {
			/* For smart filtering we want to allow the search to work regardless of
			 * word order. We also want double quoted text to be preserved, so word
			 * order is important - a la google. So this is what we want to
			 * generate:
			 * 
			 * ^(?=.*?\bone\b)(?=.*?\btwo three\b)(?=.*?\bfour\b).*$
			 */
			var a = $.map( search.match( /"[^"]+"|[^ ]+/g ) || [''], function ( word ) {
				if ( word.charAt(0) === '"' ) {
					var m = word.match( /^"(.*)"$/ );
					word = m ? m[1] : word;
				}
	
				return word.replace('"', '');
			} );
	
			search = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';
		}
	
		return new RegExp( search, caseInsensitive ? 'i' : '' );
	}
	
	
	/**
	 * Escape a string such that it can be used in a regular expression
	 *  @param {string} sVal string to escape
	 *  @returns {string} escaped string
	 *  @memberof DataTable#oApi
	 */
	var _fnEscapeRegex = DataTable.util.escapeRegex;
	
	var __filter_div = $('<div>')[0];
	var __filter_div_textContent = __filter_div.textContent !== undefined;
	
	// Update the filtering data for each row if needed (by invalidation or first run)
	function _fnFilterData ( settings )
	{
		var columns = settings.aoColumns;
		var column;
		var i, j, ien, jen, filterData, cellData, row;
		var fomatters = DataTable.ext.type.search;
		var wasInvalidated = false;
	
		for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
			row = settings.aoData[i];
	
			if ( ! row._aFilterData ) {
				filterData = [];
	
				for ( j=0, jen=columns.length ; j<jen ; j++ ) {
					column = columns[j];
	
					if ( column.bSearchable ) {
						cellData = _fnGetCellData( settings, i, j, 'filter' );
	
						if ( fomatters[ column.sType ] ) {
							cellData = fomatters[ column.sType ]( cellData );
						}
	
						// Search in DataTables 1.10 is string based. In 1.11 this
						// should be altered to also allow strict type checking.
						if ( cellData === null ) {
							cellData = '';
						}
	
						if ( typeof cellData !== 'string' && cellData.toString ) {
							cellData = cellData.toString();
						}
					}
					else {
						cellData = '';
					}
	
					// If it looks like there is an HTML entity in the string,
					// attempt to decode it so sorting works as expected. Note that
					// we could use a single line of jQuery to do this, but the DOM
					// method used here is much faster http://jsperf.com/html-decode
					if ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {
						__filter_div.innerHTML = cellData;
						cellData = __filter_div_textContent ?
							__filter_div.textContent :
							__filter_div.innerText;
					}
	
					if ( cellData.replace ) {
						cellData = cellData.replace(/[\r\n]/g, '');
					}
	
					filterData.push( cellData );
				}
	
				row._aFilterData = filterData;
				row._sFilterRow = filterData.join('  ');
				wasInvalidated = true;
			}
		}
	
		return wasInvalidated;
	}
	
	
	/**
	 * Convert from the internal Hungarian notation to camelCase for external
	 * interaction
	 *  @param {object} obj Object to convert
	 *  @returns {object} Inverted object
	 *  @memberof DataTable#oApi
	 */
	function _fnSearchToCamel ( obj )
	{
		return {
			search:          obj.sSearch,
			smart:           obj.bSmart,
			regex:           obj.bRegex,
			caseInsensitive: obj.bCaseInsensitive
		};
	}
	
	
	
	/**
	 * Convert from camelCase notation to the internal Hungarian. We could use the
	 * Hungarian convert function here, but this is cleaner
	 *  @param {object} obj Object to convert
	 *  @returns {object} Inverted object
	 *  @memberof DataTable#oApi
	 */
	function _fnSearchToHung ( obj )
	{
		return {
			sSearch:          obj.search,
			bSmart:           obj.smart,
			bRegex:           obj.regex,
			bCaseInsensitive: obj.caseInsensitive
		};
	}
	
	/**
	 * Generate the node required for the info display
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {node} Information element
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlInfo ( settings )
	{
		var
			tid = settings.sTableId,
			nodes = settings.aanFeatures.i,
			n = $('<div/>', {
				'class': settings.oClasses.sInfo,
				'id': ! nodes ? tid+'_info' : null
			} );
	
		if ( ! nodes ) {
			// Update display on each draw
			settings.aoDrawCallback.push( {
				"fn": _fnUpdateInfo,
				"sName": "information"
			} );
	
			n
				.attr( 'role', 'status' )
				.attr( 'aria-live', 'polite' );
	
			// Table is described by our info div
			$(settings.nTable).attr( 'aria-describedby', tid+'_info' );
		}
	
		return n[0];
	}
	
	
	/**
	 * Update the information elements in the display
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnUpdateInfo ( settings )
	{
		/* Show information about the table */
		var nodes = settings.aanFeatures.i;
		if ( nodes.length === 0 ) {
			return;
		}
	
		var
			lang  = settings.oLanguage,
			start = settings._iDisplayStart+1,
			end   = settings.fnDisplayEnd(),
			max   = settings.fnRecordsTotal(),
			total = settings.fnRecordsDisplay(),
			out   = total ?
				lang.sInfo :
				lang.sInfoEmpty;
	
		if ( total !== max ) {
			/* Record set after filtering */
			out += ' ' + lang.sInfoFiltered;
		}
	
		// Convert the macros
		out += lang.sInfoPostFix;
		out = _fnInfoMacros( settings, out );
	
		var callback = lang.fnInfoCallback;
		if ( callback !== null ) {
			out = callback.call( settings.oInstance,
				settings, start, end, max, total, out
			);
		}
	
		$(nodes).html( out );
	}
	
	
	function _fnInfoMacros ( settings, str )
	{
		// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only
		// internally
		var
			formatter  = settings.fnFormatNumber,
			start      = settings._iDisplayStart+1,
			len        = settings._iDisplayLength,
			vis        = settings.fnRecordsDisplay(),
			all        = len === -1;
	
		return str.
			replace(/_START_/g, formatter.call( settings, start ) ).
			replace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).
			replace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).
			replace(/_TOTAL_/g, formatter.call( settings, vis ) ).
			replace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).
			replace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );
	}
	
	
	
	/**
	 * Draw the table for the first time, adding all required features
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnInitialise ( settings )
	{
		var i, iLen, iAjaxStart=settings.iInitDisplayStart;
		var columns = settings.aoColumns, column;
		var features = settings.oFeatures;
		var deferLoading = settings.bDeferLoading; // value modified by the draw
	
		/* Ensure that the table data is fully initialised */
		if ( ! settings.bInitialised ) {
			setTimeout( function(){ _fnInitialise( settings ); }, 200 );
			return;
		}
	
		/* Show the display HTML options */
		_fnAddOptionsHtml( settings );
	
		/* Build and draw the header / footer for the table */
		_fnBuildHead( settings );
		_fnDrawHead( settings, settings.aoHeader );
		_fnDrawHead( settings, settings.aoFooter );
	
		/* Okay to show that something is going on now */
		_fnProcessingDisplay( settings, true );
	
		/* Calculate sizes for columns */
		if ( features.bAutoWidth ) {
			_fnCalculateColumnWidths( settings );
		}
	
		for ( i=0, iLen=columns.length ; i<iLen ; i++ ) {
			column = columns[i];
	
			if ( column.sWidth ) {
				column.nTh.style.width = _fnStringToCss( column.sWidth );
			}
		}
	
		_fnCallbackFire( settings, null, 'preInit', [settings] );
	
		// If there is default sorting required - let's do it. The sort function
		// will do the drawing for us. Otherwise we draw the table regardless of the
		// Ajax source - this allows the table to look initialised for Ajax sourcing
		// data (show 'loading' message possibly)
		_fnReDraw( settings );
	
		// Server-side processing init complete is done by _fnAjaxUpdateDraw
		var dataSrc = _fnDataSource( settings );
		if ( dataSrc != 'ssp' || deferLoading ) {
			// if there is an ajax source load the data
			if ( dataSrc == 'ajax' ) {
				_fnBuildAjax( settings, [], function(json) {
					var aData = _fnAjaxDataSrc( settings, json );
	
					// Got the data - add it to the table
					for ( i=0 ; i<aData.length ; i++ ) {
						_fnAddData( settings, aData[i] );
					}
	
					// Reset the init display for cookie saving. We've already done
					// a filter, and therefore cleared it before. So we need to make
					// it appear 'fresh'
					settings.iInitDisplayStart = iAjaxStart;
	
					_fnReDraw( settings );
	
					_fnProcessingDisplay( settings, false );
					_fnInitComplete( settings, json );
				}, settings );
			}
			else {
				_fnProcessingDisplay( settings, false );
				_fnInitComplete( settings );
			}
		}
	}
	
	
	/**
	 * Draw the table for the first time, adding all required features
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} [json] JSON from the server that completed the table, if using Ajax source
	 *    with client-side processing (optional)
	 *  @memberof DataTable#oApi
	 */
	function _fnInitComplete ( settings, json )
	{
		settings._bInitComplete = true;
	
		// When data was added after the initialisation (data or Ajax) we need to
		// calculate the column sizing
		if ( json || settings.oInit.aaData ) {
			_fnAdjustColumnSizing( settings );
		}
	
		_fnCallbackFire( settings, null, 'plugin-init', [settings, json] );
		_fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );
	}
	
	
	function _fnLengthChange ( settings, val )
	{
		var len = parseInt( val, 10 );
		settings._iDisplayLength = len;
	
		_fnLengthOverflow( settings );
	
		// Fire length change event
		_fnCallbackFire( settings, null, 'length', [settings, len] );
	}
	
	
	/**
	 * Generate the node required for user display length changing
	 *  @param {object} settings dataTables settings object
	 *  @returns {node} Display length feature node
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlLength ( settings )
	{
		var
			classes  = settings.oClasses,
			tableId  = settings.sTableId,
			menu     = settings.aLengthMenu,
			d2       = $.isArray( menu[0] ),
			lengths  = d2 ? menu[0] : menu,
			language = d2 ? menu[1] : menu;
	
		var select = $('<select/>', {
			'name':          tableId+'_length',
			'aria-controls': tableId,
			'class':         classes.sLengthSelect
		} );
	
		for ( var i=0, ien=lengths.length ; i<ien ; i++ ) {
			select[0][ i ] = new Option(
				typeof language[i] === 'number' ?
					settings.fnFormatNumber( language[i] ) :
					language[i],
				lengths[i]
			);
		}
	
		var div = $('<div><label/></div>').addClass( classes.sLength );
		if ( ! settings.aanFeatures.l ) {
			div[0].id = tableId+'_length';
		}
	
		div.children().append(
			settings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )
		);
	
		// Can't use `select` variable as user might provide their own and the
		// reference is broken by the use of outerHTML
		$('select', div)
			.val( settings._iDisplayLength )
			.on( 'change.DT', function(e) {
				_fnLengthChange( settings, $(this).val() );
				_fnDraw( settings );
			} );
	
		// Update node value whenever anything changes the table's length
		$(settings.nTable).on( 'length.dt.DT', function (e, s, len) {
			if ( settings === s ) {
				$('select', div).val( len );
			}
		} );
	
		return div[0];
	}
	
	
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Note that most of the paging logic is done in
	 * DataTable.ext.pager
	 */
	
	/**
	 * Generate the node required for default pagination
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {node} Pagination feature node
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlPaginate ( settings )
	{
		var
			type   = settings.sPaginationType,
			plugin = DataTable.ext.pager[ type ],
			modern = typeof plugin === 'function',
			redraw = function( settings ) {
				_fnDraw( settings );
			},
			node = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],
			features = settings.aanFeatures;
	
		if ( ! modern ) {
			plugin.fnInit( settings, node, redraw );
		}
	
		/* Add a draw callback for the pagination on first instance, to update the paging display */
		if ( ! features.p )
		{
			node.id = settings.sTableId+'_paginate';
	
			settings.aoDrawCallback.push( {
				"fn": function( settings ) {
					if ( modern ) {
						var
							start      = settings._iDisplayStart,
							len        = settings._iDisplayLength,
							visRecords = settings.fnRecordsDisplay(),
							all        = len === -1,
							page = all ? 0 : Math.ceil( start / len ),
							pages = all ? 1 : Math.ceil( visRecords / len ),
							buttons = plugin(page, pages),
							i, ien;
	
						for ( i=0, ien=features.p.length ; i<ien ; i++ ) {
							_fnRenderer( settings, 'pageButton' )(
								settings, features.p[i], i, buttons, page, pages
							);
						}
					}
					else {
						plugin.fnUpdate( settings, redraw );
					}
				},
				"sName": "pagination"
			} );
		}
	
		return node;
	}
	
	
	/**
	 * Alter the display settings to change the page
	 *  @param {object} settings DataTables settings object
	 *  @param {string|int} action Paging action to take: "first", "previous",
	 *    "next" or "last" or page number to jump to (integer)
	 *  @param [bool] redraw Automatically draw the update or not
	 *  @returns {bool} true page has changed, false - no change
	 *  @memberof DataTable#oApi
	 */
	function _fnPageChange ( settings, action, redraw )
	{
		var
			start     = settings._iDisplayStart,
			len       = settings._iDisplayLength,
			records   = settings.fnRecordsDisplay();
	
		if ( records === 0 || len === -1 )
		{
			start = 0;
		}
		else if ( typeof action === "number" )
		{
			start = action * len;
	
			if ( start > records )
			{
				start = 0;
			}
		}
		else if ( action == "first" )
		{
			start = 0;
		}
		else if ( action == "previous" )
		{
			start = len >= 0 ?
				start - len :
				0;
	
			if ( start < 0 )
			{
			  start = 0;
			}
		}
		else if ( action == "next" )
		{
			if ( start + len < records )
			{
				start += len;
			}
		}
		else if ( action == "last" )
		{
			start = Math.floor( (records-1) / len) * len;
		}
		else
		{
			_fnLog( settings, 0, "Unknown paging action: "+action, 5 );
		}
	
		var changed = settings._iDisplayStart !== start;
		settings._iDisplayStart = start;
	
		if ( changed ) {
			_fnCallbackFire( settings, null, 'page', [settings] );
	
			if ( redraw ) {
				_fnDraw( settings );
			}
		}
	
		return changed;
	}
	
	
	
	/**
	 * Generate the node required for the processing node
	 *  @param {object} settings dataTables settings object
	 *  @returns {node} Processing element
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlProcessing ( settings )
	{
		return $('<div/>', {
				'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,
				'class': settings.oClasses.sProcessing
			} )
			.html( settings.oLanguage.sProcessing )
			.insertBefore( settings.nTable )[0];
	}
	
	
	/**
	 * Display or hide the processing indicator
	 *  @param {object} settings dataTables settings object
	 *  @param {bool} show Show the processing indicator (true) or not (false)
	 *  @memberof DataTable#oApi
	 */
	function _fnProcessingDisplay ( settings, show )
	{
		if ( settings.oFeatures.bProcessing ) {
			$(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );
		}
	
		_fnCallbackFire( settings, null, 'processing', [settings, show] );
	}
	
	/**
	 * Add any control elements for the table - specifically scrolling
	 *  @param {object} settings dataTables settings object
	 *  @returns {node} Node to add to the DOM
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlTable ( settings )
	{
		var table = $(settings.nTable);
	
		// Add the ARIA grid role to the table
		table.attr( 'role', 'grid' );
	
		// Scrolling from here on in
		var scroll = settings.oScroll;
	
		if ( scroll.sX === '' && scroll.sY === '' ) {
			return settings.nTable;
		}
	
		var scrollX = scroll.sX;
		var scrollY = scroll.sY;
		var classes = settings.oClasses;
		var caption = table.children('caption');
		var captionSide = caption.length ? caption[0]._captionSide : null;
		var headerClone = $( table[0].cloneNode(false) );
		var footerClone = $( table[0].cloneNode(false) );
		var footer = table.children('tfoot');
		var _div = '<div/>';
		var size = function ( s ) {
			return !s ? null : _fnStringToCss( s );
		};
	
		if ( ! footer.length ) {
			footer = null;
		}
	
		/*
		 * The HTML structure that we want to generate in this function is:
		 *  div - scroller
		 *    div - scroll head
		 *      div - scroll head inner
		 *        table - scroll head table
		 *          thead - thead
		 *    div - scroll body
		 *      table - table (master table)
		 *        thead - thead clone for sizing
		 *        tbody - tbody
		 *    div - scroll foot
		 *      div - scroll foot inner
		 *        table - scroll foot table
		 *          tfoot - tfoot
		 */
		var scroller = $( _div, { 'class': classes.sScrollWrapper } )
			.append(
				$(_div, { 'class': classes.sScrollHead } )
					.css( {
						overflow: 'hidden',
						position: 'relative',
						border: 0,
						width: scrollX ? size(scrollX) : '100%'
					} )
					.append(
						$(_div, { 'class': classes.sScrollHeadInner } )
							.css( {
								'box-sizing': 'content-box',
								width: scroll.sXInner || '100%'
							} )
							.append(
								headerClone
									.removeAttr('id')
									.css( 'margin-left', 0 )
									.append( captionSide === 'top' ? caption : null )
									.append(
										table.children('thead')
									)
							)
					)
			)
			.append(
				$(_div, { 'class': classes.sScrollBody } )
					.css( {
						position: 'relative',
						overflow: 'auto',
						width: size( scrollX )
					} )
					.append( table )
			);
	
		if ( footer ) {
			scroller.append(
				$(_div, { 'class': classes.sScrollFoot } )
					.css( {
						overflow: 'hidden',
						border: 0,
						width: scrollX ? size(scrollX) : '100%'
					} )
					.append(
						$(_div, { 'class': classes.sScrollFootInner } )
							.append(
								footerClone
									.removeAttr('id')
									.css( 'margin-left', 0 )
									.append( captionSide === 'bottom' ? caption : null )
									.append(
										table.children('tfoot')
									)
							)
					)
			);
		}
	
		var children = scroller.children();
		var scrollHead = children[0];
		var scrollBody = children[1];
		var scrollFoot = footer ? children[2] : null;
	
		// When the body is scrolled, then we also want to scroll the headers
		if ( scrollX ) {
			$(scrollBody).on( 'scroll.DT', function (e) {
				var scrollLeft = this.scrollLeft;
	
				scrollHead.scrollLeft = scrollLeft;
	
				if ( footer ) {
					scrollFoot.scrollLeft = scrollLeft;
				}
			} );
		}
	
		$(scrollBody).css(
			scrollY && scroll.bCollapse ? 'max-height' : 'height', 
			scrollY
		);
	
		settings.nScrollHead = scrollHead;
		settings.nScrollBody = scrollBody;
		settings.nScrollFoot = scrollFoot;
	
		// On redraw - align columns
		settings.aoDrawCallback.push( {
			"fn": _fnScrollDraw,
			"sName": "scrolling"
		} );
	
		return scroller[0];
	}
	
	
	
	/**
	 * Update the header, footer and body tables for resizing - i.e. column
	 * alignment.
	 *
	 * Welcome to the most horrible function DataTables. The process that this
	 * function follows is basically:
	 *   1. Re-create the table inside the scrolling div
	 *   2. Take live measurements from the DOM
	 *   3. Apply the measurements to align the columns
	 *   4. Clean up
	 *
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnScrollDraw ( settings )
	{
		// Given that this is such a monster function, a lot of variables are use
		// to try and keep the minimised size as small as possible
		var
			scroll         = settings.oScroll,
			scrollX        = scroll.sX,
			scrollXInner   = scroll.sXInner,
			scrollY        = scroll.sY,
			barWidth       = scroll.iBarWidth,
			divHeader      = $(settings.nScrollHead),
			divHeaderStyle = divHeader[0].style,
			divHeaderInner = divHeader.children('div'),
			divHeaderInnerStyle = divHeaderInner[0].style,
			divHeaderTable = divHeaderInner.children('table'),
			divBodyEl      = settings.nScrollBody,
			divBody        = $(divBodyEl),
			divBodyStyle   = divBodyEl.style,
			divFooter      = $(settings.nScrollFoot),
			divFooterInner = divFooter.children('div'),
			divFooterTable = divFooterInner.children('table'),
			header         = $(settings.nTHead),
			table          = $(settings.nTable),
			tableEl        = table[0],
			tableStyle     = tableEl.style,
			footer         = settings.nTFoot ? $(settings.nTFoot) : null,
			browser        = settings.oBrowser,
			ie67           = browser.bScrollOversize,
			dtHeaderCells  = _pluck( settings.aoColumns, 'nTh' ),
			headerTrgEls, footerTrgEls,
			headerSrcEls, footerSrcEls,
			headerCopy, footerCopy,
			headerWidths=[], footerWidths=[],
			headerContent=[], footerContent=[],
			idx, correction, sanityWidth,
			zeroOut = function(nSizer) {
				var style = nSizer.style;
				style.paddingTop = "0";
				style.paddingBottom = "0";
				style.borderTopWidth = "0";
				style.borderBottomWidth = "0";
				style.height = 0;
			};
	
		// If the scrollbar visibility has changed from the last draw, we need to
		// adjust the column sizes as the table width will have changed to account
		// for the scrollbar
		var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;
		
		if ( settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined ) {
			settings.scrollBarVis = scrollBarVis;
			_fnAdjustColumnSizing( settings );
			return; // adjust column sizing will call this function again
		}
		else {
			settings.scrollBarVis = scrollBarVis;
		}
	
		/*
		 * 1. Re-create the table inside the scrolling div
		 */
	
		// Remove the old minimised thead and tfoot elements in the inner table
		table.children('thead, tfoot').remove();
	
		if ( footer ) {
			footerCopy = footer.clone().prependTo( table );
			footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized
			footerSrcEls = footerCopy.find('tr');
		}
	
		// Clone the current header and footer elements and then place it into the inner table
		headerCopy = header.clone().prependTo( table );
		headerTrgEls = header.find('tr'); // original header is in its own table
		headerSrcEls = headerCopy.find('tr');
		headerCopy.find('th, td').removeAttr('tabindex');
	
	
		/*
		 * 2. Take live measurements from the DOM - do not alter the DOM itself!
		 */
	
		// Remove old sizing and apply the calculated column widths
		// Get the unique column headers in the newly created (cloned) header. We want to apply the
		// calculated sizes to this header
		if ( ! scrollX )
		{
			divBodyStyle.width = '100%';
			divHeader[0].style.width = '100%';
		}
	
		$.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {
			idx = _fnVisibleToColumnIndex( settings, i );
			el.style.width = settings.aoColumns[idx].sWidth;
		} );
	
		if ( footer ) {
			_fnApplyToChildren( function(n) {
				n.style.width = "";
			}, footerSrcEls );
		}
	
		// Size the table as a whole
		sanityWidth = table.outerWidth();
		if ( scrollX === "" ) {
			// No x scrolling
			tableStyle.width = "100%";
	
			// IE7 will make the width of the table when 100% include the scrollbar
			// - which is shouldn't. When there is a scrollbar we need to take this
			// into account.
			if ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||
				divBody.css('overflow-y') == "scroll")
			) {
				tableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);
			}
	
			// Recalculate the sanity width
			sanityWidth = table.outerWidth();
		}
		else if ( scrollXInner !== "" ) {
			// legacy x scroll inner has been given - use it
			tableStyle.width = _fnStringToCss(scrollXInner);
	
			// Recalculate the sanity width
			sanityWidth = table.outerWidth();
		}
	
		// Hidden header should have zero height, so remove padding and borders. Then
		// set the width based on the real headers
	
		// Apply all styles in one pass
		_fnApplyToChildren( zeroOut, headerSrcEls );
	
		// Read all widths in next pass
		_fnApplyToChildren( function(nSizer) {
			headerContent.push( nSizer.innerHTML );
			headerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );
		}, headerSrcEls );
	
		// Apply all widths in final pass
		_fnApplyToChildren( function(nToSize, i) {
			// Only apply widths to the DataTables detected header cells - this
			// prevents complex headers from having contradictory sizes applied
			if ( $.inArray( nToSize, dtHeaderCells ) !== -1 ) {
				nToSize.style.width = headerWidths[i];
			}
		}, headerTrgEls );
	
		$(headerSrcEls).height(0);
	
		/* Same again with the footer if we have one */
		if ( footer )
		{
			_fnApplyToChildren( zeroOut, footerSrcEls );
	
			_fnApplyToChildren( function(nSizer) {
				footerContent.push( nSizer.innerHTML );
				footerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );
			}, footerSrcEls );
	
			_fnApplyToChildren( function(nToSize, i) {
				nToSize.style.width = footerWidths[i];
			}, footerTrgEls );
	
			$(footerSrcEls).height(0);
		}
	
	
		/*
		 * 3. Apply the measurements
		 */
	
		// "Hide" the header and footer that we used for the sizing. We need to keep
		// the content of the cell so that the width applied to the header and body
		// both match, but we want to hide it completely. We want to also fix their
		// width to what they currently are
		_fnApplyToChildren( function(nSizer, i) {
			nSizer.innerHTML = '<div class="dataTables_sizing">'+headerContent[i]+'</div>';
			nSizer.childNodes[0].style.height = "0";
			nSizer.childNodes[0].style.overflow = "hidden";
			nSizer.style.width = headerWidths[i];
		}, headerSrcEls );
	
		if ( footer )
		{
			_fnApplyToChildren( function(nSizer, i) {
				nSizer.innerHTML = '<div class="dataTables_sizing">'+footerContent[i]+'</div>';
				nSizer.childNodes[0].style.height = "0";
				nSizer.childNodes[0].style.overflow = "hidden";
				nSizer.style.width = footerWidths[i];
			}, footerSrcEls );
		}
	
		// Sanity check that the table is of a sensible width. If not then we are going to get
		// misalignment - try to prevent this by not allowing the table to shrink below its min width
		if ( table.outerWidth() < sanityWidth )
		{
			// The min width depends upon if we have a vertical scrollbar visible or not */
			correction = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||
				divBody.css('overflow-y') == "scroll")) ?
					sanityWidth+barWidth :
					sanityWidth;
	
			// IE6/7 are a law unto themselves...
			if ( ie67 && (divBodyEl.scrollHeight >
				divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")
			) {
				tableStyle.width = _fnStringToCss( correction-barWidth );
			}
	
			// And give the user a warning that we've stopped the table getting too small
			if ( scrollX === "" || scrollXInner !== "" ) {
				_fnLog( settings, 1, 'Possible column misalignment', 6 );
			}
		}
		else
		{
			correction = '100%';
		}
	
		// Apply to the container elements
		divBodyStyle.width = _fnStringToCss( correction );
		divHeaderStyle.width = _fnStringToCss( correction );
	
		if ( footer ) {
			settings.nScrollFoot.style.width = _fnStringToCss( correction );
		}
	
	
		/*
		 * 4. Clean up
		 */
		if ( ! scrollY ) {
			/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting
			 * the scrollbar height from the visible display, rather than adding it on. We need to
			 * set the height in order to sort this. Don't want to do it in any other browsers.
			 */
			if ( ie67 ) {
				divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );
			}
		}
	
		/* Finally set the width's of the header and footer tables */
		var iOuterWidth = table.outerWidth();
		divHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );
		divHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );
	
		// Figure out if there are scrollbar present - if so then we need a the header and footer to
		// provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)
		var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == "scroll";
		var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );
		divHeaderInnerStyle[ padding ] = bScrolling ? barWidth+"px" : "0px";
	
		if ( footer ) {
			divFooterTable[0].style.width = _fnStringToCss( iOuterWidth );
			divFooterInner[0].style.width = _fnStringToCss( iOuterWidth );
			divFooterInner[0].style[padding] = bScrolling ? barWidth+"px" : "0px";
		}
	
		// Correct DOM ordering for colgroup - comes before the thead
		table.children('colgroup').insertBefore( table.children('thead') );
	
		/* Adjust the position of the header in case we loose the y-scrollbar */
		divBody.scroll();
	
		// If sorting or filtering has occurred, jump the scrolling back to the top
		// only if we aren't holding the position
		if ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {
			divBodyEl.scrollTop = 0;
		}
	}
	
	
	
	/**
	 * Apply a given function to the display child nodes of an element array (typically
	 * TD children of TR rows
	 *  @param {function} fn Method to apply to the objects
	 *  @param array {nodes} an1 List of elements to look through for display children
	 *  @param array {nodes} an2 Another list (identical structure to the first) - optional
	 *  @memberof DataTable#oApi
	 */
	function _fnApplyToChildren( fn, an1, an2 )
	{
		var index=0, i=0, iLen=an1.length;
		var nNode1, nNode2;
	
		while ( i < iLen ) {
			nNode1 = an1[i].firstChild;
			nNode2 = an2 ? an2[i].firstChild : null;
	
			while ( nNode1 ) {
				if ( nNode1.nodeType === 1 ) {
					if ( an2 ) {
						fn( nNode1, nNode2, index );
					}
					else {
						fn( nNode1, index );
					}
	
					index++;
				}
	
				nNode1 = nNode1.nextSibling;
				nNode2 = an2 ? nNode2.nextSibling : null;
			}
	
			i++;
		}
	}
	
	
	
	var __re_html_remove = /<.*?>/g;
	
	
	/**
	 * Calculate the width of columns for the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnCalculateColumnWidths ( oSettings )
	{
		var
			table = oSettings.nTable,
			columns = oSettings.aoColumns,
			scroll = oSettings.oScroll,
			scrollY = scroll.sY,
			scrollX = scroll.sX,
			scrollXInner = scroll.sXInner,
			columnCount = columns.length,
			visibleColumns = _fnGetColumns( oSettings, 'bVisible' ),
			headerCells = $('th', oSettings.nTHead),
			tableWidthAttr = table.getAttribute('width'), // from DOM element
			tableContainer = table.parentNode,
			userInputs = false,
			i, column, columnIdx, width, outerWidth,
			browser = oSettings.oBrowser,
			ie67 = browser.bScrollOversize;
	
		var styleWidth = table.style.width;
		if ( styleWidth && styleWidth.indexOf('%') !== -1 ) {
			tableWidthAttr = styleWidth;
		}
	
		/* Convert any user input sizes into pixel sizes */
		for ( i=0 ; i<visibleColumns.length ; i++ ) {
			column = columns[ visibleColumns[i] ];
	
			if ( column.sWidth !== null ) {
				column.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );
	
				userInputs = true;
			}
		}
	
		/* If the number of columns in the DOM equals the number that we have to
		 * process in DataTables, then we can use the offsets that are created by
		 * the web- browser. No custom sizes can be set in order for this to happen,
		 * nor scrolling used
		 */
		if ( ie67 || ! userInputs && ! scrollX && ! scrollY &&
		     columnCount == _fnVisbleColumns( oSettings ) &&
		     columnCount == headerCells.length
		) {
			for ( i=0 ; i<columnCount ; i++ ) {
				var colIdx = _fnVisibleToColumnIndex( oSettings, i );
	
				if ( colIdx !== null ) {
					columns[ colIdx ].sWidth = _fnStringToCss( headerCells.eq(i).width() );
				}
			}
		}
		else
		{
			// Otherwise construct a single row, worst case, table with the widest
			// node in the data, assign any user defined widths, then insert it into
			// the DOM and allow the browser to do all the hard work of calculating
			// table widths
			var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table
				.css( 'visibility', 'hidden' )
				.removeAttr( 'id' );
	
			// Clean up the table body
			tmpTable.find('tbody tr').remove();
			var tr = $('<tr/>').appendTo( tmpTable.find('tbody') );
	
			// Clone the table header and footer - we can't use the header / footer
			// from the cloned table, since if scrolling is active, the table's
			// real header and footer are contained in different table tags
			tmpTable.find('thead, tfoot').remove();
			tmpTable
				.append( $(oSettings.nTHead).clone() )
				.append( $(oSettings.nTFoot).clone() );
	
			// Remove any assigned widths from the footer (from scrolling)
			tmpTable.find('tfoot th, tfoot td').css('width', '');
	
			// Apply custom sizing to the cloned header
			headerCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );
	
			for ( i=0 ; i<visibleColumns.length ; i++ ) {
				column = columns[ visibleColumns[i] ];
	
				headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?
					_fnStringToCss( column.sWidthOrig ) :
					'';
	
				// For scrollX we need to force the column width otherwise the
				// browser will collapse it. If this width is smaller than the
				// width the column requires, then it will have no effect
				if ( column.sWidthOrig && scrollX ) {
					$( headerCells[i] ).append( $('<div/>').css( {
						width: column.sWidthOrig,
						margin: 0,
						padding: 0,
						border: 0,
						height: 1
					} ) );
				}
			}
	
			// Find the widest cell for each column and put it into the table
			if ( oSettings.aoData.length ) {
				for ( i=0 ; i<visibleColumns.length ; i++ ) {
					columnIdx = visibleColumns[i];
					column = columns[ columnIdx ];
	
					$( _fnGetWidestNode( oSettings, columnIdx ) )
						.clone( false )
						.append( column.sContentPadding )
						.appendTo( tr );
				}
			}
	
			// Tidy the temporary table - remove name attributes so there aren't
			// duplicated in the dom (radio elements for example)
			$('[name]', tmpTable).removeAttr('name');
	
			// Table has been built, attach to the document so we can work with it.
			// A holding element is used, positioned at the top of the container
			// with minimal height, so it has no effect on if the container scrolls
			// or not. Otherwise it might trigger scrolling when it actually isn't
			// needed
			var holder = $('<div/>').css( scrollX || scrollY ?
					{
						position: 'absolute',
						top: 0,
						left: 0,
						height: 1,
						right: 0,
						overflow: 'hidden'
					} :
					{}
				)
				.append( tmpTable )
				.appendTo( tableContainer );
	
			// When scrolling (X or Y) we want to set the width of the table as 
			// appropriate. However, when not scrolling leave the table width as it
			// is. This results in slightly different, but I think correct behaviour
			if ( scrollX && scrollXInner ) {
				tmpTable.width( scrollXInner );
			}
			else if ( scrollX ) {
				tmpTable.css( 'width', 'auto' );
				tmpTable.removeAttr('width');
	
				// If there is no width attribute or style, then allow the table to
				// collapse
				if ( tmpTable.width() < tableContainer.clientWidth && tableWidthAttr ) {
					tmpTable.width( tableContainer.clientWidth );
				}
			}
			else if ( scrollY ) {
				tmpTable.width( tableContainer.clientWidth );
			}
			else if ( tableWidthAttr ) {
				tmpTable.width( tableWidthAttr );
			}
	
			// Get the width of each column in the constructed table - we need to
			// know the inner width (so it can be assigned to the other table's
			// cells) and the outer width so we can calculate the full width of the
			// table. This is safe since DataTables requires a unique cell for each
			// column, but if ever a header can span multiple columns, this will
			// need to be modified.
			var total = 0;
			for ( i=0 ; i<visibleColumns.length ; i++ ) {
				var cell = $(headerCells[i]);
				var border = cell.outerWidth() - cell.width();
	
				// Use getBounding... where possible (not IE8-) because it can give
				// sub-pixel accuracy, which we then want to round up!
				var bounding = browser.bBounding ?
					Math.ceil( headerCells[i].getBoundingClientRect().width ) :
					cell.outerWidth();
	
				// Total is tracked to remove any sub-pixel errors as the outerWidth
				// of the table might not equal the total given here (IE!).
				total += bounding;
	
				// Width for each column to use
				columns[ visibleColumns[i] ].sWidth = _fnStringToCss( bounding - border );
			}
	
			table.style.width = _fnStringToCss( total );
	
			// Finished with the table - ditch it
			holder.remove();
		}
	
		// If there is a width attr, we want to attach an event listener which
		// allows the table sizing to automatically adjust when the window is
		// resized. Use the width attr rather than CSS, since we can't know if the
		// CSS is a relative value or absolute - DOM read is always px.
		if ( tableWidthAttr ) {
			table.style.width = _fnStringToCss( tableWidthAttr );
		}
	
		if ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {
			var bindResize = function () {
				$(window).on('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {
					_fnAdjustColumnSizing( oSettings );
				} ) );
			};
	
			// IE6/7 will crash if we bind a resize event handler on page load.
			// To be removed in 1.11 which drops IE6/7 support
			if ( ie67 ) {
				setTimeout( bindResize, 1000 );
			}
			else {
				bindResize();
			}
	
			oSettings._reszEvt = true;
		}
	}
	
	
	/**
	 * Throttle the calls to a function. Arguments and context are maintained for
	 * the throttled function
	 *  @param {function} fn Function to be called
	 *  @param {int} [freq=200] call frequency in mS
	 *  @returns {function} wrapped function
	 *  @memberof DataTable#oApi
	 */
	var _fnThrottle = DataTable.util.throttle;
	
	
	/**
	 * Convert a CSS unit width to pixels (e.g. 2em)
	 *  @param {string} width width to be converted
	 *  @param {node} parent parent to get the with for (required for relative widths) - optional
	 *  @returns {int} width in pixels
	 *  @memberof DataTable#oApi
	 */
	function _fnConvertToWidth ( width, parent )
	{
		if ( ! width ) {
			return 0;
		}
	
		var n = $('<div/>')
			.css( 'width', _fnStringToCss( width ) )
			.appendTo( parent || document.body );
	
		var val = n[0].offsetWidth;
		n.remove();
	
		return val;
	}
	
	
	/**
	 * Get the widest node
	 *  @param {object} settings dataTables settings object
	 *  @param {int} colIdx column of interest
	 *  @returns {node} widest table node
	 *  @memberof DataTable#oApi
	 */
	function _fnGetWidestNode( settings, colIdx )
	{
		var idx = _fnGetMaxLenString( settings, colIdx );
		if ( idx < 0 ) {
			return null;
		}
	
		var data = settings.aoData[ idx ];
		return ! data.nTr ? // Might not have been created when deferred rendering
			$('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :
			data.anCells[ colIdx ];
	}
	
	
	/**
	 * Get the maximum strlen for each data column
	 *  @param {object} settings dataTables settings object
	 *  @param {int} colIdx column of interest
	 *  @returns {string} max string length for each column
	 *  @memberof DataTable#oApi
	 */
	function _fnGetMaxLenString( settings, colIdx )
	{
		var s, max=-1, maxIdx = -1;
	
		for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
			s = _fnGetCellData( settings, i, colIdx, 'display' )+'';
			s = s.replace( __re_html_remove, '' );
			s = s.replace( /&nbsp;/g, ' ' );
	
			if ( s.length > max ) {
				max = s.length;
				maxIdx = i;
			}
		}
	
		return maxIdx;
	}
	
	
	/**
	 * Append a CSS unit (only if required) to a string
	 *  @param {string} value to css-ify
	 *  @returns {string} value with css unit
	 *  @memberof DataTable#oApi
	 */
	function _fnStringToCss( s )
	{
		if ( s === null ) {
			return '0px';
		}
	
		if ( typeof s == 'number' ) {
			return s < 0 ?
				'0px' :
				s+'px';
		}
	
		// Check it has a unit character already
		return s.match(/\d$/) ?
			s+'px' :
			s;
	}
	
	
	
	function _fnSortFlatten ( settings )
	{
		var
			i, iLen, k, kLen,
			aSort = [],
			aiOrig = [],
			aoColumns = settings.aoColumns,
			aDataSort, iCol, sType, srcCol,
			fixed = settings.aaSortingFixed,
			fixedObj = $.isPlainObject( fixed ),
			nestedSort = [],
			add = function ( a ) {
				if ( a.length && ! $.isArray( a[0] ) ) {
					// 1D array
					nestedSort.push( a );
				}
				else {
					// 2D array
					$.merge( nestedSort, a );
				}
			};
	
		// Build the sort array, with pre-fix and post-fix options if they have been
		// specified
		if ( $.isArray( fixed ) ) {
			add( fixed );
		}
	
		if ( fixedObj && fixed.pre ) {
			add( fixed.pre );
		}
	
		add( settings.aaSorting );
	
		if (fixedObj && fixed.post ) {
			add( fixed.post );
		}
	
		for ( i=0 ; i<nestedSort.length ; i++ )
		{
			srcCol = nestedSort[i][0];
			aDataSort = aoColumns[ srcCol ].aDataSort;
	
			for ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )
			{
				iCol = aDataSort[k];
				sType = aoColumns[ iCol ].sType || 'string';
	
				if ( nestedSort[i]._idx === undefined ) {
					nestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );
				}
	
				aSort.push( {
					src:       srcCol,
					col:       iCol,
					dir:       nestedSort[i][1],
					index:     nestedSort[i]._idx,
					type:      sType,
					formatter: DataTable.ext.type.order[ sType+"-pre" ]
				} );
			}
		}
	
		return aSort;
	}
	
	/**
	 * Change the order of the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 *  @todo This really needs split up!
	 */
	function _fnSort ( oSettings )
	{
		var
			i, ien, iLen, j, jLen, k, kLen,
			sDataType, nTh,
			aiOrig = [],
			oExtSort = DataTable.ext.type.order,
			aoData = oSettings.aoData,
			aoColumns = oSettings.aoColumns,
			aDataSort, data, iCol, sType, oSort,
			formatters = 0,
			sortCol,
			displayMaster = oSettings.aiDisplayMaster,
			aSort;
	
		// Resolve any column types that are unknown due to addition or invalidation
		// @todo Can this be moved into a 'data-ready' handler which is called when
		//   data is going to be used in the table?
		_fnColumnTypes( oSettings );
	
		aSort = _fnSortFlatten( oSettings );
	
		for ( i=0, ien=aSort.length ; i<ien ; i++ ) {
			sortCol = aSort[i];
	
			// Track if we can use the fast sort algorithm
			if ( sortCol.formatter ) {
				formatters++;
			}
	
			// Load the data needed for the sort, for each cell
			_fnSortData( oSettings, sortCol.col );
		}
	
		/* No sorting required if server-side or no sorting array */
		if ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )
		{
			// Create a value - key array of the current row positions such that we can use their
			// current position during the sort, if values match, in order to perform stable sorting
			for ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {
				aiOrig[ displayMaster[i] ] = i;
			}
	
			/* Do the sort - here we want multi-column sorting based on a given data source (column)
			 * and sorting function (from oSort) in a certain direction. It's reasonably complex to
			 * follow on it's own, but this is what we want (example two column sorting):
			 *  fnLocalSorting = function(a,b){
			 *    var iTest;
			 *    iTest = oSort['string-asc']('data11', 'data12');
			 *      if (iTest !== 0)
			 *        return iTest;
			 *    iTest = oSort['numeric-desc']('data21', 'data22');
			 *    if (iTest !== 0)
			 *      return iTest;
			 *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
			 *  }
			 * Basically we have a test for each sorting column, if the data in that column is equal,
			 * test the next column. If all columns match, then we use a numeric sort on the row
			 * positions in the original data array to provide a stable sort.
			 *
			 * Note - I know it seems excessive to have two sorting methods, but the first is around
			 * 15% faster, so the second is only maintained for backwards compatibility with sorting
			 * methods which do not have a pre-sort formatting function.
			 */
			if ( formatters === aSort.length ) {
				// All sort types have formatting functions
				displayMaster.sort( function ( a, b ) {
					var
						x, y, k, test, sort,
						len=aSort.length,
						dataA = aoData[a]._aSortData,
						dataB = aoData[b]._aSortData;
	
					for ( k=0 ; k<len ; k++ ) {
						sort = aSort[k];
	
						x = dataA[ sort.col ];
						y = dataB[ sort.col ];
	
						test = x<y ? -1 : x>y ? 1 : 0;
						if ( test !== 0 ) {
							return sort.dir === 'asc' ? test : -test;
						}
					}
	
					x = aiOrig[a];
					y = aiOrig[b];
					return x<y ? -1 : x>y ? 1 : 0;
				} );
			}
			else {
				// Depreciated - remove in 1.11 (providing a plug-in option)
				// Not all sort types have formatting methods, so we have to call their sorting
				// methods.
				displayMaster.sort( function ( a, b ) {
					var
						x, y, k, l, test, sort, fn,
						len=aSort.length,
						dataA = aoData[a]._aSortData,
						dataB = aoData[b]._aSortData;
	
					for ( k=0 ; k<len ; k++ ) {
						sort = aSort[k];
	
						x = dataA[ sort.col ];
						y = dataB[ sort.col ];
	
						fn = oExtSort[ sort.type+"-"+sort.dir ] || oExtSort[ "string-"+sort.dir ];
						test = fn( x, y );
						if ( test !== 0 ) {
							return test;
						}
					}
	
					x = aiOrig[a];
					y = aiOrig[b];
					return x<y ? -1 : x>y ? 1 : 0;
				} );
			}
		}
	
		/* Tell the draw function that we have sorted the data */
		oSettings.bSorted = true;
	}
	
	
	function _fnSortAria ( settings )
	{
		var label;
		var nextSort;
		var columns = settings.aoColumns;
		var aSort = _fnSortFlatten( settings );
		var oAria = settings.oLanguage.oAria;
	
		// ARIA attributes - need to loop all columns, to update all (removing old
		// attributes as needed)
		for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
		{
			var col = columns[i];
			var asSorting = col.asSorting;
			var sTitle = col.sTitle.replace( /<.*?>/g, "" );
			var th = col.nTh;
	
			// IE7 is throwing an error when setting these properties with jQuery's
			// attr() and removeAttr() methods...
			th.removeAttribute('aria-sort');
	
			/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */
			if ( col.bSortable ) {
				if ( aSort.length > 0 && aSort[0].col == i ) {
					th.setAttribute('aria-sort', aSort[0].dir=="asc" ? "ascending" : "descending" );
					nextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];
				}
				else {
					nextSort = asSorting[0];
				}
	
				label = sTitle + ( nextSort === "asc" ?
					oAria.sSortAscending :
					oAria.sSortDescending
				);
			}
			else {
				label = sTitle;
			}
	
			th.setAttribute('aria-label', label);
		}
	}
	
	
	/**
	 * Function to run on user sort request
	 *  @param {object} settings dataTables settings object
	 *  @param {node} attachTo node to attach the handler to
	 *  @param {int} colIdx column sorting index
	 *  @param {boolean} [append=false] Append the requested sort to the existing
	 *    sort if true (i.e. multi-column sort)
	 *  @param {function} [callback] callback function
	 *  @memberof DataTable#oApi
	 */
	function _fnSortListener ( settings, colIdx, append, callback )
	{
		var col = settings.aoColumns[ colIdx ];
		var sorting = settings.aaSorting;
		var asSorting = col.asSorting;
		var nextSortIdx;
		var next = function ( a, overflow ) {
			var idx = a._idx;
			if ( idx === undefined ) {
				idx = $.inArray( a[1], asSorting );
			}
	
			return idx+1 < asSorting.length ?
				idx+1 :
				overflow ?
					null :
					0;
		};
	
		// Convert to 2D array if needed
		if ( typeof sorting[0] === 'number' ) {
			sorting = settings.aaSorting = [ sorting ];
		}
	
		// If appending the sort then we are multi-column sorting
		if ( append && settings.oFeatures.bSortMulti ) {
			// Are we already doing some kind of sort on this column?
			var sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );
	
			if ( sortIdx !== -1 ) {
				// Yes, modify the sort
				nextSortIdx = next( sorting[sortIdx], true );
	
				if ( nextSortIdx === null && sorting.length === 1 ) {
					nextSortIdx = 0; // can't remove sorting completely
				}
	
				if ( nextSortIdx === null ) {
					sorting.splice( sortIdx, 1 );
				}
				else {
					sorting[sortIdx][1] = asSorting[ nextSortIdx ];
					sorting[sortIdx]._idx = nextSortIdx;
				}
			}
			else {
				// No sort on this column yet
				sorting.push( [ colIdx, asSorting[0], 0 ] );
				sorting[sorting.length-1]._idx = 0;
			}
		}
		else if ( sorting.length && sorting[0][0] == colIdx ) {
			// Single column - already sorting on this column, modify the sort
			nextSortIdx = next( sorting[0] );
	
			sorting.length = 1;
			sorting[0][1] = asSorting[ nextSortIdx ];
			sorting[0]._idx = nextSortIdx;
		}
		else {
			// Single column - sort only on this column
			sorting.length = 0;
			sorting.push( [ colIdx, asSorting[0] ] );
			sorting[0]._idx = 0;
		}
	
		// Run the sort by calling a full redraw
		_fnReDraw( settings );
	
		// callback used for async user interaction
		if ( typeof callback == 'function' ) {
			callback( settings );
		}
	}
	
	
	/**
	 * Attach a sort handler (click) to a node
	 *  @param {object} settings dataTables settings object
	 *  @param {node} attachTo node to attach the handler to
	 *  @param {int} colIdx column sorting index
	 *  @param {function} [callback] callback function
	 *  @memberof DataTable#oApi
	 */
	function _fnSortAttachListener ( settings, attachTo, colIdx, callback )
	{
		var col = settings.aoColumns[ colIdx ];
	
		_fnBindAction( attachTo, {}, function (e) {
			/* If the column is not sortable - don't to anything */
			if ( col.bSortable === false ) {
				return;
			}
	
			// If processing is enabled use a timeout to allow the processing
			// display to be shown - otherwise to it synchronously
			if ( settings.oFeatures.bProcessing ) {
				_fnProcessingDisplay( settings, true );
	
				setTimeout( function() {
					_fnSortListener( settings, colIdx, e.shiftKey, callback );
	
					// In server-side processing, the draw callback will remove the
					// processing display
					if ( _fnDataSource( settings ) !== 'ssp' ) {
						_fnProcessingDisplay( settings, false );
					}
				}, 0 );
			}
			else {
				_fnSortListener( settings, colIdx, e.shiftKey, callback );
			}
		} );
	}
	
	
	/**
	 * Set the sorting classes on table's body, Note: it is safe to call this function
	 * when bSort and bSortClasses are false
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnSortingClasses( settings )
	{
		var oldSort = settings.aLastSort;
		var sortClass = settings.oClasses.sSortColumn;
		var sort = _fnSortFlatten( settings );
		var features = settings.oFeatures;
		var i, ien, colIdx;
	
		if ( features.bSort && features.bSortClasses ) {
			// Remove old sorting classes
			for ( i=0, ien=oldSort.length ; i<ien ; i++ ) {
				colIdx = oldSort[i].src;
	
				// Remove column sorting
				$( _pluck( settings.aoData, 'anCells', colIdx ) )
					.removeClass( sortClass + (i<2 ? i+1 : 3) );
			}
	
			// Add new column sorting
			for ( i=0, ien=sort.length ; i<ien ; i++ ) {
				colIdx = sort[i].src;
	
				$( _pluck( settings.aoData, 'anCells', colIdx ) )
					.addClass( sortClass + (i<2 ? i+1 : 3) );
			}
		}
	
		settings.aLastSort = sort;
	}
	
	
	// Get the data to sort a column, be it from cache, fresh (populating the
	// cache), or from a sort formatter
	function _fnSortData( settings, idx )
	{
		// Custom sorting function - provided by the sort data type
		var column = settings.aoColumns[ idx ];
		var customSort = DataTable.ext.order[ column.sSortDataType ];
		var customData;
	
		if ( customSort ) {
			customData = customSort.call( settings.oInstance, settings, idx,
				_fnColumnIndexToVisible( settings, idx )
			);
		}
	
		// Use / populate cache
		var row, cellData;
		var formatter = DataTable.ext.type.order[ column.sType+"-pre" ];
	
		for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
			row = settings.aoData[i];
	
			if ( ! row._aSortData ) {
				row._aSortData = [];
			}
	
			if ( ! row._aSortData[idx] || customSort ) {
				cellData = customSort ?
					customData[i] : // If there was a custom sort function, use data from there
					_fnGetCellData( settings, i, idx, 'sort' );
	
				row._aSortData[ idx ] = formatter ?
					formatter( cellData ) :
					cellData;
			}
		}
	}
	
	
	
	/**
	 * Save the state of a table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnSaveState ( settings )
	{
		if ( !settings.oFeatures.bStateSave || settings.bDestroying )
		{
			return;
		}
	
		/* Store the interesting variables */
		var state = {
			time:    +new Date(),
			start:   settings._iDisplayStart,
			length:  settings._iDisplayLength,
			order:   $.extend( true, [], settings.aaSorting ),
			search:  _fnSearchToCamel( settings.oPreviousSearch ),
			columns: $.map( settings.aoColumns, function ( col, i ) {
				return {
					visible: col.bVisible,
					search: _fnSearchToCamel( settings.aoPreSearchCols[i] )
				};
			} )
		};
	
		_fnCallbackFire( settings, "aoStateSaveParams", 'stateSaveParams', [settings, state] );
	
		settings.oSavedState = state;
		settings.fnStateSaveCallback.call( settings.oInstance, settings, state );
	}
	
	
	/**
	 * Attempt to load a saved table state
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} oInit DataTables init object so we can override settings
	 *  @param {function} callback Callback to execute when the state has been loaded
	 *  @memberof DataTable#oApi
	 */
	function _fnLoadState ( settings, oInit, callback )
	{
		var i, ien;
		var columns = settings.aoColumns;
		var loaded = function ( s ) {
			if ( ! s || ! s.time ) {
				callback();
				return;
			}
	
			// Allow custom and plug-in manipulation functions to alter the saved data set and
			// cancelling of loading by returning false
			var abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s] );
			if ( $.inArray( false, abStateLoad ) !== -1 ) {
				callback();
				return;
			}
	
			// Reject old data
			var duration = settings.iStateDuration;
			if ( duration > 0 && s.time < +new Date() - (duration*1000) ) {
				callback();
				return;
			}
	
			// Number of columns have changed - all bets are off, no restore of settings
			if ( s.columns && columns.length !== s.columns.length ) {
				callback();
				return;
			}
	
			// Store the saved state so it might be accessed at any time
			settings.oLoadedState = $.extend( true, {}, s );
	
			// Restore key features - todo - for 1.11 this needs to be done by
			// subscribed events
			if ( s.start !== undefined ) {
				settings._iDisplayStart    = s.start;
				settings.iInitDisplayStart = s.start;
			}
			if ( s.length !== undefined ) {
				settings._iDisplayLength   = s.length;
			}
	
			// Order
			if ( s.order !== undefined ) {
				settings.aaSorting = [];
				$.each( s.order, function ( i, col ) {
					settings.aaSorting.push( col[0] >= columns.length ?
						[ 0, col[1] ] :
						col
					);
				} );
			}
	
			// Search
			if ( s.search !== undefined ) {
				$.extend( settings.oPreviousSearch, _fnSearchToHung( s.search ) );
			}
	
			// Columns
			//
			if ( s.columns ) {
				for ( i=0, ien=s.columns.length ; i<ien ; i++ ) {
					var col = s.columns[i];
	
					// Visibility
					if ( col.visible !== undefined ) {
						columns[i].bVisible = col.visible;
					}
	
					// Search
					if ( col.search !== undefined ) {
						$.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );
					}
				}
			}
	
			_fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, s] );
			callback();
		}
	
		if ( ! settings.oFeatures.bStateSave ) {
			callback();
			return;
		}
	
		var state = settings.fnStateLoadCallback.call( settings.oInstance, settings, loaded );
	
		if ( state !== undefined ) {
			loaded( state );
		}
		// otherwise, wait for the loaded callback to be executed
	}
	
	
	/**
	 * Return the settings object for a particular table
	 *  @param {node} table table we are using as a dataTable
	 *  @returns {object} Settings object - or null if not found
	 *  @memberof DataTable#oApi
	 */
	function _fnSettingsFromNode ( table )
	{
		var settings = DataTable.settings;
		var idx = $.inArray( table, _pluck( settings, 'nTable' ) );
	
		return idx !== -1 ?
			settings[ idx ] :
			null;
	}
	
	
	/**
	 * Log an error message
	 *  @param {object} settings dataTables settings object
	 *  @param {int} level log error messages, or display them to the user
	 *  @param {string} msg error message
	 *  @param {int} tn Technical note id to get more information about the error.
	 *  @memberof DataTable#oApi
	 */
	function _fnLog( settings, level, msg, tn )
	{
		msg = 'DataTables warning: '+
			(settings ? 'table id='+settings.sTableId+' - ' : '')+msg;
	
		if ( tn ) {
			msg += '. For more information about this error, please see '+
			'http://datatables.net/tn/'+tn;
		}
	
		if ( ! level  ) {
			// Backwards compatibility pre 1.10
			var ext = DataTable.ext;
			var type = ext.sErrMode || ext.errMode;
	
			if ( settings ) {
				_fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );
			}
	
			if ( type == 'alert' ) {
				alert( msg );
			}
			else if ( type == 'throw' ) {
				throw new Error(msg);
			}
			else if ( typeof type == 'function' ) {
				type( settings, tn, msg );
			}
		}
		else if ( window.console && console.log ) {
			console.log( msg );
		}
	}
	
	
	/**
	 * See if a property is defined on one object, if so assign it to the other object
	 *  @param {object} ret target object
	 *  @param {object} src source object
	 *  @param {string} name property
	 *  @param {string} [mappedName] name to map too - optional, name used if not given
	 *  @memberof DataTable#oApi
	 */
	function _fnMap( ret, src, name, mappedName )
	{
		if ( $.isArray( name ) ) {
			$.each( name, function (i, val) {
				if ( $.isArray( val ) ) {
					_fnMap( ret, src, val[0], val[1] );
				}
				else {
					_fnMap( ret, src, val );
				}
			} );
	
			return;
		}
	
		if ( mappedName === undefined ) {
			mappedName = name;
		}
	
		if ( src[name] !== undefined ) {
			ret[mappedName] = src[name];
		}
	}
	
	
	/**
	 * Extend objects - very similar to jQuery.extend, but deep copy objects, and
	 * shallow copy arrays. The reason we need to do this, is that we don't want to
	 * deep copy array init values (such as aaSorting) since the dev wouldn't be
	 * able to override them, but we do want to deep copy arrays.
	 *  @param {object} out Object to extend
	 *  @param {object} extender Object from which the properties will be applied to
	 *      out
	 *  @param {boolean} breakRefs If true, then arrays will be sliced to take an
	 *      independent copy with the exception of the `data` or `aaData` parameters
	 *      if they are present. This is so you can pass in a collection to
	 *      DataTables and have that used as your data source without breaking the
	 *      references
	 *  @returns {object} out Reference, just for convenience - out === the return.
	 *  @memberof DataTable#oApi
	 *  @todo This doesn't take account of arrays inside the deep copied objects.
	 */
	function _fnExtend( out, extender, breakRefs )
	{
		var val;
	
		for ( var prop in extender ) {
			if ( extender.hasOwnProperty(prop) ) {
				val = extender[prop];
	
				if ( $.isPlainObject( val ) ) {
					if ( ! $.isPlainObject( out[prop] ) ) {
						out[prop] = {};
					}
					$.extend( true, out[prop], val );
				}
				else if ( breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val) ) {
					out[prop] = val.slice();
				}
				else {
					out[prop] = val;
				}
			}
		}
	
		return out;
	}
	
	
	/**
	 * Bind an event handers to allow a click or return key to activate the callback.
	 * This is good for accessibility since a return on the keyboard will have the
	 * same effect as a click, if the element has focus.
	 *  @param {element} n Element to bind the action to
	 *  @param {object} oData Data object to pass to the triggered function
	 *  @param {function} fn Callback function for when the event is triggered
	 *  @memberof DataTable#oApi
	 */
	function _fnBindAction( n, oData, fn )
	{
		$(n)
			.on( 'click.DT', oData, function (e) {
					$(n).blur(); // Remove focus outline for mouse users
					fn(e);
				} )
			.on( 'keypress.DT', oData, function (e){
					if ( e.which === 13 ) {
						e.preventDefault();
						fn(e);
					}
				} )
			.on( 'selectstart.DT', function () {
					/* Take the brutal approach to cancelling text selection */
					return false;
				} );
	}
	
	
	/**
	 * Register a callback function. Easily allows a callback function to be added to
	 * an array store of callback functions that can then all be called together.
	 *  @param {object} oSettings dataTables settings object
	 *  @param {string} sStore Name of the array storage for the callbacks in oSettings
	 *  @param {function} fn Function to be called back
	 *  @param {string} sName Identifying name for the callback (i.e. a label)
	 *  @memberof DataTable#oApi
	 */
	function _fnCallbackReg( oSettings, sStore, fn, sName )
	{
		if ( fn )
		{
			oSettings[sStore].push( {
				"fn": fn,
				"sName": sName
			} );
		}
	}
	
	
	/**
	 * Fire callback functions and trigger events. Note that the loop over the
	 * callback array store is done backwards! Further note that you do not want to
	 * fire off triggers in time sensitive applications (for example cell creation)
	 * as its slow.
	 *  @param {object} settings dataTables settings object
	 *  @param {string} callbackArr Name of the array storage for the callbacks in
	 *      oSettings
	 *  @param {string} eventName Name of the jQuery custom event to trigger. If
	 *      null no trigger is fired
	 *  @param {array} args Array of arguments to pass to the callback function /
	 *      trigger
	 *  @memberof DataTable#oApi
	 */
	function _fnCallbackFire( settings, callbackArr, eventName, args )
	{
		var ret = [];
	
		if ( callbackArr ) {
			ret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {
				return val.fn.apply( settings.oInstance, args );
			} );
		}
	
		if ( eventName !== null ) {
			var e = $.Event( eventName+'.dt' );
	
			$(settings.nTable).trigger( e, args );
	
			ret.push( e.result );
		}
	
		return ret;
	}
	
	
	function _fnLengthOverflow ( settings )
	{
		var
			start = settings._iDisplayStart,
			end = settings.fnDisplayEnd(),
			len = settings._iDisplayLength;
	
		/* If we have space to show extra rows (backing up from the end point - then do so */
		if ( start >= end )
		{
			start = end - len;
		}
	
		// Keep the start record on the current page
		start -= (start % len);
	
		if ( len === -1 || start < 0 )
		{
			start = 0;
		}
	
		settings._iDisplayStart = start;
	}
	
	
	function _fnRenderer( settings, type )
	{
		var renderer = settings.renderer;
		var host = DataTable.ext.renderer[type];
	
		if ( $.isPlainObject( renderer ) && renderer[type] ) {
			// Specific renderer for this type. If available use it, otherwise use
			// the default.
			return host[renderer[type]] || host._;
		}
		else if ( typeof renderer === 'string' ) {
			// Common renderer - if there is one available for this type use it,
			// otherwise use the default
			return host[renderer] || host._;
		}
	
		// Use the default
		return host._;
	}
	
	
	/**
	 * Detect the data source being used for the table. Used to simplify the code
	 * a little (ajax) and to make it compress a little smaller.
	 *
	 *  @param {object} settings dataTables settings object
	 *  @returns {string} Data source
	 *  @memberof DataTable#oApi
	 */
	function _fnDataSource ( settings )
	{
		if ( settings.oFeatures.bServerSide ) {
			return 'ssp';
		}
		else if ( settings.ajax || settings.sAjaxSource ) {
			return 'ajax';
		}
		return 'dom';
	}
	

	
	
	/**
	 * Computed structure of the DataTables API, defined by the options passed to
	 * `DataTable.Api.register()` when building the API.
	 *
	 * The structure is built in order to speed creation and extension of the Api
	 * objects since the extensions are effectively pre-parsed.
	 *
	 * The array is an array of objects with the following structure, where this
	 * base array represents the Api prototype base:
	 *
	 *     [
	 *       {
	 *         name:      'data'                -- string   - Property name
	 *         val:       function () {},       -- function - Api method (or undefined if just an object
	 *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
	 *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
	 *       },
	 *       {
	 *         name:     'row'
	 *         val:       {},
	 *         methodExt: [ ... ],
	 *         propExt:   [
	 *           {
	 *             name:      'data'
	 *             val:       function () {},
	 *             methodExt: [ ... ],
	 *             propExt:   [ ... ]
	 *           },
	 *           ...
	 *         ]
	 *       }
	 *     ]
	 *
	 * @type {Array}
	 * @ignore
	 */
	var __apiStruct = [];
	
	
	/**
	 * `Array.prototype` reference.
	 *
	 * @type object
	 * @ignore
	 */
	var __arrayProto = Array.prototype;
	
	
	/**
	 * Abstraction for `context` parameter of the `Api` constructor to allow it to
	 * take several different forms for ease of use.
	 *
	 * Each of the input parameter types will be converted to a DataTables settings
	 * object where possible.
	 *
	 * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one
	 *   of:
	 *
	 *   * `string` - jQuery selector. Any DataTables' matching the given selector
	 *     with be found and used.
	 *   * `node` - `TABLE` node which has already been formed into a DataTable.
	 *   * `jQuery` - A jQuery object of `TABLE` nodes.
	 *   * `object` - DataTables settings object
	 *   * `DataTables.Api` - API instance
	 * @return {array|null} Matching DataTables settings objects. `null` or
	 *   `undefined` is returned if no matching DataTable is found.
	 * @ignore
	 */
	var _toSettings = function ( mixed )
	{
		var idx, jq;
		var settings = DataTable.settings;
		var tables = $.map( settings, function (el, i) {
			return el.nTable;
		} );
	
		if ( ! mixed ) {
			return [];
		}
		else if ( mixed.nTable && mixed.oApi ) {
			// DataTables settings object
			return [ mixed ];
		}
		else if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {
			// Table node
			idx = $.inArray( mixed, tables );
			return idx !== -1 ? [ settings[idx] ] : null;
		}
		else if ( mixed && typeof mixed.settings === 'function' ) {
			return mixed.settings().toArray();
		}
		else if ( typeof mixed === 'string' ) {
			// jQuery selector
			jq = $(mixed);
		}
		else if ( mixed instanceof $ ) {
			// jQuery object (also DataTables instance)
			jq = mixed;
		}
	
		if ( jq ) {
			return jq.map( function(i) {
				idx = $.inArray( this, tables );
				return idx !== -1 ? settings[idx] : null;
			} ).toArray();
		}
	};
	
	
	/**
	 * DataTables API class - used to control and interface with  one or more
	 * DataTables enhanced tables.
	 *
	 * The API class is heavily based on jQuery, presenting a chainable interface
	 * that you can use to interact with tables. Each instance of the API class has
	 * a "context" - i.e. the tables that it will operate on. This could be a single
	 * table, all tables on a page or a sub-set thereof.
	 *
	 * Additionally the API is designed to allow you to easily work with the data in
	 * the tables, retrieving and manipulating it as required. This is done by
	 * presenting the API class as an array like interface. The contents of the
	 * array depend upon the actions requested by each method (for example
	 * `rows().nodes()` will return an array of nodes, while `rows().data()` will
	 * return an array of objects or arrays depending upon your table's
	 * configuration). The API object has a number of array like methods (`push`,
	 * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,
	 * `unique` etc) to assist your working with the data held in a table.
	 *
	 * Most methods (those which return an Api instance) are chainable, which means
	 * the return from a method call also has all of the methods available that the
	 * top level object had. For example, these two calls are equivalent:
	 *
	 *     // Not chained
	 *     api.row.add( {...} );
	 *     api.draw();
	 *
	 *     // Chained
	 *     api.row.add( {...} ).draw();
	 *
	 * @class DataTable.Api
	 * @param {array|object|string|jQuery} context DataTable identifier. This is
	 *   used to define which DataTables enhanced tables this API will operate on.
	 *   Can be one of:
	 *
	 *   * `string` - jQuery selector. Any DataTables' matching the given selector
	 *     with be found and used.
	 *   * `node` - `TABLE` node which has already been formed into a DataTable.
	 *   * `jQuery` - A jQuery object of `TABLE` nodes.
	 *   * `object` - DataTables settings object
	 * @param {array} [data] Data to initialise the Api instance with.
	 *
	 * @example
	 *   // Direct initialisation during DataTables construction
	 *   var api = $('#example').DataTable();
	 *
	 * @example
	 *   // Initialisation using a DataTables jQuery object
	 *   var api = $('#example').dataTable().api();
	 *
	 * @example
	 *   // Initialisation as a constructor
	 *   var api = new $.fn.DataTable.Api( 'table.dataTable' );
	 */
	_Api = function ( context, data )
	{
		if ( ! (this instanceof _Api) ) {
			return new _Api( context, data );
		}
	
		var settings = [];
		var ctxSettings = function ( o ) {
			var a = _toSettings( o );
			if ( a ) {
				settings = settings.concat( a );
			}
		};
	
		if ( $.isArray( context ) ) {
			for ( var i=0, ien=context.length ; i<ien ; i++ ) {
				ctxSettings( context[i] );
			}
		}
		else {
			ctxSettings( context );
		}
	
		// Remove duplicates
		this.context = _unique( settings );
	
		// Initial data
		if ( data ) {
			$.merge( this, data );
		}
	
		// selector
		this.selector = {
			rows: null,
			cols: null,
			opts: null
		};
	
		_Api.extend( this, this, __apiStruct );
	};
	
	DataTable.Api = _Api;
	
	// Don't destroy the existing prototype, just extend it. Required for jQuery 2's
	// isPlainObject.
	$.extend( _Api.prototype, {
		any: function ()
		{
			return this.count() !== 0;
		},
	
	
		concat:  __arrayProto.concat,
	
	
		context: [], // array of table settings objects
	
	
		count: function ()
		{
			return this.flatten().length;
		},
	
	
		each: function ( fn )
		{
			for ( var i=0, ien=this.length ; i<ien; i++ ) {
				fn.call( this, this[i], i, this );
			}
	
			return this;
		},
	
	
		eq: function ( idx )
		{
			var ctx = this.context;
	
			return ctx.length > idx ?
				new _Api( ctx[idx], this[idx] ) :
				null;
		},
	
	
		filter: function ( fn )
		{
			var a = [];
	
			if ( __arrayProto.filter ) {
				a = __arrayProto.filter.call( this, fn, this );
			}
			else {
				// Compatibility for browsers without EMCA-252-5 (JS 1.6)
				for ( var i=0, ien=this.length ; i<ien ; i++ ) {
					if ( fn.call( this, this[i], i, this ) ) {
						a.push( this[i] );
					}
				}
			}
	
			return new _Api( this.context, a );
		},
	
	
		flatten: function ()
		{
			var a = [];
			return new _Api( this.context, a.concat.apply( a, this.toArray() ) );
		},
	
	
		join:    __arrayProto.join,
	
	
		indexOf: __arrayProto.indexOf || function (obj, start)
		{
			for ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {
				if ( this[i] === obj ) {
					return i;
				}
			}
			return -1;
		},
	
		iterator: function ( flatten, type, fn, alwaysNew ) {
			var
				a = [], ret,
				i, ien, j, jen,
				context = this.context,
				rows, items, item,
				selector = this.selector;
	
			// Argument shifting
			if ( typeof flatten === 'string' ) {
				alwaysNew = fn;
				fn = type;
				type = flatten;
				flatten = false;
			}
	
			for ( i=0, ien=context.length ; i<ien ; i++ ) {
				var apiInst = new _Api( context[i] );
	
				if ( type === 'table' ) {
					ret = fn.call( apiInst, context[i], i );
	
					if ( ret !== undefined ) {
						a.push( ret );
					}
				}
				else if ( type === 'columns' || type === 'rows' ) {
					// this has same length as context - one entry for each table
					ret = fn.call( apiInst, context[i], this[i], i );
	
					if ( ret !== undefined ) {
						a.push( ret );
					}
				}
				else if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {
					// columns and rows share the same structure.
					// 'this' is an array of column indexes for each context
					items = this[i];
	
					if ( type === 'column-rows' ) {
						rows = _selector_row_indexes( context[i], selector.opts );
					}
	
					for ( j=0, jen=items.length ; j<jen ; j++ ) {
						item = items[j];
	
						if ( type === 'cell' ) {
							ret = fn.call( apiInst, context[i], item.row, item.column, i, j );
						}
						else {
							ret = fn.call( apiInst, context[i], item, i, j, rows );
						}
	
						if ( ret !== undefined ) {
							a.push( ret );
						}
					}
				}
			}
	
			if ( a.length || alwaysNew ) {
				var api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );
				var apiSelector = api.selector;
				apiSelector.rows = selector.rows;
				apiSelector.cols = selector.cols;
				apiSelector.opts = selector.opts;
				return api;
			}
			return this;
		},
	
	
		lastIndexOf: __arrayProto.lastIndexOf || function (obj, start)
		{
			// Bit cheeky...
			return this.indexOf.apply( this.toArray.reverse(), arguments );
		},
	
	
		length:  0,
	
	
		map: function ( fn )
		{
			var a = [];
	
			if ( __arrayProto.map ) {
				a = __arrayProto.map.call( this, fn, this );
			}
			else {
				// Compatibility for browsers without EMCA-252-5 (JS 1.6)
				for ( var i=0, ien=this.length ; i<ien ; i++ ) {
					a.push( fn.call( this, this[i], i ) );
				}
			}
	
			return new _Api( this.context, a );
		},
	
	
		pluck: function ( prop )
		{
			return this.map( function ( el ) {
				return el[ prop ];
			} );
		},
	
		pop:     __arrayProto.pop,
	
	
		push:    __arrayProto.push,
	
	
		// Does not return an API instance
		reduce: __arrayProto.reduce || function ( fn, init )
		{
			return _fnReduce( this, fn, init, 0, this.length, 1 );
		},
	
	
		reduceRight: __arrayProto.reduceRight || function ( fn, init )
		{
			return _fnReduce( this, fn, init, this.length-1, -1, -1 );
		},
	
	
		reverse: __arrayProto.reverse,
	
	
		// Object with rows, columns and opts
		selector: null,
	
	
		shift:   __arrayProto.shift,
	
	
		slice: function () {
			return new _Api( this.context, this );
		},
	
	
		sort:    __arrayProto.sort, // ? name - order?
	
	
		splice:  __arrayProto.splice,
	
	
		toArray: function ()
		{
			return __arrayProto.slice.call( this );
		},
	
	
		to$: function ()
		{
			return $( this );
		},
	
	
		toJQuery: function ()
		{
			return $( this );
		},
	
	
		unique: function ()
		{
			return new _Api( this.context, _unique(this) );
		},
	
	
		unshift: __arrayProto.unshift
	} );
	
	
	_Api.extend = function ( scope, obj, ext )
	{
		// Only extend API instances and static properties of the API
		if ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {
			return;
		}
	
		var
			i, ien,
			j, jen,
			struct, inner,
			methodScoping = function ( scope, fn, struc ) {
				return function () {
					var ret = fn.apply( scope, arguments );
	
					// Method extension
					_Api.extend( ret, ret, struc.methodExt );
					return ret;
				};
			};
	
		for ( i=0, ien=ext.length ; i<ien ; i++ ) {
			struct = ext[i];
	
			// Value
			obj[ struct.name ] = typeof struct.val === 'function' ?
				methodScoping( scope, struct.val, struct ) :
				$.isPlainObject( struct.val ) ?
					{} :
					struct.val;
	
			obj[ struct.name ].__dt_wrapper = true;
	
			// Property extension
			_Api.extend( scope, obj[ struct.name ], struct.propExt );
		}
	};
	
	
	// @todo - Is there need for an augment function?
	// _Api.augment = function ( inst, name )
	// {
	// 	// Find src object in the structure from the name
	// 	var parts = name.split('.');
	
	// 	_Api.extend( inst, obj );
	// };
	
	
	//     [
	//       {
	//         name:      'data'                -- string   - Property name
	//         val:       function () {},       -- function - Api method (or undefined if just an object
	//         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
	//         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
	//       },
	//       {
	//         name:     'row'
	//         val:       {},
	//         methodExt: [ ... ],
	//         propExt:   [
	//           {
	//             name:      'data'
	//             val:       function () {},
	//             methodExt: [ ... ],
	//             propExt:   [ ... ]
	//           },
	//           ...
	//         ]
	//       }
	//     ]
	
	_Api.register = _api_register = function ( name, val )
	{
		if ( $.isArray( name ) ) {
			for ( var j=0, jen=name.length ; j<jen ; j++ ) {
				_Api.register( name[j], val );
			}
			return;
		}
	
		var
			i, ien,
			heir = name.split('.'),
			struct = __apiStruct,
			key, method;
	
		var find = function ( src, name ) {
			for ( var i=0, ien=src.length ; i<ien ; i++ ) {
				if ( src[i].name === name ) {
					return src[i];
				}
			}
			return null;
		};
	
		for ( i=0, ien=heir.length ; i<ien ; i++ ) {
			method = heir[i].indexOf('()') !== -1;
			key = method ?
				heir[i].replace('()', '') :
				heir[i];
	
			var src = find( struct, key );
			if ( ! src ) {
				src = {
					name:      key,
					val:       {},
					methodExt: [],
					propExt:   []
				};
				struct.push( src );
			}
	
			if ( i === ien-1 ) {
				src.val = val;
			}
			else {
				struct = method ?
					src.methodExt :
					src.propExt;
			}
		}
	};
	
	
	_Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {
		_Api.register( pluralName, val );
	
		_Api.register( singularName, function () {
			var ret = val.apply( this, arguments );
	
			if ( ret === this ) {
				// Returned item is the API instance that was passed in, return it
				return this;
			}
			else if ( ret instanceof _Api ) {
				// New API instance returned, want the value from the first item
				// in the returned array for the singular result.
				return ret.length ?
					$.isArray( ret[0] ) ?
						new _Api( ret.context, ret[0] ) : // Array results are 'enhanced'
						ret[0] :
					undefined;
			}
	
			// Non-API return - just fire it back
			return ret;
		} );
	};
	
	
	/**
	 * Selector for HTML tables. Apply the given selector to the give array of
	 * DataTables settings objects.
	 *
	 * @param {string|integer} [selector] jQuery selector string or integer
	 * @param  {array} Array of DataTables settings objects to be filtered
	 * @return {array}
	 * @ignore
	 */
	var __table_selector = function ( selector, a )
	{
		// Integer is used to pick out a table by index
		if ( typeof selector === 'number' ) {
			return [ a[ selector ] ];
		}
	
		// Perform a jQuery selector on the table nodes
		var nodes = $.map( a, function (el, i) {
			return el.nTable;
		} );
	
		return $(nodes)
			.filter( selector )
			.map( function (i) {
				// Need to translate back from the table node to the settings
				var idx = $.inArray( this, nodes );
				return a[ idx ];
			} )
			.toArray();
	};
	
	
	
	/**
	 * Context selector for the API's context (i.e. the tables the API instance
	 * refers to.
	 *
	 * @name    DataTable.Api#tables
	 * @param {string|integer} [selector] Selector to pick which tables the iterator
	 *   should operate on. If not given, all tables in the current context are
	 *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to
	 *   select multiple tables or as an integer to select a single table.
	 * @returns {DataTable.Api} Returns a new API instance if a selector is given.
	 */
	_api_register( 'tables()', function ( selector ) {
		// A new instance is created if there was a selector specified
		return selector ?
			new _Api( __table_selector( selector, this.context ) ) :
			this;
	} );
	
	
	_api_register( 'table()', function ( selector ) {
		var tables = this.tables( selector );
		var ctx = tables.context;
	
		// Truncate to the first matched table
		return ctx.length ?
			new _Api( ctx[0] ) :
			tables;
	} );
	
	
	_api_registerPlural( 'tables().nodes()', 'table().node()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTable;
		}, 1 );
	} );
	
	
	_api_registerPlural( 'tables().body()', 'table().body()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTBody;
		}, 1 );
	} );
	
	
	_api_registerPlural( 'tables().header()', 'table().header()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTHead;
		}, 1 );
	} );
	
	
	_api_registerPlural( 'tables().footer()', 'table().footer()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTFoot;
		}, 1 );
	} );
	
	
	_api_registerPlural( 'tables().containers()', 'table().container()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTableWrapper;
		}, 1 );
	} );
	
	
	
	/**
	 * Redraw the tables in the current context.
	 */
	_api_register( 'draw()', function ( paging ) {
		return this.iterator( 'table', function ( settings ) {
			if ( paging === 'page' ) {
				_fnDraw( settings );
			}
			else {
				if ( typeof paging === 'string' ) {
					paging = paging === 'full-hold' ?
						false :
						true;
				}
	
				_fnReDraw( settings, paging===false );
			}
		} );
	} );
	
	
	
	/**
	 * Get the current page index.
	 *
	 * @return {integer} Current page index (zero based)
	 *//**
	 * Set the current page.
	 *
	 * Note that if you attempt to show a page which does not exist, DataTables will
	 * not throw an error, but rather reset the paging.
	 *
	 * @param {integer|string} action The paging action to take. This can be one of:
	 *  * `integer` - The page index to jump to
	 *  * `string` - An action to take:
	 *    * `first` - Jump to first page.
	 *    * `next` - Jump to the next page
	 *    * `previous` - Jump to previous page
	 *    * `last` - Jump to the last page.
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'page()', function ( action ) {
		if ( action === undefined ) {
			return this.page.info().page; // not an expensive call
		}
	
		// else, have an action to take on all tables
		return this.iterator( 'table', function ( settings ) {
			_fnPageChange( settings, action );
		} );
	} );
	
	
	/**
	 * Paging information for the first table in the current context.
	 *
	 * If you require paging information for another table, use the `table()` method
	 * with a suitable selector.
	 *
	 * @return {object} Object with the following properties set:
	 *  * `page` - Current page index (zero based - i.e. the first page is `0`)
	 *  * `pages` - Total number of pages
	 *  * `start` - Display index for the first record shown on the current page
	 *  * `end` - Display index for the last record shown on the current page
	 *  * `length` - Display length (number of records). Note that generally `start
	 *    + length = end`, but this is not always true, for example if there are
	 *    only 2 records to show on the final page, with a length of 10.
	 *  * `recordsTotal` - Full data set length
	 *  * `recordsDisplay` - Data set length once the current filtering criterion
	 *    are applied.
	 */
	_api_register( 'page.info()', function ( action ) {
		if ( this.context.length === 0 ) {
			return undefined;
		}
	
		var
			settings   = this.context[0],
			start      = settings._iDisplayStart,
			len        = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,
			visRecords = settings.fnRecordsDisplay(),
			all        = len === -1;
	
		return {
			"page":           all ? 0 : Math.floor( start / len ),
			"pages":          all ? 1 : Math.ceil( visRecords / len ),
			"start":          start,
			"end":            settings.fnDisplayEnd(),
			"length":         len,
			"recordsTotal":   settings.fnRecordsTotal(),
			"recordsDisplay": visRecords,
			"serverSide":     _fnDataSource( settings ) === 'ssp'
		};
	} );
	
	
	/**
	 * Get the current page length.
	 *
	 * @return {integer} Current page length. Note `-1` indicates that all records
	 *   are to be shown.
	 *//**
	 * Set the current page length.
	 *
	 * @param {integer} Page length to set. Use `-1` to show all records.
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'page.len()', function ( len ) {
		// Note that we can't call this function 'length()' because `length`
		// is a Javascript property of functions which defines how many arguments
		// the function expects.
		if ( len === undefined ) {
			return this.context.length !== 0 ?
				this.context[0]._iDisplayLength :
				undefined;
		}
	
		// else, set the page length
		return this.iterator( 'table', function ( settings ) {
			_fnLengthChange( settings, len );
		} );
	} );
	
	
	
	var __reload = function ( settings, holdPosition, callback ) {
		// Use the draw event to trigger a callback
		if ( callback ) {
			var api = new _Api( settings );
	
			api.one( 'draw', function () {
				callback( api.ajax.json() );
			} );
		}
	
		if ( _fnDataSource( settings ) == 'ssp' ) {
			_fnReDraw( settings, holdPosition );
		}
		else {
			_fnProcessingDisplay( settings, true );
	
			// Cancel an existing request
			var xhr = settings.jqXHR;
			if ( xhr && xhr.readyState !== 4 ) {
				xhr.abort();
			}
	
			// Trigger xhr
			_fnBuildAjax( settings, [], function( json ) {
				_fnClearTable( settings );
	
				var data = _fnAjaxDataSrc( settings, json );
				for ( var i=0, ien=data.length ; i<ien ; i++ ) {
					_fnAddData( settings, data[i] );
				}
	
				_fnReDraw( settings, holdPosition );
				_fnProcessingDisplay( settings, false );
			} );
		}
	};
	
	
	/**
	 * Get the JSON response from the last Ajax request that DataTables made to the
	 * server. Note that this returns the JSON from the first table in the current
	 * context.
	 *
	 * @return {object} JSON received from the server.
	 */
	_api_register( 'ajax.json()', function () {
		var ctx = this.context;
	
		if ( ctx.length > 0 ) {
			return ctx[0].json;
		}
	
		// else return undefined;
	} );
	
	
	/**
	 * Get the data submitted in the last Ajax request
	 */
	_api_register( 'ajax.params()', function () {
		var ctx = this.context;
	
		if ( ctx.length > 0 ) {
			return ctx[0].oAjaxData;
		}
	
		// else return undefined;
	} );
	
	
	/**
	 * Reload tables from the Ajax data source. Note that this function will
	 * automatically re-draw the table when the remote data has been loaded.
	 *
	 * @param {boolean} [reset=true] Reset (default) or hold the current paging
	 *   position. A full re-sort and re-filter is performed when this method is
	 *   called, which is why the pagination reset is the default action.
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'ajax.reload()', function ( callback, resetPaging ) {
		return this.iterator( 'table', function (settings) {
			__reload( settings, resetPaging===false, callback );
		} );
	} );
	
	
	/**
	 * Get the current Ajax URL. Note that this returns the URL from the first
	 * table in the current context.
	 *
	 * @return {string} Current Ajax source URL
	 *//**
	 * Set the Ajax URL. Note that this will set the URL for all tables in the
	 * current context.
	 *
	 * @param {string} url URL to set.
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'ajax.url()', function ( url ) {
		var ctx = this.context;
	
		if ( url === undefined ) {
			// get
			if ( ctx.length === 0 ) {
				return undefined;
			}
			ctx = ctx[0];
	
			return ctx.ajax ?
				$.isPlainObject( ctx.ajax ) ?
					ctx.ajax.url :
					ctx.ajax :
				ctx.sAjaxSource;
		}
	
		// set
		return this.iterator( 'table', function ( settings ) {
			if ( $.isPlainObject( settings.ajax ) ) {
				settings.ajax.url = url;
			}
			else {
				settings.ajax = url;
			}
			// No need to consider sAjaxSource here since DataTables gives priority
			// to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any
			// value of `sAjaxSource` redundant.
		} );
	} );
	
	
	/**
	 * Load data from the newly set Ajax URL. Note that this method is only
	 * available when `ajax.url()` is used to set a URL. Additionally, this method
	 * has the same effect as calling `ajax.reload()` but is provided for
	 * convenience when setting a new URL. Like `ajax.reload()` it will
	 * automatically redraw the table once the remote data has been loaded.
	 *
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'ajax.url().load()', function ( callback, resetPaging ) {
		// Same as a reload, but makes sense to present it for easy access after a
		// url change
		return this.iterator( 'table', function ( ctx ) {
			__reload( ctx, resetPaging===false, callback );
		} );
	} );
	
	
	
	
	var _selector_run = function ( type, selector, selectFn, settings, opts )
	{
		var
			out = [], res,
			a, i, ien, j, jen,
			selectorType = typeof selector;
	
		// Can't just check for isArray here, as an API or jQuery instance might be
		// given with their array like look
		if ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {
			selector = [ selector ];
		}
	
		for ( i=0, ien=selector.length ; i<ien ; i++ ) {
			// Only split on simple strings - complex expressions will be jQuery selectors
			a = selector[i] && selector[i].split && ! selector[i].match(/[\[\(:]/) ?
				selector[i].split(',') :
				[ selector[i] ];
	
			for ( j=0, jen=a.length ; j<jen ; j++ ) {
				res = selectFn( typeof a[j] === 'string' ? $.trim(a[j]) : a[j] );
	
				if ( res && res.length ) {
					out = out.concat( res );
				}
			}
		}
	
		// selector extensions
		var ext = _ext.selector[ type ];
		if ( ext.length ) {
			for ( i=0, ien=ext.length ; i<ien ; i++ ) {
				out = ext[i]( settings, opts, out );
			}
		}
	
		return _unique( out );
	};
	
	
	var _selector_opts = function ( opts )
	{
		if ( ! opts ) {
			opts = {};
		}
	
		// Backwards compatibility for 1.9- which used the terminology filter rather
		// than search
		if ( opts.filter && opts.search === undefined ) {
			opts.search = opts.filter;
		}
	
		return $.extend( {
			search: 'none',
			order: 'current',
			page: 'all'
		}, opts );
	};
	
	
	var _selector_first = function ( inst )
	{
		// Reduce the API instance to the first item found
		for ( var i=0, ien=inst.length ; i<ien ; i++ ) {
			if ( inst[i].length > 0 ) {
				// Assign the first element to the first item in the instance
				// and truncate the instance and context
				inst[0] = inst[i];
				inst[0].length = 1;
				inst.length = 1;
				inst.context = [ inst.context[i] ];
	
				return inst;
			}
		}
	
		// Not found - return an empty instance
		inst.length = 0;
		return inst;
	};
	
	
	var _selector_row_indexes = function ( settings, opts )
	{
		var
			i, ien, tmp, a=[],
			displayFiltered = settings.aiDisplay,
			displayMaster = settings.aiDisplayMaster;
	
		var
			search = opts.search,  // none, applied, removed
			order  = opts.order,   // applied, current, index (original - compatibility with 1.9)
			page   = opts.page;    // all, current
	
		if ( _fnDataSource( settings ) == 'ssp' ) {
			// In server-side processing mode, most options are irrelevant since
			// rows not shown don't exist and the index order is the applied order
			// Removed is a special case - for consistency just return an empty
			// array
			return search === 'removed' ?
				[] :
				_range( 0, displayMaster.length );
		}
		else if ( page == 'current' ) {
			// Current page implies that order=current and fitler=applied, since it is
			// fairly senseless otherwise, regardless of what order and search actually
			// are
			for ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {
				a.push( displayFiltered[i] );
			}
		}
		else if ( order == 'current' || order == 'applied' ) {
			if ( search == 'none') {
				a = displayMaster.slice();
			}
			else if ( search == 'applied' ) {
				a = displayFiltered.slice();
			}
			else if ( search == 'removed' ) {
				// O(n+m) solution by creating a hash map
				var displayFilteredMap = {};
	
				for ( var i=0, ien=displayFiltered.length ; i<ien ; i++ ) {
					displayFilteredMap[displayFiltered[i]] = null;
				}
	
				a = $.map( displayMaster, function (el) {
					return ! displayFilteredMap.hasOwnProperty(el) ?
						el :
						null;
				} );
			}
		}
		else if ( order == 'index' || order == 'original' ) {
			for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
				if ( search == 'none' ) {
					a.push( i );
				}
				else { // applied | removed
					tmp = $.inArray( i, displayFiltered );
	
					if ((tmp === -1 && search == 'removed') ||
						(tmp >= 0   && search == 'applied') )
					{
						a.push( i );
					}
				}
			}
		}
	
		return a;
	};
	
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Rows
	 *
	 * {}          - no selector - use all available rows
	 * {integer}   - row aoData index
	 * {node}      - TR node
	 * {string}    - jQuery selector to apply to the TR elements
	 * {array}     - jQuery array of nodes, or simply an array of TR nodes
	 *
	 */
	var __row_selector = function ( settings, selector, opts )
	{
		var rows;
		var run = function ( sel ) {
			var selInt = _intVal( sel );
			var i, ien;
			var aoData = settings.aoData;
	
			// Short cut - selector is a number and no options provided (default is
			// all records, so no need to check if the index is in there, since it
			// must be - dev error if the index doesn't exist).
			if ( selInt !== null && ! opts ) {
				return [ selInt ];
			}
	
			if ( ! rows ) {
				rows = _selector_row_indexes( settings, opts );
			}
	
			if ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {
				// Selector - integer
				return [ selInt ];
			}
			else if ( sel === null || sel === undefined || sel === '' ) {
				// Selector - none
				return rows;
			}
	
			// Selector - function
			if ( typeof sel === 'function' ) {
				return $.map( rows, function (idx) {
					var row = aoData[ idx ];
					return sel( idx, row._aData, row.nTr ) ? idx : null;
				} );
			}
	
			// Selector - node
			if ( sel.nodeName ) {
				var rowIdx = sel._DT_RowIndex;  // Property added by DT for fast lookup
				var cellIdx = sel._DT_CellIndex;
	
				if ( rowIdx !== undefined ) {
					// Make sure that the row is actually still present in the table
					return aoData[ rowIdx ] && aoData[ rowIdx ].nTr === sel ?
						[ rowIdx ] :
						[];
				}
				else if ( cellIdx ) {
					return aoData[ cellIdx.row ] && aoData[ cellIdx.row ].nTr === sel ?
						[ cellIdx.row ] :
						[];
				}
				else {
					var host = $(sel).closest('*[data-dt-row]');
					return host.length ?
						[ host.data('dt-row') ] :
						[];
				}
			}
	
			// ID selector. Want to always be able to select rows by id, regardless
			// of if the tr element has been created or not, so can't rely upon
			// jQuery here - hence a custom implementation. This does not match
			// Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,
			// but to select it using a CSS selector engine (like Sizzle or
			// querySelect) it would need to need to be escaped for some characters.
			// DataTables simplifies this for row selectors since you can select
			// only a row. A # indicates an id any anything that follows is the id -
			// unescaped.
			if ( typeof sel === 'string' && sel.charAt(0) === '#' ) {
				// get row index from id
				var rowObj = settings.aIds[ sel.replace( /^#/, '' ) ];
				if ( rowObj !== undefined ) {
					return [ rowObj.idx ];
				}
	
				// need to fall through to jQuery in case there is DOM id that
				// matches
			}
			
			// Get nodes in the order from the `rows` array with null values removed
			var nodes = _removeEmpty(
				_pluck_order( settings.aoData, rows, 'nTr' )
			);
	
			// Selector - jQuery selector string, array of nodes or jQuery object/
			// As jQuery's .filter() allows jQuery objects to be passed in filter,
			// it also allows arrays, so this will cope with all three options
			return $(nodes)
				.filter( sel )
				.map( function () {
					return this._DT_RowIndex;
				} )
				.toArray();
		};
	
		return _selector_run( 'row', selector, run, settings, opts );
	};
	
	
	_api_register( 'rows()', function ( selector, opts ) {
		// argument shifting
		if ( selector === undefined ) {
			selector = '';
		}
		else if ( $.isPlainObject( selector ) ) {
			opts = selector;
			selector = '';
		}
	
		opts = _selector_opts( opts );
	
		var inst = this.iterator( 'table', function ( settings ) {
			return __row_selector( settings, selector, opts );
		}, 1 );
	
		// Want argument shifting here and in __row_selector?
		inst.selector.rows = selector;
		inst.selector.opts = opts;
	
		return inst;
	} );
	
	_api_register( 'rows().nodes()', function () {
		return this.iterator( 'row', function ( settings, row ) {
			return settings.aoData[ row ].nTr || undefined;
		}, 1 );
	} );
	
	_api_register( 'rows().data()', function () {
		return this.iterator( true, 'rows', function ( settings, rows ) {
			return _pluck_order( settings.aoData, rows, '_aData' );
		}, 1 );
	} );
	
	_api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {
		return this.iterator( 'row', function ( settings, row ) {
			var r = settings.aoData[ row ];
			return type === 'search' ? r._aFilterData : r._aSortData;
		}, 1 );
	} );
	
	_api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {
		return this.iterator( 'row', function ( settings, row ) {
			_fnInvalidate( settings, row, src );
		} );
	} );
	
	_api_registerPlural( 'rows().indexes()', 'row().index()', function () {
		return this.iterator( 'row', function ( settings, row ) {
			return row;
		}, 1 );
	} );
	
	_api_registerPlural( 'rows().ids()', 'row().id()', function ( hash ) {
		var a = [];
		var context = this.context;
	
		// `iterator` will drop undefined values, but in this case we want them
		for ( var i=0, ien=context.length ; i<ien ; i++ ) {
			for ( var j=0, jen=this[i].length ; j<jen ; j++ ) {
				var id = context[i].rowIdFn( context[i].aoData[ this[i][j] ]._aData );
				a.push( (hash === true ? '#' : '' )+ id );
			}
		}
	
		return new _Api( context, a );
	} );
	
	_api_registerPlural( 'rows().remove()', 'row().remove()', function () {
		var that = this;
	
		this.iterator( 'row', function ( settings, row, thatIdx ) {
			var data = settings.aoData;
			var rowData = data[ row ];
			var i, ien, j, jen;
			var loopRow, loopCells;
	
			data.splice( row, 1 );
	
			// Update the cached indexes
			for ( i=0, ien=data.length ; i<ien ; i++ ) {
				loopRow = data[i];
				loopCells = loopRow.anCells;
	
				// Rows
				if ( loopRow.nTr !== null ) {
					loopRow.nTr._DT_RowIndex = i;
				}
	
				// Cells
				if ( loopCells !== null ) {
					for ( j=0, jen=loopCells.length ; j<jen ; j++ ) {
						loopCells[j]._DT_CellIndex.row = i;
					}
				}
			}
	
			// Delete from the display arrays
			_fnDeleteIndex( settings.aiDisplayMaster, row );
			_fnDeleteIndex( settings.aiDisplay, row );
			_fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes
	
			// For server-side processing tables - subtract the deleted row from the count
			if ( settings._iRecordsDisplay > 0 ) {
				settings._iRecordsDisplay--;
			}
	
			// Check for an 'overflow' they case for displaying the table
			_fnLengthOverflow( settings );
	
			// Remove the row's ID reference if there is one
			var id = settings.rowIdFn( rowData._aData );
			if ( id !== undefined ) {
				delete settings.aIds[ id ];
			}
		} );
	
		this.iterator( 'table', function ( settings ) {
			for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
				settings.aoData[i].idx = i;
			}
		} );
	
		return this;
	} );
	
	
	_api_register( 'rows.add()', function ( rows ) {
		var newRows = this.iterator( 'table', function ( settings ) {
				var row, i, ien;
				var out = [];
	
				for ( i=0, ien=rows.length ; i<ien ; i++ ) {
					row = rows[i];
	
					if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
						out.push( _fnAddTr( settings, row )[0] );
					}
					else {
						out.push( _fnAddData( settings, row ) );
					}
				}
	
				return out;
			}, 1 );
	
		// Return an Api.rows() extended instance, so rows().nodes() etc can be used
		var modRows = this.rows( -1 );
		modRows.pop();
		$.merge( modRows, newRows );
	
		return modRows;
	} );
	
	
	
	
	
	/**
	 *
	 */
	_api_register( 'row()', function ( selector, opts ) {
		return _selector_first( this.rows( selector, opts ) );
	} );
	
	
	_api_register( 'row().data()', function ( data ) {
		var ctx = this.context;
	
		if ( data === undefined ) {
			// Get
			return ctx.length && this.length ?
				ctx[0].aoData[ this[0] ]._aData :
				undefined;
		}
	
		// Set
		var row = ctx[0].aoData[ this[0] ];
		row._aData = data;
	
		// If the DOM has an id, and the data source is an array
		if ( $.isArray( data ) && row.nTr.id ) {
			_fnSetObjectDataFn( ctx[0].rowId )( data, row.nTr.id );
		}
	
		// Automatically invalidate
		_fnInvalidate( ctx[0], this[0], 'data' );
	
		return this;
	} );
	
	
	_api_register( 'row().node()', function () {
		var ctx = this.context;
	
		return ctx.length && this.length ?
			ctx[0].aoData[ this[0] ].nTr || null :
			null;
	} );
	
	
	_api_register( 'row.add()', function ( row ) {
		// Allow a jQuery object to be passed in - only a single row is added from
		// it though - the first element in the set
		if ( row instanceof $ && row.length ) {
			row = row[0];
		}
	
		var rows = this.iterator( 'table', function ( settings ) {
			if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
				return _fnAddTr( settings, row )[0];
			}
			return _fnAddData( settings, row );
		} );
	
		// Return an Api.rows() extended instance, with the newly added row selected
		return this.row( rows[0] );
	} );
	
	
	
	var __details_add = function ( ctx, row, data, klass )
	{
		// Convert to array of TR elements
		var rows = [];
		var addRow = function ( r, k ) {
			// Recursion to allow for arrays of jQuery objects
			if ( $.isArray( r ) || r instanceof $ ) {
				for ( var i=0, ien=r.length ; i<ien ; i++ ) {
					addRow( r[i], k );
				}
				return;
			}
	
			// If we get a TR element, then just add it directly - up to the dev
			// to add the correct number of columns etc
			if ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {
				rows.push( r );
			}
			else {
				// Otherwise create a row with a wrapper
				var created = $('<tr><td/></tr>').addClass( k );
				$('td', created)
					.addClass( k )
					.html( r )
					[0].colSpan = _fnVisbleColumns( ctx );
	
				rows.push( created[0] );
			}
		};
	
		addRow( data, klass );
	
		if ( row._details ) {
			row._details.detach();
		}
	
		row._details = $(rows);
	
		// If the children were already shown, that state should be retained
		if ( row._detailsShow ) {
			row._details.insertAfter( row.nTr );
		}
	};
	
	
	var __details_remove = function ( api, idx )
	{
		var ctx = api.context;
	
		if ( ctx.length ) {
			var row = ctx[0].aoData[ idx !== undefined ? idx : api[0] ];
	
			if ( row && row._details ) {
				row._details.remove();
	
				row._detailsShow = undefined;
				row._details = undefined;
			}
		}
	};
	
	
	var __details_display = function ( api, show ) {
		var ctx = api.context;
	
		if ( ctx.length && api.length ) {
			var row = ctx[0].aoData[ api[0] ];
	
			if ( row._details ) {
				row._detailsShow = show;
	
				if ( show ) {
					row._details.insertAfter( row.nTr );
				}
				else {
					row._details.detach();
				}
	
				__details_events( ctx[0] );
			}
		}
	};
	
	
	var __details_events = function ( settings )
	{
		var api = new _Api( settings );
		var namespace = '.dt.DT_details';
		var drawEvent = 'draw'+namespace;
		var colvisEvent = 'column-visibility'+namespace;
		var destroyEvent = 'destroy'+namespace;
		var data = settings.aoData;
	
		api.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );
	
		if ( _pluck( data, '_details' ).length > 0 ) {
			// On each draw, insert the required elements into the document
			api.on( drawEvent, function ( e, ctx ) {
				if ( settings !== ctx ) {
					return;
				}
	
				api.rows( {page:'current'} ).eq(0).each( function (idx) {
					// Internal data grab
					var row = data[ idx ];
	
					if ( row._detailsShow ) {
						row._details.insertAfter( row.nTr );
					}
				} );
			} );
	
			// Column visibility change - update the colspan
			api.on( colvisEvent, function ( e, ctx, idx, vis ) {
				if ( settings !== ctx ) {
					return;
				}
	
				// Update the colspan for the details rows (note, only if it already has
				// a colspan)
				var row, visible = _fnVisbleColumns( ctx );
	
				for ( var i=0, ien=data.length ; i<ien ; i++ ) {
					row = data[i];
	
					if ( row._details ) {
						row._details.children('td[colspan]').attr('colspan', visible );
					}
				}
			} );
	
			// Table destroyed - nuke any child rows
			api.on( destroyEvent, function ( e, ctx ) {
				if ( settings !== ctx ) {
					return;
				}
	
				for ( var i=0, ien=data.length ; i<ien ; i++ ) {
					if ( data[i]._details ) {
						__details_remove( api, i );
					}
				}
			} );
		}
	};
	
	// Strings for the method names to help minification
	var _emp = '';
	var _child_obj = _emp+'row().child';
	var _child_mth = _child_obj+'()';
	
	// data can be:
	//  tr
	//  string
	//  jQuery or array of any of the above
	_api_register( _child_mth, function ( data, klass ) {
		var ctx = this.context;
	
		if ( data === undefined ) {
			// get
			return ctx.length && this.length ?
				ctx[0].aoData[ this[0] ]._details :
				undefined;
		}
		else if ( data === true ) {
			// show
			this.child.show();
		}
		else if ( data === false ) {
			// remove
			__details_remove( this );
		}
		else if ( ctx.length && this.length ) {
			// set
			__details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );
		}
	
		return this;
	} );
	
	
	_api_register( [
		_child_obj+'.show()',
		_child_mth+'.show()' // only when `child()` was called with parameters (without
	], function ( show ) {   // it returns an object and this method is not executed)
		__details_display( this, true );
		return this;
	} );
	
	
	_api_register( [
		_child_obj+'.hide()',
		_child_mth+'.hide()' // only when `child()` was called with parameters (without
	], function () {         // it returns an object and this method is not executed)
		__details_display( this, false );
		return this;
	} );
	
	
	_api_register( [
		_child_obj+'.remove()',
		_child_mth+'.remove()' // only when `child()` was called with parameters (without
	], function () {           // it returns an object and this method is not executed)
		__details_remove( this );
		return this;
	} );
	
	
	_api_register( _child_obj+'.isShown()', function () {
		var ctx = this.context;
	
		if ( ctx.length && this.length ) {
			// _detailsShown as false or undefined will fall through to return false
			return ctx[0].aoData[ this[0] ]._detailsShow || false;
		}
		return false;
	} );
	
	
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Columns
	 *
	 * {integer}           - column index (>=0 count from left, <0 count from right)
	 * "{integer}:visIdx"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)
	 * "{integer}:visible" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)
	 * "{string}:name"     - column name
	 * "{string}"          - jQuery selector on column header nodes
	 *
	 */
	
	// can be an array of these items, comma separated list, or an array of comma
	// separated lists
	
	var __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;
	
	
	// r1 and r2 are redundant - but it means that the parameters match for the
	// iterator callback in columns().data()
	var __columnData = function ( settings, column, r1, r2, rows ) {
		var a = [];
		for ( var row=0, ien=rows.length ; row<ien ; row++ ) {
			a.push( _fnGetCellData( settings, rows[row], column ) );
		}
		return a;
	};
	
	
	var __column_selector = function ( settings, selector, opts )
	{
		var
			columns = settings.aoColumns,
			names = _pluck( columns, 'sName' ),
			nodes = _pluck( columns, 'nTh' );
	
		var run = function ( s ) {
			var selInt = _intVal( s );
	
			// Selector - all
			if ( s === '' ) {
				return _range( columns.length );
			}
	
			// Selector - index
			if ( selInt !== null ) {
				return [ selInt >= 0 ?
					selInt : // Count from left
					columns.length + selInt // Count from right (+ because its a negative value)
				];
			}
	
			// Selector = function
			if ( typeof s === 'function' ) {
				var rows = _selector_row_indexes( settings, opts );
	
				return $.map( columns, function (col, idx) {
					return s(
							idx,
							__columnData( settings, idx, 0, 0, rows ),
							nodes[ idx ]
						) ? idx : null;
				} );
			}
	
			// jQuery or string selector
			var match = typeof s === 'string' ?
				s.match( __re_column_selector ) :
				'';
	
			if ( match ) {
				switch( match[2] ) {
					case 'visIdx':
					case 'visible':
						var idx = parseInt( match[1], 10 );
						// Visible index given, convert to column index
						if ( idx < 0 ) {
							// Counting from the right
							var visColumns = $.map( columns, function (col,i) {
								return col.bVisible ? i : null;
							} );
							return [ visColumns[ visColumns.length + idx ] ];
						}
						// Counting from the left
						return [ _fnVisibleToColumnIndex( settings, idx ) ];
	
					case 'name':
						// match by name. `names` is column index complete and in order
						return $.map( names, function (name, i) {
							return name === match[1] ? i : null;
						} );
	
					default:
						return [];
				}
			}
	
			// Cell in the table body
			if ( s.nodeName && s._DT_CellIndex ) {
				return [ s._DT_CellIndex.column ];
			}
	
			// jQuery selector on the TH elements for the columns
			var jqResult = $( nodes )
				.filter( s )
				.map( function () {
					return $.inArray( this, nodes ); // `nodes` is column index complete and in order
				} )
				.toArray();
	
			if ( jqResult.length || ! s.nodeName ) {
				return jqResult;
			}
	
			// Otherwise a node which might have a `dt-column` data attribute, or be
			// a child or such an element
			var host = $(s).closest('*[data-dt-column]');
			return host.length ?
				[ host.data('dt-column') ] :
				[];
		};
	
		return _selector_run( 'column', selector, run, settings, opts );
	};
	
	
	var __setColumnVis = function ( settings, column, vis ) {
		var
			cols = settings.aoColumns,
			col  = cols[ column ],
			data = settings.aoData,
			row, cells, i, ien, tr;
	
		// Get
		if ( vis === undefined ) {
			return col.bVisible;
		}
	
		// Set
		// No change
		if ( col.bVisible === vis ) {
			return;
		}
	
		if ( vis ) {
			// Insert column
			// Need to decide if we should use appendChild or insertBefore
			var insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );
	
			for ( i=0, ien=data.length ; i<ien ; i++ ) {
				tr = data[i].nTr;
				cells = data[i].anCells;
	
				if ( tr ) {
					// insertBefore can act like appendChild if 2nd arg is null
					tr.insertBefore( cells[ column ], cells[ insertBefore ] || null );
				}
			}
		}
		else {
			// Remove column
			$( _pluck( settings.aoData, 'anCells', column ) ).detach();
		}
	
		// Common actions
		col.bVisible = vis;
		_fnDrawHead( settings, settings.aoHeader );
		_fnDrawHead( settings, settings.aoFooter );
	
		// Update colspan for no records display. Child rows and extensions will use their own
		// listeners to do this - only need to update the empty table item here
		if ( ! settings.aiDisplay.length ) {
			$(settings.nTBody).find('td[colspan]').attr('colspan', _fnVisbleColumns(settings));
		}
	
		_fnSaveState( settings );
	};
	
	
	_api_register( 'columns()', function ( selector, opts ) {
		// argument shifting
		if ( selector === undefined ) {
			selector = '';
		}
		else if ( $.isPlainObject( selector ) ) {
			opts = selector;
			selector = '';
		}
	
		opts = _selector_opts( opts );
	
		var inst = this.iterator( 'table', function ( settings ) {
			return __column_selector( settings, selector, opts );
		}, 1 );
	
		// Want argument shifting here and in _row_selector?
		inst.selector.cols = selector;
		inst.selector.opts = opts;
	
		return inst;
	} );
	
	_api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {
		return this.iterator( 'column', function ( settings, column ) {
			return settings.aoColumns[column].nTh;
		}, 1 );
	} );
	
	_api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {
		return this.iterator( 'column', function ( settings, column ) {
			return settings.aoColumns[column].nTf;
		}, 1 );
	} );
	
	_api_registerPlural( 'columns().data()', 'column().data()', function () {
		return this.iterator( 'column-rows', __columnData, 1 );
	} );
	
	_api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {
		return this.iterator( 'column', function ( settings, column ) {
			return settings.aoColumns[column].mData;
		}, 1 );
	} );
	
	_api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {
		return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
			return _pluck_order( settings.aoData, rows,
				type === 'search' ? '_aFilterData' : '_aSortData', column
			);
		}, 1 );
	} );
	
	_api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {
		return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
			return _pluck_order( settings.aoData, rows, 'anCells', column ) ;
		}, 1 );
	} );
	
	_api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {
		var ret = this.iterator( 'column', function ( settings, column ) {
			if ( vis === undefined ) {
				return settings.aoColumns[ column ].bVisible;
			} // else
			__setColumnVis( settings, column, vis );
		} );
	
		// Group the column visibility changes
		if ( vis !== undefined ) {
			// Second loop once the first is done for events
			this.iterator( 'column', function ( settings, column ) {
				_fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis, calc] );
			} );
	
			if ( calc === undefined || calc ) {
				this.columns.adjust();
			}
		}
	
		return ret;
	} );
	
	_api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {
		return this.iterator( 'column', function ( settings, column ) {
			return type === 'visible' ?
				_fnColumnIndexToVisible( settings, column ) :
				column;
		}, 1 );
	} );
	
	_api_register( 'columns.adjust()', function () {
		return this.iterator( 'table', function ( settings ) {
			_fnAdjustColumnSizing( settings );
		}, 1 );
	} );
	
	_api_register( 'column.index()', function ( type, idx ) {
		if ( this.context.length !== 0 ) {
			var ctx = this.context[0];
	
			if ( type === 'fromVisible' || type === 'toData' ) {
				return _fnVisibleToColumnIndex( ctx, idx );
			}
			else if ( type === 'fromData' || type === 'toVisible' ) {
				return _fnColumnIndexToVisible( ctx, idx );
			}
		}
	} );
	
	_api_register( 'column()', function ( selector, opts ) {
		return _selector_first( this.columns( selector, opts ) );
	} );
	
	
	
	var __cell_selector = function ( settings, selector, opts )
	{
		var data = settings.aoData;
		var rows = _selector_row_indexes( settings, opts );
		var cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );
		var allCells = $( [].concat.apply([], cells) );
		var row;
		var columns = settings.aoColumns.length;
		var a, i, ien, j, o, host;
	
		var run = function ( s ) {
			var fnSelector = typeof s === 'function';
	
			if ( s === null || s === undefined || fnSelector ) {
				// All cells and function selectors
				a = [];
	
				for ( i=0, ien=rows.length ; i<ien ; i++ ) {
					row = rows[i];
	
					for ( j=0 ; j<columns ; j++ ) {
						o = {
							row: row,
							column: j
						};
	
						if ( fnSelector ) {
							// Selector - function
							host = data[ row ];
	
							if ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {
								a.push( o );
							}
						}
						else {
							// Selector - all
							a.push( o );
						}
					}
				}
	
				return a;
			}
			
			// Selector - index
			if ( $.isPlainObject( s ) ) {
				// Valid cell index and its in the array of selectable rows
				return s.column !== undefined && s.row !== undefined && $.inArray( s.row, rows ) !== -1 ?
					[s] :
					[];
			}
	
			// Selector - jQuery filtered cells
			var jqResult = allCells
				.filter( s )
				.map( function (i, el) {
					return { // use a new object, in case someone changes the values
						row:    el._DT_CellIndex.row,
						column: el._DT_CellIndex.column
	 				};
				} )
				.toArray();
	
			if ( jqResult.length || ! s.nodeName ) {
				return jqResult;
			}
	
			// Otherwise the selector is a node, and there is one last option - the
			// element might be a child of an element which has dt-row and dt-column
			// data attributes
			host = $(s).closest('*[data-dt-row]');
			return host.length ?
				[ {
					row: host.data('dt-row'),
					column: host.data('dt-column')
				} ] :
				[];
		};
	
		return _selector_run( 'cell', selector, run, settings, opts );
	};
	
	
	
	
	_api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {
		// Argument shifting
		if ( $.isPlainObject( rowSelector ) ) {
			// Indexes
			if ( rowSelector.row === undefined ) {
				// Selector options in first parameter
				opts = rowSelector;
				rowSelector = null;
			}
			else {
				// Cell index objects in first parameter
				opts = columnSelector;
				columnSelector = null;
			}
		}
		if ( $.isPlainObject( columnSelector ) ) {
			opts = columnSelector;
			columnSelector = null;
		}
	
		// Cell selector
		if ( columnSelector === null || columnSelector === undefined ) {
			return this.iterator( 'table', function ( settings ) {
				return __cell_selector( settings, rowSelector, _selector_opts( opts ) );
			} );
		}
	
		// Row + column selector
		var columns = this.columns( columnSelector );
		var rows = this.rows( rowSelector );
		var a, i, ien, j, jen;
	
		this.iterator( 'table', function ( settings, idx ) {
			a = [];
	
			for ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {
				for ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {
					a.push( {
						row:    rows[idx][i],
						column: columns[idx][j]
					} );
				}
			}
		}, 1 );
	
	    // Now pass through the cell selector for options
	    var cells = this.cells( a, opts );
	
		$.extend( cells.selector, {
			cols: columnSelector,
			rows: rowSelector,
			opts: opts
		} );
	
		return cells;
	} );
	
	
	_api_registerPlural( 'cells().nodes()', 'cell().node()', function () {
		return this.iterator( 'cell', function ( settings, row, column ) {
			var data = settings.aoData[ row ];
	
			return data && data.anCells ?
				data.anCells[ column ] :
				undefined;
		}, 1 );
	} );
	
	
	_api_register( 'cells().data()', function () {
		return this.iterator( 'cell', function ( settings, row, column ) {
			return _fnGetCellData( settings, row, column );
		}, 1 );
	} );
	
	
	_api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {
		type = type === 'search' ? '_aFilterData' : '_aSortData';
	
		return this.iterator( 'cell', function ( settings, row, column ) {
			return settings.aoData[ row ][ type ][ column ];
		}, 1 );
	} );
	
	
	_api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {
		return this.iterator( 'cell', function ( settings, row, column ) {
			return _fnGetCellData( settings, row, column, type );
		}, 1 );
	} );
	
	
	_api_registerPlural( 'cells().indexes()', 'cell().index()', function () {
		return this.iterator( 'cell', function ( settings, row, column ) {
			return {
				row: row,
				column: column,
				columnVisible: _fnColumnIndexToVisible( settings, column )
			};
		}, 1 );
	} );
	
	
	_api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {
		return this.iterator( 'cell', function ( settings, row, column ) {
			_fnInvalidate( settings, row, src, column );
		} );
	} );
	
	
	
	_api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {
		return _selector_first( this.cells( rowSelector, columnSelector, opts ) );
	} );
	
	
	_api_register( 'cell().data()', function ( data ) {
		var ctx = this.context;
		var cell = this[0];
	
		if ( data === undefined ) {
			// Get
			return ctx.length && cell.length ?
				_fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :
				undefined;
		}
	
		// Set
		_fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );
		_fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );
	
		return this;
	} );
	
	
	
	/**
	 * Get current ordering (sorting) that has been applied to the table.
	 *
	 * @returns {array} 2D array containing the sorting information for the first
	 *   table in the current context. Each element in the parent array represents
	 *   a column being sorted upon (i.e. multi-sorting with two columns would have
	 *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is
	 *   the column index that the sorting condition applies to, the second is the
	 *   direction of the sort (`desc` or `asc`) and, optionally, the third is the
	 *   index of the sorting order from the `column.sorting` initialisation array.
	 *//**
	 * Set the ordering for the table.
	 *
	 * @param {integer} order Column index to sort upon.
	 * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)
	 * @returns {DataTables.Api} this
	 *//**
	 * Set the ordering for the table.
	 *
	 * @param {array} order 1D array of sorting information to be applied.
	 * @param {array} [...] Optional additional sorting conditions
	 * @returns {DataTables.Api} this
	 *//**
	 * Set the ordering for the table.
	 *
	 * @param {array} order 2D array of sorting information to be applied.
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'order()', function ( order, dir ) {
		var ctx = this.context;
	
		if ( order === undefined ) {
			// get
			return ctx.length !== 0 ?
				ctx[0].aaSorting :
				undefined;
		}
	
		// set
		if ( typeof order === 'number' ) {
			// Simple column / direction passed in
			order = [ [ order, dir ] ];
		}
		else if ( order.length && ! $.isArray( order[0] ) ) {
			// Arguments passed in (list of 1D arrays)
			order = Array.prototype.slice.call( arguments );
		}
		// otherwise a 2D array was passed in
	
		return this.iterator( 'table', function ( settings ) {
			settings.aaSorting = order.slice();
		} );
	} );
	
	
	/**
	 * Attach a sort listener to an element for a given column
	 *
	 * @param {node|jQuery|string} node Identifier for the element(s) to attach the
	 *   listener to. This can take the form of a single DOM node, a jQuery
	 *   collection of nodes or a jQuery selector which will identify the node(s).
	 * @param {integer} column the column that a click on this node will sort on
	 * @param {function} [callback] callback function when sort is run
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'order.listener()', function ( node, column, callback ) {
		return this.iterator( 'table', function ( settings ) {
			_fnSortAttachListener( settings, node, column, callback );
		} );
	} );
	
	
	_api_register( 'order.fixed()', function ( set ) {
		if ( ! set ) {
			var ctx = this.context;
			var fixed = ctx.length ?
				ctx[0].aaSortingFixed :
				undefined;
	
			return $.isArray( fixed ) ?
				{ pre: fixed } :
				fixed;
		}
	
		return this.iterator( 'table', function ( settings ) {
			settings.aaSortingFixed = $.extend( true, {}, set );
		} );
	} );
	
	
	// Order by the selected column(s)
	_api_register( [
		'columns().order()',
		'column().order()'
	], function ( dir ) {
		var that = this;
	
		return this.iterator( 'table', function ( settings, i ) {
			var sort = [];
	
			$.each( that[i], function (j, col) {
				sort.push( [ col, dir ] );
			} );
	
			settings.aaSorting = sort;
		} );
	} );
	
	
	
	_api_register( 'search()', function ( input, regex, smart, caseInsen ) {
		var ctx = this.context;
	
		if ( input === undefined ) {
			// get
			return ctx.length !== 0 ?
				ctx[0].oPreviousSearch.sSearch :
				undefined;
		}
	
		// set
		return this.iterator( 'table', function ( settings ) {
			if ( ! settings.oFeatures.bFilter ) {
				return;
			}
	
			_fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {
				"sSearch": input+"",
				"bRegex":  regex === null ? false : regex,
				"bSmart":  smart === null ? true  : smart,
				"bCaseInsensitive": caseInsen === null ? true : caseInsen
			} ), 1 );
		} );
	} );
	
	
	_api_registerPlural(
		'columns().search()',
		'column().search()',
		function ( input, regex, smart, caseInsen ) {
			return this.iterator( 'column', function ( settings, column ) {
				var preSearch = settings.aoPreSearchCols;
	
				if ( input === undefined ) {
					// get
					return preSearch[ column ].sSearch;
				}
	
				// set
				if ( ! settings.oFeatures.bFilter ) {
					return;
				}
	
				$.extend( preSearch[ column ], {
					"sSearch": input+"",
					"bRegex":  regex === null ? false : regex,
					"bSmart":  smart === null ? true  : smart,
					"bCaseInsensitive": caseInsen === null ? true : caseInsen
				} );
	
				_fnFilterComplete( settings, settings.oPreviousSearch, 1 );
			} );
		}
	);
	
	/*
	 * State API methods
	 */
	
	_api_register( 'state()', function () {
		return this.context.length ?
			this.context[0].oSavedState :
			null;
	} );
	
	
	_api_register( 'state.clear()', function () {
		return this.iterator( 'table', function ( settings ) {
			// Save an empty object
			settings.fnStateSaveCallback.call( settings.oInstance, settings, {} );
		} );
	} );
	
	
	_api_register( 'state.loaded()', function () {
		return this.context.length ?
			this.context[0].oLoadedState :
			null;
	} );
	
	
	_api_register( 'state.save()', function () {
		return this.iterator( 'table', function ( settings ) {
			_fnSaveState( settings );
		} );
	} );
	
	
	
	/**
	 * Provide a common method for plug-ins to check the version of DataTables being
	 * used, in order to ensure compatibility.
	 *
	 *  @param {string} version Version string to check for, in the format "X.Y.Z".
	 *    Note that the formats "X" and "X.Y" are also acceptable.
	 *  @returns {boolean} true if this version of DataTables is greater or equal to
	 *    the required version, or false if this version of DataTales is not
	 *    suitable
	 *  @static
	 *  @dtopt API-Static
	 *
	 *  @example
	 *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );
	 */
	DataTable.versionCheck = DataTable.fnVersionCheck = function( version )
	{
		var aThis = DataTable.version.split('.');
		var aThat = version.split('.');
		var iThis, iThat;
	
		for ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {
			iThis = parseInt( aThis[i], 10 ) || 0;
			iThat = parseInt( aThat[i], 10 ) || 0;
	
			// Parts are the same, keep comparing
			if (iThis === iThat) {
				continue;
			}
	
			// Parts are different, return immediately
			return iThis > iThat;
		}
	
		return true;
	};
	
	
	/**
	 * Check if a `<table>` node is a DataTable table already or not.
	 *
	 *  @param {node|jquery|string} table Table node, jQuery object or jQuery
	 *      selector for the table to test. Note that if more than more than one
	 *      table is passed on, only the first will be checked
	 *  @returns {boolean} true the table given is a DataTable, or false otherwise
	 *  @static
	 *  @dtopt API-Static
	 *
	 *  @example
	 *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {
	 *      $('#example').dataTable();
	 *    }
	 */
	DataTable.isDataTable = DataTable.fnIsDataTable = function ( table )
	{
		var t = $(table).get(0);
		var is = false;
	
		if ( table instanceof DataTable.Api ) {
			return true;
		}
	
		$.each( DataTable.settings, function (i, o) {
			var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;
			var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;
	
			if ( o.nTable === t || head === t || foot === t ) {
				is = true;
			}
		} );
	
		return is;
	};
	
	
	/**
	 * Get all DataTable tables that have been initialised - optionally you can
	 * select to get only currently visible tables.
	 *
	 *  @param {boolean} [visible=false] Flag to indicate if you want all (default)
	 *    or visible tables only.
	 *  @returns {array} Array of `table` nodes (not DataTable instances) which are
	 *    DataTables
	 *  @static
	 *  @dtopt API-Static
	 *
	 *  @example
	 *    $.each( $.fn.dataTable.tables(true), function () {
	 *      $(table).DataTable().columns.adjust();
	 *    } );
	 */
	DataTable.tables = DataTable.fnTables = function ( visible )
	{
		var api = false;
	
		if ( $.isPlainObject( visible ) ) {
			api = visible.api;
			visible = visible.visible;
		}
	
		var a = $.map( DataTable.settings, function (o) {
			if ( !visible || (visible && $(o.nTable).is(':visible')) ) {
				return o.nTable;
			}
		} );
	
		return api ?
			new _Api( a ) :
			a;
	};
	
	
	/**
	 * Convert from camel case parameters to Hungarian notation. This is made public
	 * for the extensions to provide the same ability as DataTables core to accept
	 * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase
	 * parameters.
	 *
	 *  @param {object} src The model object which holds all parameters that can be
	 *    mapped.
	 *  @param {object} user The object to convert from camel case to Hungarian.
	 *  @param {boolean} force When set to `true`, properties which already have a
	 *    Hungarian value in the `user` object will be overwritten. Otherwise they
	 *    won't be.
	 */
	DataTable.camelToHungarian = _fnCamelToHungarian;
	
	
	
	/**
	 *
	 */
	_api_register( '$()', function ( selector, opts ) {
		var
			rows   = this.rows( opts ).nodes(), // Get all rows
			jqRows = $(rows);
	
		return $( [].concat(
			jqRows.filter( selector ).toArray(),
			jqRows.find( selector ).toArray()
		) );
	} );
	
	
	// jQuery functions to operate on the tables
	$.each( [ 'on', 'one', 'off' ], function (i, key) {
		_api_register( key+'()', function ( /* event, handler */ ) {
			var args = Array.prototype.slice.call(arguments);
	
			// Add the `dt` namespace automatically if it isn't already present
			args[0] = $.map( args[0].split( /\s/ ), function ( e ) {
				return ! e.match(/\.dt\b/) ?
					e+'.dt' :
					e;
				} ).join( ' ' );
	
			var inst = $( this.tables().nodes() );
			inst[key].apply( inst, args );
			return this;
		} );
	} );
	
	
	_api_register( 'clear()', function () {
		return this.iterator( 'table', function ( settings ) {
			_fnClearTable( settings );
		} );
	} );
	
	
	_api_register( 'settings()', function () {
		return new _Api( this.context, this.context );
	} );
	
	
	_api_register( 'init()', function () {
		var ctx = this.context;
		return ctx.length ? ctx[0].oInit : null;
	} );
	
	
	_api_register( 'data()', function () {
		return this.iterator( 'table', function ( settings ) {
			return _pluck( settings.aoData, '_aData' );
		} ).flatten();
	} );
	
	
	_api_register( 'destroy()', function ( remove ) {
		remove = remove || false;
	
		return this.iterator( 'table', function ( settings ) {
			var orig      = settings.nTableWrapper.parentNode;
			var classes   = settings.oClasses;
			var table     = settings.nTable;
			var tbody     = settings.nTBody;
			var thead     = settings.nTHead;
			var tfoot     = settings.nTFoot;
			var jqTable   = $(table);
			var jqTbody   = $(tbody);
			var jqWrapper = $(settings.nTableWrapper);
			var rows      = $.map( settings.aoData, function (r) { return r.nTr; } );
			var i, ien;
	
			// Flag to note that the table is currently being destroyed - no action
			// should be taken
			settings.bDestroying = true;
	
			// Fire off the destroy callbacks for plug-ins etc
			_fnCallbackFire( settings, "aoDestroyCallback", "destroy", [settings] );
	
			// If not being removed from the document, make all columns visible
			if ( ! remove ) {
				new _Api( settings ).columns().visible( true );
			}
	
			// Blitz all `DT` namespaced events (these are internal events, the
			// lowercase, `dt` events are user subscribed and they are responsible
			// for removing them
			jqWrapper.off('.DT').find(':not(tbody *)').off('.DT');
			$(window).off('.DT-'+settings.sInstance);
	
			// When scrolling we had to break the table up - restore it
			if ( table != thead.parentNode ) {
				jqTable.children('thead').detach();
				jqTable.append( thead );
			}
	
			if ( tfoot && table != tfoot.parentNode ) {
				jqTable.children('tfoot').detach();
				jqTable.append( tfoot );
			}
	
			settings.aaSorting = [];
			settings.aaSortingFixed = [];
			_fnSortingClasses( settings );
	
			$( rows ).removeClass( settings.asStripeClasses.join(' ') );
	
			$('th, td', thead).removeClass( classes.sSortable+' '+
				classes.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone
			);
	
			// Add the TR elements back into the table in their original order
			jqTbody.children().detach();
			jqTbody.append( rows );
	
			// Remove the DataTables generated nodes, events and classes
			var removedMethod = remove ? 'remove' : 'detach';
			jqTable[ removedMethod ]();
			jqWrapper[ removedMethod ]();
	
			// If we need to reattach the table to the document
			if ( ! remove && orig ) {
				// insertBefore acts like appendChild if !arg[1]
				orig.insertBefore( table, settings.nTableReinsertBefore );
	
				// Restore the width of the original table - was read from the style property,
				// so we can restore directly to that
				jqTable
					.css( 'width', settings.sDestroyWidth )
					.removeClass( classes.sTable );
	
				// If the were originally stripe classes - then we add them back here.
				// Note this is not fool proof (for example if not all rows had stripe
				// classes - but it's a good effort without getting carried away
				ien = settings.asDestroyStripes.length;
	
				if ( ien ) {
					jqTbody.children().each( function (i) {
						$(this).addClass( settings.asDestroyStripes[i % ien] );
					} );
				}
			}
	
			/* Remove the settings object from the settings array */
			var idx = $.inArray( settings, DataTable.settings );
			if ( idx !== -1 ) {
				DataTable.settings.splice( idx, 1 );
			}
		} );
	} );
	
	
	// Add the `every()` method for rows, columns and cells in a compact form
	$.each( [ 'column', 'row', 'cell' ], function ( i, type ) {
		_api_register( type+'s().every()', function ( fn ) {
			var opts = this.selector.opts;
			var api = this;
	
			return this.iterator( type, function ( settings, arg1, arg2, arg3, arg4 ) {
				// Rows and columns:
				//  arg1 - index
				//  arg2 - table counter
				//  arg3 - loop counter
				//  arg4 - undefined
				// Cells:
				//  arg1 - row index
				//  arg2 - column index
				//  arg3 - table counter
				//  arg4 - loop counter
				fn.call(
					api[ type ](
						arg1,
						type==='cell' ? arg2 : opts,
						type==='cell' ? opts : undefined
					),
					arg1, arg2, arg3, arg4
				);
			} );
		} );
	} );
	
	
	// i18n method for extensions to be able to use the language object from the
	// DataTable
	_api_register( 'i18n()', function ( token, def, plural ) {
		var ctx = this.context[0];
		var resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );
	
		if ( resolved === undefined ) {
			resolved = def;
		}
	
		if ( plural !== undefined && $.isPlainObject( resolved ) ) {
			resolved = resolved[ plural ] !== undefined ?
				resolved[ plural ] :
				resolved._;
		}
	
		return resolved.replace( '%d', plural ); // nb: plural might be undefined,
	} );

	/**
	 * Version string for plug-ins to check compatibility. Allowed format is
	 * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used
	 * only for non-release builds. See http://semver.org/ for more information.
	 *  @member
	 *  @type string
	 *  @default Version number
	 */
	DataTable.version = "1.10.18";

	/**
	 * Private data store, containing all of the settings objects that are
	 * created for the tables on a given page.
	 *
	 * Note that the `DataTable.settings` object is aliased to
	 * `jQuery.fn.dataTableExt` through which it may be accessed and
	 * manipulated, or `jQuery.fn.dataTable.settings`.
	 *  @member
	 *  @type array
	 *  @default []
	 *  @private
	 */
	DataTable.settings = [];

	/**
	 * Object models container, for the various models that DataTables has
	 * available to it. These models define the objects that are used to hold
	 * the active state and configuration of the table.
	 *  @namespace
	 */
	DataTable.models = {};
	
	
	
	/**
	 * Template object for the way in which DataTables holds information about
	 * search information for the global filter and individual column filters.
	 *  @namespace
	 */
	DataTable.models.oSearch = {
		/**
		 * Flag to indicate if the filtering should be case insensitive or not
		 *  @type boolean
		 *  @default true
		 */
		"bCaseInsensitive": true,
	
		/**
		 * Applied search term
		 *  @type string
		 *  @default <i>Empty string</i>
		 */
		"sSearch": "",
	
		/**
		 * Flag to indicate if the search term should be interpreted as a
		 * regular expression (true) or not (false) and therefore and special
		 * regex characters escaped.
		 *  @type boolean
		 *  @default false
		 */
		"bRegex": false,
	
		/**
		 * Flag to indicate if DataTables is to use its smart filtering or not.
		 *  @type boolean
		 *  @default true
		 */
		"bSmart": true
	};
	
	
	
	
	/**
	 * Template object for the way in which DataTables holds information about
	 * each individual row. This is the object format used for the settings
	 * aoData array.
	 *  @namespace
	 */
	DataTable.models.oRow = {
		/**
		 * TR element for the row
		 *  @type node
		 *  @default null
		 */
		"nTr": null,
	
		/**
		 * Array of TD elements for each row. This is null until the row has been
		 * created.
		 *  @type array nodes
		 *  @default []
		 */
		"anCells": null,
	
		/**
		 * Data object from the original data source for the row. This is either
		 * an array if using the traditional form of DataTables, or an object if
		 * using mData options. The exact type will depend on the passed in
		 * data from the data source, or will be an array if using DOM a data
		 * source.
		 *  @type array|object
		 *  @default []
		 */
		"_aData": [],
	
		/**
		 * Sorting data cache - this array is ostensibly the same length as the
		 * number of columns (although each index is generated only as it is
		 * needed), and holds the data that is used for sorting each column in the
		 * row. We do this cache generation at the start of the sort in order that
		 * the formatting of the sort data need be done only once for each cell
		 * per sort. This array should not be read from or written to by anything
		 * other than the master sorting methods.
		 *  @type array
		 *  @default null
		 *  @private
		 */
		"_aSortData": null,
	
		/**
		 * Per cell filtering data cache. As per the sort data cache, used to
		 * increase the performance of the filtering in DataTables
		 *  @type array
		 *  @default null
		 *  @private
		 */
		"_aFilterData": null,
	
		/**
		 * Filtering data cache. This is the same as the cell filtering cache, but
		 * in this case a string rather than an array. This is easily computed with
		 * a join on `_aFilterData`, but is provided as a cache so the join isn't
		 * needed on every search (memory traded for performance)
		 *  @type array
		 *  @default null
		 *  @private
		 */
		"_sFilterRow": null,
	
		/**
		 * Cache of the class name that DataTables has applied to the row, so we
		 * can quickly look at this variable rather than needing to do a DOM check
		 * on className for the nTr property.
		 *  @type string
		 *  @default <i>Empty string</i>
		 *  @private
		 */
		"_sRowStripe": "",
	
		/**
		 * Denote if the original data source was from the DOM, or the data source
		 * object. This is used for invalidating data, so DataTables can
		 * automatically read data from the original source, unless uninstructed
		 * otherwise.
		 *  @type string
		 *  @default null
		 *  @private
		 */
		"src": null,
	
		/**
		 * Index in the aoData array. This saves an indexOf lookup when we have the
		 * object, but want to know the index
		 *  @type integer
		 *  @default -1
		 *  @private
		 */
		"idx": -1
	};
	
	
	/**
	 * Template object for the column information object in DataTables. This object
	 * is held in the settings aoColumns array and contains all the information that
	 * DataTables needs about each individual column.
	 *
	 * Note that this object is related to {@link DataTable.defaults.column}
	 * but this one is the internal data store for DataTables's cache of columns.
	 * It should NOT be manipulated outside of DataTables. Any configuration should
	 * be done through the initialisation options.
	 *  @namespace
	 */
	DataTable.models.oColumn = {
		/**
		 * Column index. This could be worked out on-the-fly with $.inArray, but it
		 * is faster to just hold it as a variable
		 *  @type integer
		 *  @default null
		 */
		"idx": null,
	
		/**
		 * A list of the columns that sorting should occur on when this column
		 * is sorted. That this property is an array allows multi-column sorting
		 * to be defined for a column (for example first name / last name columns
		 * would benefit from this). The values are integers pointing to the
		 * columns to be sorted on (typically it will be a single integer pointing
		 * at itself, but that doesn't need to be the case).
		 *  @type array
		 */
		"aDataSort": null,
	
		/**
		 * Define the sorting directions that are applied to the column, in sequence
		 * as the column is repeatedly sorted upon - i.e. the first value is used
		 * as the sorting direction when the column if first sorted (clicked on).
		 * Sort it again (click again) and it will move on to the next index.
		 * Repeat until loop.
		 *  @type array
		 */
		"asSorting": null,
	
		/**
		 * Flag to indicate if the column is searchable, and thus should be included
		 * in the filtering or not.
		 *  @type boolean
		 */
		"bSearchable": null,
	
		/**
		 * Flag to indicate if the column is sortable or not.
		 *  @type boolean
		 */
		"bSortable": null,
	
		/**
		 * Flag to indicate if the column is currently visible in the table or not
		 *  @type boolean
		 */
		"bVisible": null,
	
		/**
		 * Store for manual type assignment using the `column.type` option. This
		 * is held in store so we can manipulate the column's `sType` property.
		 *  @type string
		 *  @default null
		 *  @private
		 */
		"_sManualType": null,
	
		/**
		 * Flag to indicate if HTML5 data attributes should be used as the data
		 * source for filtering or sorting. True is either are.
		 *  @type boolean
		 *  @default false
		 *  @private
		 */
		"_bAttrSrc": false,
	
		/**
		 * Developer definable function that is called whenever a cell is created (Ajax source,
		 * etc) or processed for input (DOM source). This can be used as a compliment to mRender
		 * allowing you to modify the DOM element (add background colour for example) when the
		 * element is available.
		 *  @type function
		 *  @param {element} nTd The TD node that has been created
		 *  @param {*} sData The Data for the cell
		 *  @param {array|object} oData The data for the whole row
		 *  @param {int} iRow The row index for the aoData data store
		 *  @default null
		 */
		"fnCreatedCell": null,
	
		/**
		 * Function to get data from a cell in a column. You should <b>never</b>
		 * access data directly through _aData internally in DataTables - always use
		 * the method attached to this property. It allows mData to function as
		 * required. This function is automatically assigned by the column
		 * initialisation method
		 *  @type function
		 *  @param {array|object} oData The data array/object for the array
		 *    (i.e. aoData[]._aData)
		 *  @param {string} sSpecific The specific data type you want to get -
		 *    'display', 'type' 'filter' 'sort'
		 *  @returns {*} The data for the cell from the given row's data
		 *  @default null
		 */
		"fnGetData": null,
	
		/**
		 * Function to set data for a cell in the column. You should <b>never</b>
		 * set the data directly to _aData internally in DataTables - always use
		 * this method. It allows mData to function as required. This function
		 * is automatically assigned by the column initialisation method
		 *  @type function
		 *  @param {array|object} oData The data array/object for the array
		 *    (i.e. aoData[]._aData)
		 *  @param {*} sValue Value to set
		 *  @default null
		 */
		"fnSetData": null,
	
		/**
		 * Property to read the value for the cells in the column from the data
		 * source array / object. If null, then the default content is used, if a
		 * function is given then the return from the function is used.
		 *  @type function|int|string|null
		 *  @default null
		 */
		"mData": null,
	
		/**
		 * Partner property to mData which is used (only when defined) to get
		 * the data - i.e. it is basically the same as mData, but without the
		 * 'set' option, and also the data fed to it is the result from mData.
		 * This is the rendering method to match the data method of mData.
		 *  @type function|int|string|null
		 *  @default null
		 */
		"mRender": null,
	
		/**
		 * Unique header TH/TD element for this column - this is what the sorting
		 * listener is attached to (if sorting is enabled.)
		 *  @type node
		 *  @default null
		 */
		"nTh": null,
	
		/**
		 * Unique footer TH/TD element for this column (if there is one). Not used
		 * in DataTables as such, but can be used for plug-ins to reference the
		 * footer for each column.
		 *  @type node
		 *  @default null
		 */
		"nTf": null,
	
		/**
		 * The class to apply to all TD elements in the table's TBODY for the column
		 *  @type string
		 *  @default null
		 */
		"sClass": null,
	
		/**
		 * When DataTables calculates the column widths to assign to each column,
		 * it finds the longest string in each column and then constructs a
		 * temporary table and reads the widths from that. The problem with this
		 * is that "mmm" is much wider then "iiii", but the latter is a longer
		 * string - thus the calculation can go wrong (doing it properly and putting
		 * it into an DOM object and measuring that is horribly(!) slow). Thus as
		 * a "work around" we provide this option. It will append its value to the
		 * text that is found to be the longest string for the column - i.e. padding.
		 *  @type string
		 */
		"sContentPadding": null,
	
		/**
		 * Allows a default value to be given for a column's data, and will be used
		 * whenever a null data source is encountered (this can be because mData
		 * is set to null, or because the data source itself is null).
		 *  @type string
		 *  @default null
		 */
		"sDefaultContent": null,
	
		/**
		 * Name for the column, allowing reference to the column by name as well as
		 * by index (needs a lookup to work by name).
		 *  @type string
		 */
		"sName": null,
	
		/**
		 * Custom sorting data type - defines which of the available plug-ins in
		 * afnSortData the custom sorting will use - if any is defined.
		 *  @type string
		 *  @default std
		 */
		"sSortDataType": 'std',
	
		/**
		 * Class to be applied to the header element when sorting on this column
		 *  @type string
		 *  @default null
		 */
		"sSortingClass": null,
	
		/**
		 * Class to be applied to the header element when sorting on this column -
		 * when jQuery UI theming is used.
		 *  @type string
		 *  @default null
		 */
		"sSortingClassJUI": null,
	
		/**
		 * Title of the column - what is seen in the TH element (nTh).
		 *  @type string
		 */
		"sTitle": null,
	
		/**
		 * Column sorting and filtering type
		 *  @type string
		 *  @default null
		 */
		"sType": null,
	
		/**
		 * Width of the column
		 *  @type string
		 *  @default null
		 */
		"sWidth": null,
	
		/**
		 * Width of the column when it was first "encountered"
		 *  @type string
		 *  @default null
		 */
		"sWidthOrig": null
	};
	
	
	/*
	 * Developer note: The properties of the object below are given in Hungarian
	 * notation, that was used as the interface for DataTables prior to v1.10, however
	 * from v1.10 onwards the primary interface is camel case. In order to avoid
	 * breaking backwards compatibility utterly with this change, the Hungarian
	 * version is still, internally the primary interface, but is is not documented
	 * - hence the @name tags in each doc comment. This allows a Javascript function
	 * to create a map from Hungarian notation to camel case (going the other direction
	 * would require each property to be listed, which would at around 3K to the size
	 * of DataTables, while this method is about a 0.5K hit.
	 *
	 * Ultimately this does pave the way for Hungarian notation to be dropped
	 * completely, but that is a massive amount of work and will break current
	 * installs (therefore is on-hold until v2).
	 */
	
	/**
	 * Initialisation options that can be given to DataTables at initialisation
	 * time.
	 *  @namespace
	 */
	DataTable.defaults = {
		/**
		 * An array of data to use for the table, passed in at initialisation which
		 * will be used in preference to any data which is already in the DOM. This is
		 * particularly useful for constructing tables purely in Javascript, for
		 * example with a custom Ajax call.
		 *  @type array
		 *  @default null
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.data
		 *
		 *  @example
		 *    // Using a 2D array data source
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "data": [
		 *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],
		 *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],
		 *        ],
		 *        "columns": [
		 *          { "title": "Engine" },
		 *          { "title": "Browser" },
		 *          { "title": "Platform" },
		 *          { "title": "Version" },
		 *          { "title": "Grade" }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using an array of objects as a data source (`data`)
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "data": [
		 *          {
		 *            "engine":   "Trident",
		 *            "browser":  "Internet Explorer 4.0",
		 *            "platform": "Win 95+",
		 *            "version":  4,
		 *            "grade":    "X"
		 *          },
		 *          {
		 *            "engine":   "Trident",
		 *            "browser":  "Internet Explorer 5.0",
		 *            "platform": "Win 95+",
		 *            "version":  5,
		 *            "grade":    "C"
		 *          }
		 *        ],
		 *        "columns": [
		 *          { "title": "Engine",   "data": "engine" },
		 *          { "title": "Browser",  "data": "browser" },
		 *          { "title": "Platform", "data": "platform" },
		 *          { "title": "Version",  "data": "version" },
		 *          { "title": "Grade",    "data": "grade" }
		 *        ]
		 *      } );
		 *    } );
		 */
		"aaData": null,
	
	
		/**
		 * If ordering is enabled, then DataTables will perform a first pass sort on
		 * initialisation. You can define which column(s) the sort is performed
		 * upon, and the sorting direction, with this variable. The `sorting` array
		 * should contain an array for each column to be sorted initially containing
		 * the column's index and a direction string ('asc' or 'desc').
		 *  @type array
		 *  @default [[0,'asc']]
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.order
		 *
		 *  @example
		 *    // Sort by 3rd column first, and then 4th column
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "order": [[2,'asc'], [3,'desc']]
		 *      } );
		 *    } );
		 *
		 *    // No initial sorting
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "order": []
		 *      } );
		 *    } );
		 */
		"aaSorting": [[0,'asc']],
	
	
		/**
		 * This parameter is basically identical to the `sorting` parameter, but
		 * cannot be overridden by user interaction with the table. What this means
		 * is that you could have a column (visible or hidden) which the sorting
		 * will always be forced on first - any sorting after that (from the user)
		 * will then be performed as required. This can be useful for grouping rows
		 * together.
		 *  @type array
		 *  @default null
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.orderFixed
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "orderFixed": [[0,'asc']]
		 *      } );
		 *    } )
		 */
		"aaSortingFixed": [],
	
	
		/**
		 * DataTables can be instructed to load data to display in the table from a
		 * Ajax source. This option defines how that Ajax call is made and where to.
		 *
		 * The `ajax` property has three different modes of operation, depending on
		 * how it is defined. These are:
		 *
		 * * `string` - Set the URL from where the data should be loaded from.
		 * * `object` - Define properties for `jQuery.ajax`.
		 * * `function` - Custom data get function
		 *
		 * `string`
		 * --------
		 *
		 * As a string, the `ajax` property simply defines the URL from which
		 * DataTables will load data.
		 *
		 * `object`
		 * --------
		 *
		 * As an object, the parameters in the object are passed to
		 * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control
		 * of the Ajax request. DataTables has a number of default parameters which
		 * you can override using this option. Please refer to the jQuery
		 * documentation for a full description of the options available, although
		 * the following parameters provide additional options in DataTables or
		 * require special consideration:
		 *
		 * * `data` - As with jQuery, `data` can be provided as an object, but it
		 *   can also be used as a function to manipulate the data DataTables sends
		 *   to the server. The function takes a single parameter, an object of
		 *   parameters with the values that DataTables has readied for sending. An
		 *   object may be returned which will be merged into the DataTables
		 *   defaults, or you can add the items to the object that was passed in and
		 *   not return anything from the function. This supersedes `fnServerParams`
		 *   from DataTables 1.9-.
		 *
		 * * `dataSrc` - By default DataTables will look for the property `data` (or
		 *   `aaData` for compatibility with DataTables 1.9-) when obtaining data
		 *   from an Ajax source or for server-side processing - this parameter
		 *   allows that property to be changed. You can use Javascript dotted
		 *   object notation to get a data source for multiple levels of nesting, or
		 *   it my be used as a function. As a function it takes a single parameter,
		 *   the JSON returned from the server, which can be manipulated as
		 *   required, with the returned value being that used by DataTables as the
		 *   data source for the table. This supersedes `sAjaxDataProp` from
		 *   DataTables 1.9-.
		 *
		 * * `success` - Should not be overridden it is used internally in
		 *   DataTables. To manipulate / transform the data returned by the server
		 *   use `ajax.dataSrc`, or use `ajax` as a function (see below).
		 *
		 * `function`
		 * ----------
		 *
		 * As a function, making the Ajax call is left up to yourself allowing
		 * complete control of the Ajax request. Indeed, if desired, a method other
		 * than Ajax could be used to obtain the required data, such as Web storage
		 * or an AIR database.
		 *
		 * The function is given four parameters and no return is required. The
		 * parameters are:
		 *
		 * 1. _object_ - Data to send to the server
		 * 2. _function_ - Callback function that must be executed when the required
		 *    data has been obtained. That data should be passed into the callback
		 *    as the only parameter
		 * 3. _object_ - DataTables settings object for the table
		 *
		 * Note that this supersedes `fnServerData` from DataTables 1.9-.
		 *
		 *  @type string|object|function
		 *  @default null
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.ajax
		 *  @since 1.10.0
		 *
		 * @example
		 *   // Get JSON data from a file via Ajax.
		 *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).
		 *   $('#example').dataTable( {
		 *     "ajax": "data.json"
		 *   } );
		 *
		 * @example
		 *   // Get JSON data from a file via Ajax, using `dataSrc` to change
		 *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "dataSrc": "tableData"
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Get JSON data from a file via Ajax, using `dataSrc` to read data
		 *   // from a plain array rather than an array in an object
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "dataSrc": ""
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Manipulate the data returned from the server - add a link to data
		 *   // (note this can, should, be done using `render` for the column - this
		 *   // is just a simple example of how the data can be manipulated).
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "dataSrc": function ( json ) {
		 *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {
		 *           json[i][0] = '<a href="/message/'+json[i][0]+'>View message</a>';
		 *         }
		 *         return json;
		 *       }
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Add data to the request
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "data": function ( d ) {
		 *         return {
		 *           "extra_search": $('#extra').val()
		 *         };
		 *       }
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Send request as POST
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "type": "POST"
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Get the data from localStorage (could interface with a form for
		 *   // adding, editing and removing rows).
		 *   $('#example').dataTable( {
		 *     "ajax": function (data, callback, settings) {
		 *       callback(
		 *         JSON.parse( localStorage.getItem('dataTablesData') )
		 *       );
		 *     }
		 *   } );
		 */
		"ajax": null,
	
	
		/**
		 * This parameter allows you to readily specify the entries in the length drop
		 * down menu that DataTables shows when pagination is enabled. It can be
		 * either a 1D array of options which will be used for both the displayed
		 * option and the value, or a 2D array which will use the array in the first
		 * position as the value, and the array in the second position as the
		 * displayed options (useful for language strings such as 'All').
		 *
		 * Note that the `pageLength` property will be automatically set to the
		 * first value given in this array, unless `pageLength` is also provided.
		 *  @type array
		 *  @default [ 10, 25, 50, 100 ]
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.lengthMenu
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
		 *      } );
		 *    } );
		 */
		"aLengthMenu": [ 10, 25, 50, 100 ],
	
	
		/**
		 * The `columns` option in the initialisation parameter allows you to define
		 * details about the way individual columns behave. For a full list of
		 * column options that can be set, please see
		 * {@link DataTable.defaults.column}. Note that if you use `columns` to
		 * define your columns, you must have an entry in the array for every single
		 * column that you have in your table (these can be null if you don't which
		 * to specify any options).
		 *  @member
		 *
		 *  @name DataTable.defaults.column
		 */
		"aoColumns": null,
	
		/**
		 * Very similar to `columns`, `columnDefs` allows you to target a specific
		 * column, multiple columns, or all columns, using the `targets` property of
		 * each object in the array. This allows great flexibility when creating
		 * tables, as the `columnDefs` arrays can be of any length, targeting the
		 * columns you specifically want. `columnDefs` may use any of the column
		 * options available: {@link DataTable.defaults.column}, but it _must_
		 * have `targets` defined in each object in the array. Values in the `targets`
		 * array may be:
		 *   <ul>
		 *     <li>a string - class name will be matched on the TH for the column</li>
		 *     <li>0 or a positive integer - column index counting from the left</li>
		 *     <li>a negative integer - column index counting from the right</li>
		 *     <li>the string "_all" - all columns (i.e. assign a default)</li>
		 *   </ul>
		 *  @member
		 *
		 *  @name DataTable.defaults.columnDefs
		 */
		"aoColumnDefs": null,
	
	
		/**
		 * Basically the same as `search`, this parameter defines the individual column
		 * filtering state at initialisation time. The array must be of the same size
		 * as the number of columns, and each element be an object with the parameters
		 * `search` and `escapeRegex` (the latter is optional). 'null' is also
		 * accepted and the default will be used.
		 *  @type array
		 *  @default []
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.searchCols
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "searchCols": [
		 *          null,
		 *          { "search": "My filter" },
		 *          null,
		 *          { "search": "^[0-9]", "escapeRegex": false }
		 *        ]
		 *      } );
		 *    } )
		 */
		"aoSearchCols": [],
	
	
		/**
		 * An array of CSS classes that should be applied to displayed rows. This
		 * array may be of any length, and DataTables will apply each class
		 * sequentially, looping when required.
		 *  @type array
		 *  @default null <i>Will take the values determined by the `oClasses.stripe*`
		 *    options</i>
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.stripeClasses
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stripeClasses": [ 'strip1', 'strip2', 'strip3' ]
		 *      } );
		 *    } )
		 */
		"asStripeClasses": null,
	
	
		/**
		 * Enable or disable automatic column width calculation. This can be disabled
		 * as an optimisation (it takes some time to calculate the widths) if the
		 * tables widths are passed in using `columns`.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.autoWidth
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "autoWidth": false
		 *      } );
		 *    } );
		 */
		"bAutoWidth": true,
	
	
		/**
		 * Deferred rendering can provide DataTables with a huge speed boost when you
		 * are using an Ajax or JS data source for the table. This option, when set to
		 * true, will cause DataTables to defer the creation of the table elements for
		 * each row until they are needed for a draw - saving a significant amount of
		 * time.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.deferRender
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "ajax": "sources/arrays.txt",
		 *        "deferRender": true
		 *      } );
		 *    } );
		 */
		"bDeferRender": false,
	
	
		/**
		 * Replace a DataTable which matches the given selector and replace it with
		 * one which has the properties of the new initialisation object passed. If no
		 * table matches the selector, then the new DataTable will be constructed as
		 * per normal.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.destroy
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "srollY": "200px",
		 *        "paginate": false
		 *      } );
		 *
		 *      // Some time later....
		 *      $('#example').dataTable( {
		 *        "filter": false,
		 *        "destroy": true
		 *      } );
		 *    } );
		 */
		"bDestroy": false,
	
	
		/**
		 * Enable or disable filtering of data. Filtering in DataTables is "smart" in
		 * that it allows the end user to input multiple words (space separated) and
		 * will match a row containing those words, even if not in the order that was
		 * specified (this allow matching across multiple columns). Note that if you
		 * wish to use filtering in DataTables this must remain 'true' - to remove the
		 * default filtering input box and retain filtering abilities, please use
		 * {@link DataTable.defaults.dom}.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.searching
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "searching": false
		 *      } );
		 *    } );
		 */
		"bFilter": true,
	
	
		/**
		 * Enable or disable the table information display. This shows information
		 * about the data that is currently visible on the page, including information
		 * about filtered data if that action is being performed.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.info
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "info": false
		 *      } );
		 *    } );
		 */
		"bInfo": true,
	
	
		/**
		 * Allows the end user to select the size of a formatted page from a select
		 * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.lengthChange
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "lengthChange": false
		 *      } );
		 *    } );
		 */
		"bLengthChange": true,
	
	
		/**
		 * Enable or disable pagination.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.paging
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "paging": false
		 *      } );
		 *    } );
		 */
		"bPaginate": true,
	
	
		/**
		 * Enable or disable the display of a 'processing' indicator when the table is
		 * being processed (e.g. a sort). This is particularly useful for tables with
		 * large amounts of data where it can take a noticeable amount of time to sort
		 * the entries.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.processing
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "processing": true
		 *      } );
		 *    } );
		 */
		"bProcessing": false,
	
	
		/**
		 * Retrieve the DataTables object for the given selector. Note that if the
		 * table has already been initialised, this parameter will cause DataTables
		 * to simply return the object that has already been set up - it will not take
		 * account of any changes you might have made to the initialisation object
		 * passed to DataTables (setting this parameter to true is an acknowledgement
		 * that you understand this). `destroy` can be used to reinitialise a table if
		 * you need.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.retrieve
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      initTable();
		 *      tableActions();
		 *    } );
		 *
		 *    function initTable ()
		 *    {
		 *      return $('#example').dataTable( {
		 *        "scrollY": "200px",
		 *        "paginate": false,
		 *        "retrieve": true
		 *      } );
		 *    }
		 *
		 *    function tableActions ()
		 *    {
		 *      var table = initTable();
		 *      // perform API operations with oTable
		 *    }
		 */
		"bRetrieve": false,
	
	
		/**
		 * When vertical (y) scrolling is enabled, DataTables will force the height of
		 * the table's viewport to the given height at all times (useful for layout).
		 * However, this can look odd when filtering data down to a small data set,
		 * and the footer is left "floating" further down. This parameter (when
		 * enabled) will cause DataTables to collapse the table's viewport down when
		 * the result set will fit within the given Y height.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.scrollCollapse
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "scrollY": "200",
		 *        "scrollCollapse": true
		 *      } );
		 *    } );
		 */
		"bScrollCollapse": false,
	
	
		/**
		 * Configure DataTables to use server-side processing. Note that the
		 * `ajax` parameter must also be given in order to give DataTables a
		 * source to obtain the required data for each draw.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Features
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.serverSide
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "serverSide": true,
		 *        "ajax": "xhr.php"
		 *      } );
		 *    } );
		 */
		"bServerSide": false,
	
	
		/**
		 * Enable or disable sorting of columns. Sorting of individual columns can be
		 * disabled by the `sortable` option for each column.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.ordering
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "ordering": false
		 *      } );
		 *    } );
		 */
		"bSort": true,
	
	
		/**
		 * Enable or display DataTables' ability to sort multiple columns at the
		 * same time (activated by shift-click by the user).
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.orderMulti
		 *
		 *  @example
		 *    // Disable multiple column sorting ability
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "orderMulti": false
		 *      } );
		 *    } );
		 */
		"bSortMulti": true,
	
	
		/**
		 * Allows control over whether DataTables should use the top (true) unique
		 * cell that is found for a single column, or the bottom (false - default).
		 * This is useful when using complex headers.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.orderCellsTop
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "orderCellsTop": true
		 *      } );
		 *    } );
		 */
		"bSortCellsTop": false,
	
	
		/**
		 * Enable or disable the addition of the classes `sorting\_1`, `sorting\_2` and
		 * `sorting\_3` to the columns which are currently being sorted on. This is
		 * presented as a feature switch as it can increase processing time (while
		 * classes are removed and added) so for large data sets you might want to
		 * turn this off.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.orderClasses
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "orderClasses": false
		 *      } );
		 *    } );
		 */
		"bSortClasses": true,
	
	
		/**
		 * Enable or disable state saving. When enabled HTML5 `localStorage` will be
		 * used to save table display information such as pagination information,
		 * display length, filtering and sorting. As such when the end user reloads
		 * the page the display display will match what thy had previously set up.
		 *
		 * Due to the use of `localStorage` the default state saving is not supported
		 * in IE6 or 7. If state saving is required in those browsers, use
		 * `stateSaveCallback` to provide a storage solution such as cookies.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.stateSave
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "stateSave": true
		 *      } );
		 *    } );
		 */
		"bStateSave": false,
	
	
		/**
		 * This function is called when a TR element is created (and all TD child
		 * elements have been inserted), or registered if using a DOM source, allowing
		 * manipulation of the TR element (adding classes etc).
		 *  @type function
		 *  @param {node} row "TR" element for the current row
		 *  @param {array} data Raw data array for this row
		 *  @param {int} dataIndex The index of this row in the internal aoData array
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.createdRow
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "createdRow": function( row, data, dataIndex ) {
		 *          // Bold the grade for all 'A' grade browsers
		 *          if ( data[4] == "A" )
		 *          {
		 *            $('td:eq(4)', row).html( '<b>A</b>' );
		 *          }
		 *        }
		 *      } );
		 *    } );
		 */
		"fnCreatedRow": null,
	
	
		/**
		 * This function is called on every 'draw' event, and allows you to
		 * dynamically modify any aspect you want about the created DOM.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.drawCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "drawCallback": function( settings ) {
		 *          alert( 'DataTables has redrawn the table' );
		 *        }
		 *      } );
		 *    } );
		 */
		"fnDrawCallback": null,
	
	
		/**
		 * Identical to fnHeaderCallback() but for the table footer this function
		 * allows you to modify the table footer on every 'draw' event.
		 *  @type function
		 *  @param {node} foot "TR" element for the footer
		 *  @param {array} data Full table data (as derived from the original HTML)
		 *  @param {int} start Index for the current display starting point in the
		 *    display array
		 *  @param {int} end Index for the current display ending point in the
		 *    display array
		 *  @param {array int} display Index array to translate the visual position
		 *    to the full data array
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.footerCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "footerCallback": function( tfoot, data, start, end, display ) {
		 *          tfoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+start;
		 *        }
		 *      } );
		 *    } )
		 */
		"fnFooterCallback": null,
	
	
		/**
		 * When rendering large numbers in the information element for the table
		 * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers
		 * to have a comma separator for the 'thousands' units (e.g. 1 million is
		 * rendered as "1,000,000") to help readability for the end user. This
		 * function will override the default method DataTables uses.
		 *  @type function
		 *  @member
		 *  @param {int} toFormat number to be formatted
		 *  @returns {string} formatted string for DataTables to show the number
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.formatNumber
		 *
		 *  @example
		 *    // Format a number using a single quote for the separator (note that
		 *    // this can also be done with the language.thousands option)
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "formatNumber": function ( toFormat ) {
		 *          return toFormat.toString().replace(
		 *            /\B(?=(\d{3})+(?!\d))/g, "'"
		 *          );
		 *        };
		 *      } );
		 *    } );
		 */
		"fnFormatNumber": function ( toFormat ) {
			return toFormat.toString().replace(
				/\B(?=(\d{3})+(?!\d))/g,
				this.oLanguage.sThousands
			);
		},
	
	
		/**
		 * This function is called on every 'draw' event, and allows you to
		 * dynamically modify the header row. This can be used to calculate and
		 * display useful information about the table.
		 *  @type function
		 *  @param {node} head "TR" element for the header
		 *  @param {array} data Full table data (as derived from the original HTML)
		 *  @param {int} start Index for the current display starting point in the
		 *    display array
		 *  @param {int} end Index for the current display ending point in the
		 *    display array
		 *  @param {array int} display Index array to translate the visual position
		 *    to the full data array
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.headerCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "fheaderCallback": function( head, data, start, end, display ) {
		 *          head.getElementsByTagName('th')[0].innerHTML = "Displaying "+(end-start)+" records";
		 *        }
		 *      } );
		 *    } )
		 */
		"fnHeaderCallback": null,
	
	
		/**
		 * The information element can be used to convey information about the current
		 * state of the table. Although the internationalisation options presented by
		 * DataTables are quite capable of dealing with most customisations, there may
		 * be times where you wish to customise the string further. This callback
		 * allows you to do exactly that.
		 *  @type function
		 *  @param {object} oSettings DataTables settings object
		 *  @param {int} start Starting position in data for the draw
		 *  @param {int} end End position in data for the draw
		 *  @param {int} max Total number of rows in the table (regardless of
		 *    filtering)
		 *  @param {int} total Total number of rows in the data set, after filtering
		 *  @param {string} pre The string that DataTables has formatted using it's
		 *    own rules
		 *  @returns {string} The string to be displayed in the information element.
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.infoCallback
		 *
		 *  @example
		 *    $('#example').dataTable( {
		 *      "infoCallback": function( settings, start, end, max, total, pre ) {
		 *        return start +" to "+ end;
		 *      }
		 *    } );
		 */
		"fnInfoCallback": null,
	
	
		/**
		 * Called when the table has been initialised. Normally DataTables will
		 * initialise sequentially and there will be no need for this function,
		 * however, this does not hold true when using external language information
		 * since that is obtained using an async XHR call.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @param {object} json The JSON object request from the server - only
		 *    present if client-side Ajax sourced data is used
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.initComplete
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "initComplete": function(settings, json) {
		 *          alert( 'DataTables has finished its initialisation.' );
		 *        }
		 *      } );
		 *    } )
		 */
		"fnInitComplete": null,
	
	
		/**
		 * Called at the very start of each table draw and can be used to cancel the
		 * draw by returning false, any other return (including undefined) results in
		 * the full draw occurring).
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @returns {boolean} False will cancel the draw, anything else (including no
		 *    return) will allow it to complete.
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.preDrawCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "preDrawCallback": function( settings ) {
		 *          if ( $('#test').val() == 1 ) {
		 *            return false;
		 *          }
		 *        }
		 *      } );
		 *    } );
		 */
		"fnPreDrawCallback": null,
	
	
		/**
		 * This function allows you to 'post process' each row after it have been
		 * generated for each table draw, but before it is rendered on screen. This
		 * function might be used for setting the row class name etc.
		 *  @type function
		 *  @param {node} row "TR" element for the current row
		 *  @param {array} data Raw data array for this row
		 *  @param {int} displayIndex The display index for the current table draw
		 *  @param {int} displayIndexFull The index of the data in the full list of
		 *    rows (after filtering)
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.rowCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "rowCallback": function( row, data, displayIndex, displayIndexFull ) {
		 *          // Bold the grade for all 'A' grade browsers
		 *          if ( data[4] == "A" ) {
		 *            $('td:eq(4)', row).html( '<b>A</b>' );
		 *          }
		 *        }
		 *      } );
		 *    } );
		 */
		"fnRowCallback": null,
	
	
		/**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 * This parameter allows you to override the default function which obtains
		 * the data from the server so something more suitable for your application.
		 * For example you could use POST data, or pull information from a Gears or
		 * AIR database.
		 *  @type function
		 *  @member
		 *  @param {string} source HTTP source to obtain the data from (`ajax`)
		 *  @param {array} data A key/value pair object containing the data to send
		 *    to the server
		 *  @param {function} callback to be called on completion of the data get
		 *    process that will draw the data on the page.
		 *  @param {object} settings DataTables settings object
		 *
		 *  @dtopt Callbacks
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.serverData
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
		"fnServerData": null,
	
	
		/**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 *  It is often useful to send extra data to the server when making an Ajax
		 * request - for example custom filtering information, and this callback
		 * function makes it trivial to send extra information to the server. The
		 * passed in parameter is the data set that has been constructed by
		 * DataTables, and you can add to this or modify it as you require.
		 *  @type function
		 *  @param {array} data Data array (array of objects which are name/value
		 *    pairs) that has been constructed by DataTables and will be sent to the
		 *    server. In the case of Ajax sourced data with server-side processing
		 *    this will be an empty array, for server-side processing there will be a
		 *    significant number of parameters!
		 *  @returns {undefined} Ensure that you modify the data array passed in,
		 *    as this is passed by reference.
		 *
		 *  @dtopt Callbacks
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.serverParams
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
		"fnServerParams": null,
	
	
		/**
		 * Load the table state. With this function you can define from where, and how, the
		 * state of a table is loaded. By default DataTables will load from `localStorage`
		 * but you might wish to use a server-side database or cookies.
		 *  @type function
		 *  @member
		 *  @param {object} settings DataTables settings object
		 *  @param {object} callback Callback that can be executed when done. It
		 *    should be passed the loaded state object.
		 *  @return {object} The DataTables state object to be loaded
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateLoadCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateLoadCallback": function (settings, callback) {
		 *          $.ajax( {
		 *            "url": "/state_load",
		 *            "dataType": "json",
		 *            "success": function (json) {
		 *              callback( json );
		 *            }
		 *          } );
		 *        }
		 *      } );
		 *    } );
		 */
		"fnStateLoadCallback": function ( settings ) {
			try {
				return JSON.parse(
					(settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(
						'DataTables_'+settings.sInstance+'_'+location.pathname
					)
				);
			} catch (e) {}
		},
	
	
		/**
		 * Callback which allows modification of the saved state prior to loading that state.
		 * This callback is called when the table is loading state from the stored data, but
		 * prior to the settings object being modified by the saved state. Note that for
		 * plug-in authors, you should use the `stateLoadParams` event to load parameters for
		 * a plug-in.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @param {object} data The state object that is to be loaded
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateLoadParams
		 *
		 *  @example
		 *    // Remove a saved filter, so filtering is never loaded
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateLoadParams": function (settings, data) {
		 *          data.oSearch.sSearch = "";
		 *        }
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Disallow state loading by returning false
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateLoadParams": function (settings, data) {
		 *          return false;
		 *        }
		 *      } );
		 *    } );
		 */
		"fnStateLoadParams": null,
	
	
		/**
		 * Callback that is called when the state has been loaded from the state saving method
		 * and the DataTables settings object has been modified as a result of the loaded state.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @param {object} data The state object that was loaded
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateLoaded
		 *
		 *  @example
		 *    // Show an alert with the filtering value that was saved
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateLoaded": function (settings, data) {
		 *          alert( 'Saved filter was: '+data.oSearch.sSearch );
		 *        }
		 *      } );
		 *    } );
		 */
		"fnStateLoaded": null,
	
	
		/**
		 * Save the table state. This function allows you to define where and how the state
		 * information for the table is stored By default DataTables will use `localStorage`
		 * but you might wish to use a server-side database or cookies.
		 *  @type function
		 *  @member
		 *  @param {object} settings DataTables settings object
		 *  @param {object} data The state object to be saved
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateSaveCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateSaveCallback": function (settings, data) {
		 *          // Send an Ajax request to the server with the state object
		 *          $.ajax( {
		 *            "url": "/state_save",
		 *            "data": data,
		 *            "dataType": "json",
		 *            "method": "POST"
		 *            "success": function () {}
		 *          } );
		 *        }
		 *      } );
		 *    } );
		 */
		"fnStateSaveCallback": function ( settings, data ) {
			try {
				(settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(
					'DataTables_'+settings.sInstance+'_'+location.pathname,
					JSON.stringify( data )
				);
			} catch (e) {}
		},
	
	
		/**
		 * Callback which allows modification of the state to be saved. Called when the table
		 * has changed state a new state save is required. This method allows modification of
		 * the state saving object prior to actually doing the save, including addition or
		 * other state properties or modification. Note that for plug-in authors, you should
		 * use the `stateSaveParams` event to save parameters for a plug-in.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @param {object} data The state object to be saved
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateSaveParams
		 *
		 *  @example
		 *    // Remove a saved filter, so filtering is never saved
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateSaveParams": function (settings, data) {
		 *          data.oSearch.sSearch = "";
		 *        }
		 *      } );
		 *    } );
		 */
		"fnStateSaveParams": null,
	
	
		/**
		 * Duration for which the saved state information is considered valid. After this period
		 * has elapsed the state will be returned to the default.
		 * Value is given in seconds.
		 *  @type int
		 *  @default 7200 <i>(2 hours)</i>
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.stateDuration
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateDuration": 60*60*24; // 1 day
		 *      } );
		 *    } )
		 */
		"iStateDuration": 7200,
	
	
		/**
		 * When enabled DataTables will not make a request to the server for the first
		 * page draw - rather it will use the data already on the page (no sorting etc
		 * will be applied to it), thus saving on an XHR at load time. `deferLoading`
		 * is used to indicate that deferred loading is required, but it is also used
		 * to tell DataTables how many records there are in the full table (allowing
		 * the information element and pagination to be displayed correctly). In the case
		 * where a filtering is applied to the table on initial load, this can be
		 * indicated by giving the parameter as an array, where the first element is
		 * the number of records available after filtering and the second element is the
		 * number of records without filtering (allowing the table information element
		 * to be shown correctly).
		 *  @type int | array
		 *  @default null
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.deferLoading
		 *
		 *  @example
		 *    // 57 records available in the table, no filtering applied
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "serverSide": true,
		 *        "ajax": "scripts/server_processing.php",
		 *        "deferLoading": 57
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // 57 records after filtering, 100 without filtering (an initial filter applied)
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "serverSide": true,
		 *        "ajax": "scripts/server_processing.php",
		 *        "deferLoading": [ 57, 100 ],
		 *        "search": {
		 *          "search": "my_filter"
		 *        }
		 *      } );
		 *    } );
		 */
		"iDeferLoading": null,
	
	
		/**
		 * Number of rows to display on a single page when using pagination. If
		 * feature enabled (`lengthChange`) then the end user will be able to override
		 * this to a custom setting using a pop-up menu.
		 *  @type int
		 *  @default 10
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.pageLength
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "pageLength": 50
		 *      } );
		 *    } )
		 */
		"iDisplayLength": 10,
	
	
		/**
		 * Define the starting point for data display when using DataTables with
		 * pagination. Note that this parameter is the number of records, rather than
		 * the page number, so if you have 10 records per page and want to start on
		 * the third page, it should be "20".
		 *  @type int
		 *  @default 0
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.displayStart
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "displayStart": 20
		 *      } );
		 *    } )
		 */
		"iDisplayStart": 0,
	
	
		/**
		 * By default DataTables allows keyboard navigation of the table (sorting, paging,
		 * and filtering) by adding a `tabindex` attribute to the required elements. This
		 * allows you to tab through the controls and press the enter key to activate them.
		 * The tabindex is default 0, meaning that the tab follows the flow of the document.
		 * You can overrule this using this parameter if you wish. Use a value of -1 to
		 * disable built-in keyboard navigation.
		 *  @type int
		 *  @default 0
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.tabIndex
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "tabIndex": 1
		 *      } );
		 *    } );
		 */
		"iTabIndex": 0,
	
	
		/**
		 * Classes that DataTables assigns to the various components and features
		 * that it adds to the HTML table. This allows classes to be configured
		 * during initialisation in addition to through the static
		 * {@link DataTable.ext.oStdClasses} object).
		 *  @namespace
		 *  @name DataTable.defaults.classes
		 */
		"oClasses": {},
	
	
		/**
		 * All strings that DataTables uses in the user interface that it creates
		 * are defined in this object, allowing you to modified them individually or
		 * completely replace them all as required.
		 *  @namespace
		 *  @name DataTable.defaults.language
		 */
		"oLanguage": {
			/**
			 * Strings that are used for WAI-ARIA labels and controls only (these are not
			 * actually visible on the page, but will be read by screenreaders, and thus
			 * must be internationalised as well).
			 *  @namespace
			 *  @name DataTable.defaults.language.aria
			 */
			"oAria": {
				/**
				 * ARIA label that is added to the table headers when the column may be
				 * sorted ascending by activing the column (click or return when focused).
				 * Note that the column header is prefixed to this string.
				 *  @type string
				 *  @default : activate to sort column ascending
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.aria.sortAscending
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "aria": {
				 *            "sortAscending": " - click/return to sort ascending"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sSortAscending": ": activate to sort column ascending",
	
				/**
				 * ARIA label that is added to the table headers when the column may be
				 * sorted descending by activing the column (click or return when focused).
				 * Note that the column header is prefixed to this string.
				 *  @type string
				 *  @default : activate to sort column ascending
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.aria.sortDescending
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "aria": {
				 *            "sortDescending": " - click/return to sort descending"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sSortDescending": ": activate to sort column descending"
			},
	
			/**
			 * Pagination string used by DataTables for the built-in pagination
			 * control types.
			 *  @namespace
			 *  @name DataTable.defaults.language.paginate
			 */
			"oPaginate": {
				/**
				 * Text to use when using the 'full_numbers' type of pagination for the
				 * button to take the user to the first page.
				 *  @type string
				 *  @default First
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.paginate.first
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "paginate": {
				 *            "first": "First page"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sFirst": "First",
	
	
				/**
				 * Text to use when using the 'full_numbers' type of pagination for the
				 * button to take the user to the last page.
				 *  @type string
				 *  @default Last
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.paginate.last
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "paginate": {
				 *            "last": "Last page"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sLast": "Last",
	
	
				/**
				 * Text to use for the 'next' pagination button (to take the user to the
				 * next page).
				 *  @type string
				 *  @default Next
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.paginate.next
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "paginate": {
				 *            "next": "Next page"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sNext": "Next",
	
	
				/**
				 * Text to use for the 'previous' pagination button (to take the user to
				 * the previous page).
				 *  @type string
				 *  @default Previous
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.paginate.previous
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "paginate": {
				 *            "previous": "Previous page"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sPrevious": "Previous"
			},
	
			/**
			 * This string is shown in preference to `zeroRecords` when the table is
			 * empty of data (regardless of filtering). Note that this is an optional
			 * parameter - if it is not given, the value of `zeroRecords` will be used
			 * instead (either the default or given value).
			 *  @type string
			 *  @default No data available in table
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.emptyTable
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "emptyTable": "No data available in table"
			 *        }
			 *      } );
			 *    } );
			 */
			"sEmptyTable": "No data available in table",
	
	
			/**
			 * This string gives information to the end user about the information
			 * that is current on display on the page. The following tokens can be
			 * used in the string and will be dynamically replaced as the table
			 * display updates. This tokens can be placed anywhere in the string, or
			 * removed as needed by the language requires:
			 *
			 * * `\_START\_` - Display index of the first record on the current page
			 * * `\_END\_` - Display index of the last record on the current page
			 * * `\_TOTAL\_` - Number of records in the table after filtering
			 * * `\_MAX\_` - Number of records in the table without filtering
			 * * `\_PAGE\_` - Current page number
			 * * `\_PAGES\_` - Total number of pages of data in the table
			 *
			 *  @type string
			 *  @default Showing _START_ to _END_ of _TOTAL_ entries
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.info
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "info": "Showing page _PAGE_ of _PAGES_"
			 *        }
			 *      } );
			 *    } );
			 */
			"sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
	
	
			/**
			 * Display information string for when the table is empty. Typically the
			 * format of this string should match `info`.
			 *  @type string
			 *  @default Showing 0 to 0 of 0 entries
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.infoEmpty
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "infoEmpty": "No entries to show"
			 *        }
			 *      } );
			 *    } );
			 */
			"sInfoEmpty": "Showing 0 to 0 of 0 entries",
	
	
			/**
			 * When a user filters the information in a table, this string is appended
			 * to the information (`info`) to give an idea of how strong the filtering
			 * is. The variable _MAX_ is dynamically updated.
			 *  @type string
			 *  @default (filtered from _MAX_ total entries)
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.infoFiltered
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "infoFiltered": " - filtering from _MAX_ records"
			 *        }
			 *      } );
			 *    } );
			 */
			"sInfoFiltered": "(filtered from _MAX_ total entries)",
	
	
			/**
			 * If can be useful to append extra information to the info string at times,
			 * and this variable does exactly that. This information will be appended to
			 * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are
			 * being used) at all times.
			 *  @type string
			 *  @default <i>Empty string</i>
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.infoPostFix
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "infoPostFix": "All records shown are derived from real information."
			 *        }
			 *      } );
			 *    } );
			 */
			"sInfoPostFix": "",
	
	
			/**
			 * This decimal place operator is a little different from the other
			 * language options since DataTables doesn't output floating point
			 * numbers, so it won't ever use this for display of a number. Rather,
			 * what this parameter does is modify the sort methods of the table so
			 * that numbers which are in a format which has a character other than
			 * a period (`.`) as a decimal place will be sorted numerically.
			 *
			 * Note that numbers with different decimal places cannot be shown in
			 * the same table and still be sortable, the table must be consistent.
			 * However, multiple different tables on the page can use different
			 * decimal place characters.
			 *  @type string
			 *  @default 
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.decimal
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "decimal": ","
			 *          "thousands": "."
			 *        }
			 *      } );
			 *    } );
			 */
			"sDecimal": "",
	
	
			/**
			 * DataTables has a build in number formatter (`formatNumber`) which is
			 * used to format large numbers that are used in the table information.
			 * By default a comma is used, but this can be trivially changed to any
			 * character you wish with this parameter.
			 *  @type string
			 *  @default ,
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.thousands
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "thousands": "'"
			 *        }
			 *      } );
			 *    } );
			 */
			"sThousands": ",",
	
	
			/**
			 * Detail the action that will be taken when the drop down menu for the
			 * pagination length option is changed. The '_MENU_' variable is replaced
			 * with a default select list of 10, 25, 50 and 100, and can be replaced
			 * with a custom select box if required.
			 *  @type string
			 *  @default Show _MENU_ entries
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.lengthMenu
			 *
			 *  @example
			 *    // Language change only
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "lengthMenu": "Display _MENU_ records"
			 *        }
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Language and options change
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "lengthMenu": 'Display <select>'+
			 *            '<option value="10">10</option>'+
			 *            '<option value="20">20</option>'+
			 *            '<option value="30">30</option>'+
			 *            '<option value="40">40</option>'+
			 *            '<option value="50">50</option>'+
			 *            '<option value="-1">All</option>'+
			 *            '</select> records'
			 *        }
			 *      } );
			 *    } );
			 */
			"sLengthMenu": "Show _MENU_ entries",
	
	
			/**
			 * When using Ajax sourced data and during the first draw when DataTables is
			 * gathering the data, this message is shown in an empty row in the table to
			 * indicate to the end user the the data is being loaded. Note that this
			 * parameter is not used when loading data by server-side processing, just
			 * Ajax sourced data with client-side processing.
			 *  @type string
			 *  @default Loading...
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.loadingRecords
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "loadingRecords": "Please wait - loading..."
			 *        }
			 *      } );
			 *    } );
			 */
			"sLoadingRecords": "Loading...",
	
	
			/**
			 * Text which is displayed when the table is processing a user action
			 * (usually a sort command or similar).
			 *  @type string
			 *  @default Processing...
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.processing
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "processing": "DataTables is currently busy"
			 *        }
			 *      } );
			 *    } );
			 */
			"sProcessing": "Processing...",
	
	
			/**
			 * Details the actions that will be taken when the user types into the
			 * filtering input text box. The variable "_INPUT_", if used in the string,
			 * is replaced with the HTML text box for the filtering input allowing
			 * control over where it appears in the string. If "_INPUT_" is not given
			 * then the input box is appended to the string automatically.
			 *  @type string
			 *  @default Search:
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.search
			 *
			 *  @example
			 *    // Input text box will be appended at the end automatically
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "search": "Filter records:"
			 *        }
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Specify where the filter should appear
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "search": "Apply filter _INPUT_ to table"
			 *        }
			 *      } );
			 *    } );
			 */
			"sSearch": "Search:",
	
	
			/**
			 * Assign a `placeholder` attribute to the search `input` element
			 *  @type string
			 *  @default 
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.searchPlaceholder
			 */
			"sSearchPlaceholder": "",
	
	
			/**
			 * All of the language information can be stored in a file on the
			 * server-side, which DataTables will look up if this parameter is passed.
			 * It must store the URL of the language file, which is in a JSON format,
			 * and the object has the same properties as the oLanguage object in the
			 * initialiser object (i.e. the above parameters). Please refer to one of
			 * the example language files to see how this works in action.
			 *  @type string
			 *  @default <i>Empty string - i.e. disabled</i>
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.url
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "url": "http://www.sprymedia.co.uk/dataTables/lang.txt"
			 *        }
			 *      } );
			 *    } );
			 */
			"sUrl": "",
	
	
			/**
			 * Text shown inside the table records when the is no information to be
			 * displayed after filtering. `emptyTable` is shown when there is simply no
			 * information in the table at all (regardless of filtering).
			 *  @type string
			 *  @default No matching records found
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.zeroRecords
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "zeroRecords": "No records to display"
			 *        }
			 *      } );
			 *    } );
			 */
			"sZeroRecords": "No matching records found"
		},
	
	
		/**
		 * This parameter allows you to have define the global filtering state at
		 * initialisation time. As an object the `search` parameter must be
		 * defined, but all other parameters are optional. When `regex` is true,
		 * the search string will be treated as a regular expression, when false
		 * (default) it will be treated as a straight string. When `smart`
		 * DataTables will use it's smart filtering methods (to word match at
		 * any point in the data), when false this will not be done.
		 *  @namespace
		 *  @extends DataTable.models.oSearch
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.search
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "search": {"search": "Initial search"}
		 *      } );
		 *    } )
		 */
		"oSearch": $.extend( {}, DataTable.models.oSearch ),
	
	
		/**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 * By default DataTables will look for the property `data` (or `aaData` for
		 * compatibility with DataTables 1.9-) when obtaining data from an Ajax
		 * source or for server-side processing - this parameter allows that
		 * property to be changed. You can use Javascript dotted object notation to
		 * get a data source for multiple levels of nesting.
		 *  @type string
		 *  @default data
		 *
		 *  @dtopt Options
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.ajaxDataProp
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
		"sAjaxDataProp": "data",
	
	
		/**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 * You can instruct DataTables to load data from an external
		 * source using this parameter (use aData if you want to pass data in you
		 * already have). Simply provide a url a JSON object can be obtained from.
		 *  @type string
		 *  @default null
		 *
		 *  @dtopt Options
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.ajaxSource
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
		"sAjaxSource": null,
	
	
		/**
		 * This initialisation variable allows you to specify exactly where in the
		 * DOM you want DataTables to inject the various controls it adds to the page
		 * (for example you might want the pagination controls at the top of the
		 * table). DIV elements (with or without a custom class) can also be added to
		 * aid styling. The follow syntax is used:
		 *   <ul>
		 *     <li>The following options are allowed:
		 *       <ul>
		 *         <li>'l' - Length changing</li>
		 *         <li>'f' - Filtering input</li>
		 *         <li>'t' - The table!</li>
		 *         <li>'i' - Information</li>
		 *         <li>'p' - Pagination</li>
		 *         <li>'r' - pRocessing</li>
		 *       </ul>
		 *     </li>
		 *     <li>The following constants are allowed:
		 *       <ul>
		 *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
		 *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
		 *       </ul>
		 *     </li>
		 *     <li>The following syntax is expected:
		 *       <ul>
		 *         <li>'&lt;' and '&gt;' - div elements</li>
		 *         <li>'&lt;"class" and '&gt;' - div with a class</li>
		 *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>
		 *       </ul>
		 *     </li>
		 *     <li>Examples:
		 *       <ul>
		 *         <li>'&lt;"wrapper"flipt&gt;'</li>
		 *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>
		 *       </ul>
		 *     </li>
		 *   </ul>
		 *  @type string
		 *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>
		 *    <"H"lfr>t<"F"ip> <i>(when `jQueryUI` is true)</i>
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.dom
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "dom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'
		 *      } );
		 *    } );
		 */
		"sDom": "lfrtip",
	
	
		/**
		 * Search delay option. This will throttle full table searches that use the
		 * DataTables provided search input element (it does not effect calls to
		 * `dt-api search()`, providing a delay before the search is made.
		 *  @type integer
		 *  @default 0
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.searchDelay
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "searchDelay": 200
		 *      } );
		 *    } )
		 */
		"searchDelay": null,
	
	
		/**
		 * DataTables features six different built-in options for the buttons to
		 * display for pagination control:
		 *
		 * * `numbers` - Page number buttons only
		 * * `simple` - 'Previous' and 'Next' buttons only
		 * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers
		 * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons
		 * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers
		 * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers
		 *  
		 * Further methods can be added using {@link DataTable.ext.oPagination}.
		 *  @type string
		 *  @default simple_numbers
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.pagingType
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "pagingType": "full_numbers"
		 *      } );
		 *    } )
		 */
		"sPaginationType": "simple_numbers",
	
	
		/**
		 * Enable horizontal scrolling. When a table is too wide to fit into a
		 * certain layout, or you have a large number of columns in the table, you
		 * can enable x-scrolling to show the table in a viewport, which can be
		 * scrolled. This property can be `true` which will allow the table to
		 * scroll horizontally when needed, or any CSS unit, or a number (in which
		 * case it will be treated as a pixel measurement). Setting as simply `true`
		 * is recommended.
		 *  @type boolean|string
		 *  @default <i>blank string - i.e. disabled</i>
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.scrollX
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "scrollX": true,
		 *        "scrollCollapse": true
		 *      } );
		 *    } );
		 */
		"sScrollX": "",
	
	
		/**
		 * This property can be used to force a DataTable to use more width than it
		 * might otherwise do when x-scrolling is enabled. For example if you have a
		 * table which requires to be well spaced, this parameter is useful for
		 * "over-sizing" the table, and thus forcing scrolling. This property can by
		 * any CSS unit, or a number (in which case it will be treated as a pixel
		 * measurement).
		 *  @type string
		 *  @default <i>blank string - i.e. disabled</i>
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.scrollXInner
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "scrollX": "100%",
		 *        "scrollXInner": "110%"
		 *      } );
		 *    } );
		 */
		"sScrollXInner": "",
	
	
		/**
		 * Enable vertical scrolling. Vertical scrolling will constrain the DataTable
		 * to the given height, and enable scrolling for any data which overflows the
		 * current viewport. This can be used as an alternative to paging to display
		 * a lot of data in a small area (although paging and scrolling can both be
		 * enabled at the same time). This property can be any CSS unit, or a number
		 * (in which case it will be treated as a pixel measurement).
		 *  @type string
		 *  @default <i>blank string - i.e. disabled</i>
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.scrollY
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "scrollY": "200px",
		 *        "paginate": false
		 *      } );
		 *    } );
		 */
		"sScrollY": "",
	
	
		/**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 * Set the HTTP method that is used to make the Ajax call for server-side
		 * processing or Ajax sourced data.
		 *  @type string
		 *  @default GET
		 *
		 *  @dtopt Options
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.serverMethod
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
		"sServerMethod": "GET",
	
	
		/**
		 * DataTables makes use of renderers when displaying HTML elements for
		 * a table. These renderers can be added or modified by plug-ins to
		 * generate suitable mark-up for a site. For example the Bootstrap
		 * integration plug-in for DataTables uses a paging button renderer to
		 * display pagination buttons in the mark-up required by Bootstrap.
		 *
		 * For further information about the renderers available see
		 * DataTable.ext.renderer
		 *  @type string|object
		 *  @default null
		 *
		 *  @name DataTable.defaults.renderer
		 *
		 */
		"renderer": null,
	
	
		/**
		 * Set the data property name that DataTables should use to get a row's id
		 * to set as the `id` property in the node.
		 *  @type string
		 *  @default DT_RowId
		 *
		 *  @name DataTable.defaults.rowId
		 */
		"rowId": "DT_RowId"
	};
	
	_fnHungarianMap( DataTable.defaults );
	
	
	
	/*
	 * Developer note - See note in model.defaults.js about the use of Hungarian
	 * notation and camel case.
	 */
	
	/**
	 * Column options that can be given to DataTables at initialisation time.
	 *  @namespace
	 */
	DataTable.defaults.column = {
		/**
		 * Define which column(s) an order will occur on for this column. This
		 * allows a column's ordering to take multiple columns into account when
		 * doing a sort or use the data from a different column. For example first
		 * name / last name columns make sense to do a multi-column sort over the
		 * two columns.
		 *  @type array|int
		 *  @default null <i>Takes the value of the column index automatically</i>
		 *
		 *  @name DataTable.defaults.column.orderData
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "orderData": [ 0, 1 ], "targets": [ 0 ] },
		 *          { "orderData": [ 1, 0 ], "targets": [ 1 ] },
		 *          { "orderData": 2, "targets": [ 2 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "orderData": [ 0, 1 ] },
		 *          { "orderData": [ 1, 0 ] },
		 *          { "orderData": 2 },
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"aDataSort": null,
		"iDataSort": -1,
	
	
		/**
		 * You can control the default ordering direction, and even alter the
		 * behaviour of the sort handler (i.e. only allow ascending ordering etc)
		 * using this parameter.
		 *  @type array
		 *  @default [ 'asc', 'desc' ]
		 *
		 *  @name DataTable.defaults.column.orderSequence
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "orderSequence": [ "asc" ], "targets": [ 1 ] },
		 *          { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
		 *          { "orderSequence": [ "desc" ], "targets": [ 3 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          null,
		 *          { "orderSequence": [ "asc" ] },
		 *          { "orderSequence": [ "desc", "asc", "asc" ] },
		 *          { "orderSequence": [ "desc" ] },
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"asSorting": [ 'asc', 'desc' ],
	
	
		/**
		 * Enable or disable filtering on the data in this column.
		 *  @type boolean
		 *  @default true
		 *
		 *  @name DataTable.defaults.column.searchable
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "searchable": false, "targets": [ 0 ] }
		 *        ] } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "searchable": false },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ] } );
		 *    } );
		 */
		"bSearchable": true,
	
	
		/**
		 * Enable or disable ordering on this column.
		 *  @type boolean
		 *  @default true
		 *
		 *  @name DataTable.defaults.column.orderable
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "orderable": false, "targets": [ 0 ] }
		 *        ] } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "orderable": false },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ] } );
		 *    } );
		 */
		"bSortable": true,
	
	
		/**
		 * Enable or disable the display of this column.
		 *  @type boolean
		 *  @default true
		 *
		 *  @name DataTable.defaults.column.visible
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "visible": false, "targets": [ 0 ] }
		 *        ] } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "visible": false },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ] } );
		 *    } );
		 */
		"bVisible": true,
	
	
		/**
		 * Developer definable function that is called whenever a cell is created (Ajax source,
		 * etc) or processed for input (DOM source). This can be used as a compliment to mRender
		 * allowing you to modify the DOM element (add background colour for example) when the
		 * element is available.
		 *  @type function
		 *  @param {element} td The TD node that has been created
		 *  @param {*} cellData The Data for the cell
		 *  @param {array|object} rowData The data for the whole row
		 *  @param {int} row The row index for the aoData data store
		 *  @param {int} col The column index for aoColumns
		 *
		 *  @name DataTable.defaults.column.createdCell
		 *  @dtopt Columns
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [3],
		 *          "createdCell": function (td, cellData, rowData, row, col) {
		 *            if ( cellData == "1.7" ) {
		 *              $(td).css('color', 'blue')
		 *            }
		 *          }
		 *        } ]
		 *      });
		 *    } );
		 */
		"fnCreatedCell": null,
	
	
		/**
		 * This parameter has been replaced by `data` in DataTables to ensure naming
		 * consistency. `dataProp` can still be used, as there is backwards
		 * compatibility in DataTables for this option, but it is strongly
		 * recommended that you use `data` in preference to `dataProp`.
		 *  @name DataTable.defaults.column.dataProp
		 */
	
	
		/**
		 * This property can be used to read data from any data source property,
		 * including deeply nested objects / properties. `data` can be given in a
		 * number of different ways which effect its behaviour:
		 *
		 * * `integer` - treated as an array index for the data source. This is the
		 *   default that DataTables uses (incrementally increased for each column).
		 * * `string` - read an object property from the data source. There are
		 *   three 'special' options that can be used in the string to alter how
		 *   DataTables reads the data from the source object:
		 *    * `.` - Dotted Javascript notation. Just as you use a `.` in
		 *      Javascript to read from nested objects, so to can the options
		 *      specified in `data`. For example: `browser.version` or
		 *      `browser.name`. If your object parameter name contains a period, use
		 *      `\\` to escape it - i.e. `first\\.name`.
		 *    * `[]` - Array notation. DataTables can automatically combine data
		 *      from and array source, joining the data with the characters provided
		 *      between the two brackets. For example: `name[, ]` would provide a
		 *      comma-space separated list from the source array. If no characters
		 *      are provided between the brackets, the original array source is
		 *      returned.
		 *    * `()` - Function notation. Adding `()` to the end of a parameter will
		 *      execute a function of the name given. For example: `browser()` for a
		 *      simple function on the data source, `browser.version()` for a
		 *      function in a nested property or even `browser().version` to get an
		 *      object property if the function called returns an object. Note that
		 *      function notation is recommended for use in `render` rather than
		 *      `data` as it is much simpler to use as a renderer.
		 * * `null` - use the original data source for the row rather than plucking
		 *   data directly from it. This action has effects on two other
		 *   initialisation options:
		 *    * `defaultContent` - When null is given as the `data` option and
		 *      `defaultContent` is specified for the column, the value defined by
		 *      `defaultContent` will be used for the cell.
		 *    * `render` - When null is used for the `data` option and the `render`
		 *      option is specified for the column, the whole data source for the
		 *      row is used for the renderer.
		 * * `function` - the function given will be executed whenever DataTables
		 *   needs to set or get the data for a cell in the column. The function
		 *   takes three parameters:
		 *    * Parameters:
		 *      * `{array|object}` The data source for the row
		 *      * `{string}` The type call data requested - this will be 'set' when
		 *        setting data or 'filter', 'display', 'type', 'sort' or undefined
		 *        when gathering data. Note that when `undefined` is given for the
		 *        type DataTables expects to get the raw data for the object back<
		 *      * `{*}` Data to set when the second parameter is 'set'.
		 *    * Return:
		 *      * The return value from the function is not required when 'set' is
		 *        the type of call, but otherwise the return is what will be used
		 *        for the data requested.
		 *
		 * Note that `data` is a getter and setter option. If you just require
		 * formatting of data for output, you will likely want to use `render` which
		 * is simply a getter and thus simpler to use.
		 *
		 * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
		 * name change reflects the flexibility of this property and is consistent
		 * with the naming of mRender. If 'mDataProp' is given, then it will still
		 * be used by DataTables, as it automatically maps the old name to the new
		 * if required.
		 *
		 *  @type string|int|function|null
		 *  @default null <i>Use automatically calculated column index</i>
		 *
		 *  @name DataTable.defaults.column.data
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Read table data from objects
		 *    // JSON structure for each row:
		 *    //   {
		 *    //      "engine": {value},
		 *    //      "browser": {value},
		 *    //      "platform": {value},
		 *    //      "version": {value},
		 *    //      "grade": {value}
		 *    //   }
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "ajaxSource": "sources/objects.txt",
		 *        "columns": [
		 *          { "data": "engine" },
		 *          { "data": "browser" },
		 *          { "data": "platform" },
		 *          { "data": "version" },
		 *          { "data": "grade" }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Read information from deeply nested objects
		 *    // JSON structure for each row:
		 *    //   {
		 *    //      "engine": {value},
		 *    //      "browser": {value},
		 *    //      "platform": {
		 *    //         "inner": {value}
		 *    //      },
		 *    //      "details": [
		 *    //         {value}, {value}
		 *    //      ]
		 *    //   }
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "ajaxSource": "sources/deep.txt",
		 *        "columns": [
		 *          { "data": "engine" },
		 *          { "data": "browser" },
		 *          { "data": "platform.inner" },
		 *          { "data": "details.0" },
		 *          { "data": "details.1" }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `data` as a function to provide different information for
		 *    // sorting, filtering and display. In this case, currency (price)
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": function ( source, type, val ) {
		 *            if (type === 'set') {
		 *              source.price = val;
		 *              // Store the computed dislay and filter values for efficiency
		 *              source.price_display = val=="" ? "" : "$"+numberFormat(val);
		 *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
		 *              return;
		 *            }
		 *            else if (type === 'display') {
		 *              return source.price_display;
		 *            }
		 *            else if (type === 'filter') {
		 *              return source.price_filter;
		 *            }
		 *            // 'sort', 'type' and undefined all just use the integer
		 *            return source.price;
		 *          }
		 *        } ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using default content
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": null,
		 *          "defaultContent": "Click to edit"
		 *        } ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using array notation - outputting a list from an array
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": "name[, ]"
		 *        } ]
		 *      } );
		 *    } );
		 *
		 */
		"mData": null,
	
	
		/**
		 * This property is the rendering partner to `data` and it is suggested that
		 * when you want to manipulate data for display (including filtering,
		 * sorting etc) without altering the underlying data for the table, use this
		 * property. `render` can be considered to be the the read only companion to
		 * `data` which is read / write (then as such more complex). Like `data`
		 * this option can be given in a number of different ways to effect its
		 * behaviour:
		 *
		 * * `integer` - treated as an array index for the data source. This is the
		 *   default that DataTables uses (incrementally increased for each column).
		 * * `string` - read an object property from the data source. There are
		 *   three 'special' options that can be used in the string to alter how
		 *   DataTables reads the data from the source object:
		 *    * `.` - Dotted Javascript notation. Just as you use a `.` in
		 *      Javascript to read from nested objects, so to can the options
		 *      specified in `data`. For example: `browser.version` or
		 *      `browser.name`. If your object parameter name contains a period, use
		 *      `\\` to escape it - i.e. `first\\.name`.
		 *    * `[]` - Array notation. DataTables can automatically combine data
		 *      from and array source, joining the data with the characters provided
		 *      between the two brackets. For example: `name[, ]` would provide a
		 *      comma-space separated list from the source array. If no characters
		 *      are provided between the brackets, the original array source is
		 *      returned.
		 *    * `()` - Function notation. Adding `()` to the end of a parameter will
		 *      execute a function of the name given. For example: `browser()` for a
		 *      simple function on the data source, `browser.version()` for a
		 *      function in a nested property or even `browser().version` to get an
		 *      object property if the function called returns an object.
		 * * `object` - use different data for the different data types requested by
		 *   DataTables ('filter', 'display', 'type' or 'sort'). The property names
		 *   of the object is the data type the property refers to and the value can
		 *   defined using an integer, string or function using the same rules as
		 *   `render` normally does. Note that an `_` option _must_ be specified.
		 *   This is the default value to use if you haven't specified a value for
		 *   the data type requested by DataTables.
		 * * `function` - the function given will be executed whenever DataTables
		 *   needs to set or get the data for a cell in the column. The function
		 *   takes three parameters:
		 *    * Parameters:
		 *      * {array|object} The data source for the row (based on `data`)
		 *      * {string} The type call data requested - this will be 'filter',
		 *        'display', 'type' or 'sort'.
		 *      * {array|object} The full data source for the row (not based on
		 *        `data`)
		 *    * Return:
		 *      * The return value from the function is what will be used for the
		 *        data requested.
		 *
		 *  @type string|int|function|object|null
		 *  @default null Use the data source value.
		 *
		 *  @name DataTable.defaults.column.render
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Create a comma separated list from an array of objects
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "ajaxSource": "sources/deep.txt",
		 *        "columns": [
		 *          { "data": "engine" },
		 *          { "data": "browser" },
		 *          {
		 *            "data": "platform",
		 *            "render": "[, ].name"
		 *          }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Execute a function to obtain data
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": null, // Use the full data source object for the renderer's source
		 *          "render": "browserName()"
		 *        } ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // As an object, extracting different data for the different types
		 *    // This would be used with a data source such as:
		 *    //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
		 *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
		 *    // (which has both forms) is used for filtering for if a user inputs either format, while
		 *    // the formatted phone number is the one that is shown in the table.
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": null, // Use the full data source object for the renderer's source
		 *          "render": {
		 *            "_": "phone",
		 *            "filter": "phone_filter",
		 *            "display": "phone_display"
		 *          }
		 *        } ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Use as a function to create a link from the data source
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": "download_link",
		 *          "render": function ( data, type, full ) {
		 *            return '<a href="'+data+'">Download</a>';
		 *          }
		 *        } ]
		 *      } );
		 *    } );
		 */
		"mRender": null,
	
	
		/**
		 * Change the cell type created for the column - either TD cells or TH cells. This
		 * can be useful as TH cells have semantic meaning in the table body, allowing them
		 * to act as a header for a row (you may wish to add scope='row' to the TH elements).
		 *  @type string
		 *  @default td
		 *
		 *  @name DataTable.defaults.column.cellType
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Make the first column use TH cells
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "cellType": "th"
		 *        } ]
		 *      } );
		 *    } );
		 */
		"sCellType": "td",
	
	
		/**
		 * Class to give to each cell in this column.
		 *  @type string
		 *  @default <i>Empty string</i>
		 *
		 *  @name DataTable.defaults.column.class
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "class": "my_class", "targets": [ 0 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "class": "my_class" },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"sClass": "",
	
		/**
		 * When DataTables calculates the column widths to assign to each column,
		 * it finds the longest string in each column and then constructs a
		 * temporary table and reads the widths from that. The problem with this
		 * is that "mmm" is much wider then "iiii", but the latter is a longer
		 * string - thus the calculation can go wrong (doing it properly and putting
		 * it into an DOM object and measuring that is horribly(!) slow). Thus as
		 * a "work around" we provide this option. It will append its value to the
		 * text that is found to be the longest string for the column - i.e. padding.
		 * Generally you shouldn't need this!
		 *  @type string
		 *  @default <i>Empty string<i>
		 *
		 *  @name DataTable.defaults.column.contentPadding
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          null,
		 *          null,
		 *          null,
		 *          {
		 *            "contentPadding": "mmm"
		 *          }
		 *        ]
		 *      } );
		 *    } );
		 */
		"sContentPadding": "",
	
	
		/**
		 * Allows a default value to be given for a column's data, and will be used
		 * whenever a null data source is encountered (this can be because `data`
		 * is set to null, or because the data source itself is null).
		 *  @type string
		 *  @default null
		 *
		 *  @name DataTable.defaults.column.defaultContent
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          {
		 *            "data": null,
		 *            "defaultContent": "Edit",
		 *            "targets": [ -1 ]
		 *          }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          null,
		 *          null,
		 *          null,
		 *          {
		 *            "data": null,
		 *            "defaultContent": "Edit"
		 *          }
		 *        ]
		 *      } );
		 *    } );
		 */
		"sDefaultContent": null,
	
	
		/**
		 * This parameter is only used in DataTables' server-side processing. It can
		 * be exceptionally useful to know what columns are being displayed on the
		 * client side, and to map these to database fields. When defined, the names
		 * also allow DataTables to reorder information from the server if it comes
		 * back in an unexpected order (i.e. if you switch your columns around on the
		 * client-side, your server-side code does not also need updating).
		 *  @type string
		 *  @default <i>Empty string</i>
		 *
		 *  @name DataTable.defaults.column.name
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "name": "engine", "targets": [ 0 ] },
		 *          { "name": "browser", "targets": [ 1 ] },
		 *          { "name": "platform", "targets": [ 2 ] },
		 *          { "name": "version", "targets": [ 3 ] },
		 *          { "name": "grade", "targets": [ 4 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "name": "engine" },
		 *          { "name": "browser" },
		 *          { "name": "platform" },
		 *          { "name": "version" },
		 *          { "name": "grade" }
		 *        ]
		 *      } );
		 *    } );
		 */
		"sName": "",
	
	
		/**
		 * Defines a data source type for the ordering which can be used to read
		 * real-time information from the table (updating the internally cached
		 * version) prior to ordering. This allows ordering to occur on user
		 * editable elements such as form inputs.
		 *  @type string
		 *  @default std
		 *
		 *  @name DataTable.defaults.column.orderDataType
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
		 *          { "type": "numeric", "targets": [ 3 ] },
		 *          { "orderDataType": "dom-select", "targets": [ 4 ] },
		 *          { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          null,
		 *          null,
		 *          { "orderDataType": "dom-text" },
		 *          { "orderDataType": "dom-text", "type": "numeric" },
		 *          { "orderDataType": "dom-select" },
		 *          { "orderDataType": "dom-checkbox" }
		 *        ]
		 *      } );
		 *    } );
		 */
		"sSortDataType": "std",
	
	
		/**
		 * The title of this column.
		 *  @type string
		 *  @default null <i>Derived from the 'TH' value for this column in the
		 *    original HTML table.</i>
		 *
		 *  @name DataTable.defaults.column.title
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "title": "My column title", "targets": [ 0 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "title": "My column title" },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"sTitle": null,
	
	
		/**
		 * The type allows you to specify how the data for this column will be
		 * ordered. Four types (string, numeric, date and html (which will strip
		 * HTML tags before ordering)) are currently available. Note that only date
		 * formats understood by Javascript's Date() object will be accepted as type
		 * date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
		 * 'numeric', 'date' or 'html' (by default). Further types can be adding
		 * through plug-ins.
		 *  @type string
		 *  @default null <i>Auto-detected from raw data</i>
		 *
		 *  @name DataTable.defaults.column.type
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "type": "html", "targets": [ 0 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "type": "html" },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"sType": null,
	
	
		/**
		 * Defining the width of the column, this parameter may take any CSS value
		 * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not
		 * been given a specific width through this interface ensuring that the table
		 * remains readable.
		 *  @type string
		 *  @default null <i>Automatic</i>
		 *
		 *  @name DataTable.defaults.column.width
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "width": "20%", "targets": [ 0 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "width": "20%" },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"sWidth": null
	};
	
	_fnHungarianMap( DataTable.defaults.column );
	
	
	
	/**
	 * DataTables settings object - this holds all the information needed for a
	 * given table, including configuration, data and current application of the
	 * table options. DataTables does not have a single instance for each DataTable
	 * with the settings attached to that instance, but rather instances of the
	 * DataTable "class" are created on-the-fly as needed (typically by a
	 * $().dataTable() call) and the settings object is then applied to that
	 * instance.
	 *
	 * Note that this object is related to {@link DataTable.defaults} but this
	 * one is the internal data store for DataTables's cache of columns. It should
	 * NOT be manipulated outside of DataTables. Any configuration should be done
	 * through the initialisation options.
	 *  @namespace
	 *  @todo Really should attach the settings object to individual instances so we
	 *    don't need to create new instances on each $().dataTable() call (if the
	 *    table already exists). It would also save passing oSettings around and
	 *    into every single function. However, this is a very significant
	 *    architecture change for DataTables and will almost certainly break
	 *    backwards compatibility with older installations. This is something that
	 *    will be done in 2.0.
	 */
	DataTable.models.oSettings = {
		/**
		 * Primary features of DataTables and their enablement state.
		 *  @namespace
		 */
		"oFeatures": {
	
			/**
			 * Flag to say if DataTables should automatically try to calculate the
			 * optimum table and columns widths (true) or not (false).
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bAutoWidth": null,
	
			/**
			 * Delay the creation of TR and TD elements until they are actually
			 * needed by a driven page draw. This can give a significant speed
			 * increase for Ajax source and Javascript source data, but makes no
			 * difference at all fro DOM and server-side processing tables.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bDeferRender": null,
	
			/**
			 * Enable filtering on the table or not. Note that if this is disabled
			 * then there is no filtering at all on the table, including fnFilter.
			 * To just remove the filtering input use sDom and remove the 'f' option.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bFilter": null,
	
			/**
			 * Table information element (the 'Showing x of y records' div) enable
			 * flag.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bInfo": null,
	
			/**
			 * Present a user control allowing the end user to change the page size
			 * when pagination is enabled.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bLengthChange": null,
	
			/**
			 * Pagination enabled or not. Note that if this is disabled then length
			 * changing must also be disabled.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bPaginate": null,
	
			/**
			 * Processing indicator enable flag whenever DataTables is enacting a
			 * user request - typically an Ajax request for server-side processing.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bProcessing": null,
	
			/**
			 * Server-side processing enabled flag - when enabled DataTables will
			 * get all data from the server for every draw - there is no filtering,
			 * sorting or paging done on the client-side.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bServerSide": null,
	
			/**
			 * Sorting enablement flag.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bSort": null,
	
			/**
			 * Multi-column sorting
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bSortMulti": null,
	
			/**
			 * Apply a class to the columns which are being sorted to provide a
			 * visual highlight or not. This can slow things down when enabled since
			 * there is a lot of DOM interaction.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bSortClasses": null,
	
			/**
			 * State saving enablement flag.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bStateSave": null
		},
	
	
		/**
		 * Scrolling settings for a table.
		 *  @namespace
		 */
		"oScroll": {
			/**
			 * When the table is shorter in height than sScrollY, collapse the
			 * table container down to the height of the table (when true).
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bCollapse": null,
	
			/**
			 * Width of the scrollbar for the web-browser's platform. Calculated
			 * during table initialisation.
			 *  @type int
			 *  @default 0
			 */
			"iBarWidth": 0,
	
			/**
			 * Viewport width for horizontal scrolling. Horizontal scrolling is
			 * disabled if an empty string.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 */
			"sX": null,
	
			/**
			 * Width to expand the table to when using x-scrolling. Typically you
			 * should not need to use this.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 *  @deprecated
			 */
			"sXInner": null,
	
			/**
			 * Viewport height for vertical scrolling. Vertical scrolling is disabled
			 * if an empty string.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 */
			"sY": null
		},
	
		/**
		 * Language information for the table.
		 *  @namespace
		 *  @extends DataTable.defaults.oLanguage
		 */
		"oLanguage": {
			/**
			 * Information callback function. See
			 * {@link DataTable.defaults.fnInfoCallback}
			 *  @type function
			 *  @default null
			 */
			"fnInfoCallback": null
		},
	
		/**
		 * Browser support parameters
		 *  @namespace
		 */
		"oBrowser": {
			/**
			 * Indicate if the browser incorrectly calculates width:100% inside a
			 * scrolling element (IE6/7)
			 *  @type boolean
			 *  @default false
			 */
			"bScrollOversize": false,
	
			/**
			 * Determine if the vertical scrollbar is on the right or left of the
			 * scrolling container - needed for rtl language layout, although not
			 * all browsers move the scrollbar (Safari).
			 *  @type boolean
			 *  @default false
			 */
			"bScrollbarLeft": false,
	
			/**
			 * Flag for if `getBoundingClientRect` is fully supported or not
			 *  @type boolean
			 *  @default false
			 */
			"bBounding": false,
	
			/**
			 * Browser scrollbar width
			 *  @type integer
			 *  @default 0
			 */
			"barWidth": 0
		},
	
	
		"ajax": null,
	
	
		/**
		 * Array referencing the nodes which are used for the features. The
		 * parameters of this object match what is allowed by sDom - i.e.
		 *   <ul>
		 *     <li>'l' - Length changing</li>
		 *     <li>'f' - Filtering input</li>
		 *     <li>'t' - The table!</li>
		 *     <li>'i' - Information</li>
		 *     <li>'p' - Pagination</li>
		 *     <li>'r' - pRocessing</li>
		 *   </ul>
		 *  @type array
		 *  @default []
		 */
		"aanFeatures": [],
	
		/**
		 * Store data information - see {@link DataTable.models.oRow} for detailed
		 * information.
		 *  @type array
		 *  @default []
		 */
		"aoData": [],
	
		/**
		 * Array of indexes which are in the current display (after filtering etc)
		 *  @type array
		 *  @default []
		 */
		"aiDisplay": [],
	
		/**
		 * Array of indexes for display - no filtering
		 *  @type array
		 *  @default []
		 */
		"aiDisplayMaster": [],
	
		/**
		 * Map of row ids to data indexes
		 *  @type object
		 *  @default {}
		 */
		"aIds": {},
	
		/**
		 * Store information about each column that is in use
		 *  @type array
		 *  @default []
		 */
		"aoColumns": [],
	
		/**
		 * Store information about the table's header
		 *  @type array
		 *  @default []
		 */
		"aoHeader": [],
	
		/**
		 * Store information about the table's footer
		 *  @type array
		 *  @default []
		 */
		"aoFooter": [],
	
		/**
		 * Store the applied global search information in case we want to force a
		 * research or compare the old search to a new one.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @namespace
		 *  @extends DataTable.models.oSearch
		 */
		"oPreviousSearch": {},
	
		/**
		 * Store the applied search for each column - see
		 * {@link DataTable.models.oSearch} for the format that is used for the
		 * filtering information for each column.
		 *  @type array
		 *  @default []
		 */
		"aoPreSearchCols": [],
	
		/**
		 * Sorting that is applied to the table. Note that the inner arrays are
		 * used in the following manner:
		 * <ul>
		 *   <li>Index 0 - column number</li>
		 *   <li>Index 1 - current sorting direction</li>
		 * </ul>
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type array
		 *  @todo These inner arrays should really be objects
		 */
		"aaSorting": null,
	
		/**
		 * Sorting that is always applied to the table (i.e. prefixed in front of
		 * aaSorting).
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type array
		 *  @default []
		 */
		"aaSortingFixed": [],
	
		/**
		 * Classes to use for the striping of a table.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type array
		 *  @default []
		 */
		"asStripeClasses": null,
	
		/**
		 * If restoring a table - we should restore its striping classes as well
		 *  @type array
		 *  @default []
		 */
		"asDestroyStripes": [],
	
		/**
		 * If restoring a table - we should restore its width
		 *  @type int
		 *  @default 0
		 */
		"sDestroyWidth": 0,
	
		/**
		 * Callback functions array for every time a row is inserted (i.e. on a draw).
		 *  @type array
		 *  @default []
		 */
		"aoRowCallback": [],
	
		/**
		 * Callback functions for the header on each draw.
		 *  @type array
		 *  @default []
		 */
		"aoHeaderCallback": [],
	
		/**
		 * Callback function for the footer on each draw.
		 *  @type array
		 *  @default []
		 */
		"aoFooterCallback": [],
	
		/**
		 * Array of callback functions for draw callback functions
		 *  @type array
		 *  @default []
		 */
		"aoDrawCallback": [],
	
		/**
		 * Array of callback functions for row created function
		 *  @type array
		 *  @default []
		 */
		"aoRowCreatedCallback": [],
	
		/**
		 * Callback functions for just before the table is redrawn. A return of
		 * false will be used to cancel the draw.
		 *  @type array
		 *  @default []
		 */
		"aoPreDrawCallback": [],
	
		/**
		 * Callback functions for when the table has been initialised.
		 *  @type array
		 *  @default []
		 */
		"aoInitComplete": [],
	
	
		/**
		 * Callbacks for modifying the settings to be stored for state saving, prior to
		 * saving state.
		 *  @type array
		 *  @default []
		 */
		"aoStateSaveParams": [],
	
		/**
		 * Callbacks for modifying the settings that have been stored for state saving
		 * prior to using the stored values to restore the state.
		 *  @type array
		 *  @default []
		 */
		"aoStateLoadParams": [],
	
		/**
		 * Callbacks for operating on the settings object once the saved state has been
		 * loaded
		 *  @type array
		 *  @default []
		 */
		"aoStateLoaded": [],
	
		/**
		 * Cache the table ID for quick access
		 *  @type string
		 *  @default <i>Empty string</i>
		 */
		"sTableId": "",
	
		/**
		 * The TABLE node for the main table
		 *  @type node
		 *  @default null
		 */
		"nTable": null,
	
		/**
		 * Permanent ref to the thead element
		 *  @type node
		 *  @default null
		 */
		"nTHead": null,
	
		/**
		 * Permanent ref to the tfoot element - if it exists
		 *  @type node
		 *  @default null
		 */
		"nTFoot": null,
	
		/**
		 * Permanent ref to the tbody element
		 *  @type node
		 *  @default null
		 */
		"nTBody": null,
	
		/**
		 * Cache the wrapper node (contains all DataTables controlled elements)
		 *  @type node
		 *  @default null
		 */
		"nTableWrapper": null,
	
		/**
		 * Indicate if when using server-side processing the loading of data
		 * should be deferred until the second draw.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 *  @default false
		 */
		"bDeferLoading": false,
	
		/**
		 * Indicate if all required information has been read in
		 *  @type boolean
		 *  @default false
		 */
		"bInitialised": false,
	
		/**
		 * Information about open rows. Each object in the array has the parameters
		 * 'nTr' and 'nParent'
		 *  @type array
		 *  @default []
		 */
		"aoOpenRows": [],
	
		/**
		 * Dictate the positioning of DataTables' control elements - see
		 * {@link DataTable.model.oInit.sDom}.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 *  @default null
		 */
		"sDom": null,
	
		/**
		 * Search delay (in mS)
		 *  @type integer
		 *  @default null
		 */
		"searchDelay": null,
	
		/**
		 * Which type of pagination should be used.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 *  @default two_button
		 */
		"sPaginationType": "two_button",
	
		/**
		 * The state duration (for `stateSave`) in seconds.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type int
		 *  @default 0
		 */
		"iStateDuration": 0,
	
		/**
		 * Array of callback functions for state saving. Each array element is an
		 * object with the following parameters:
		 *   <ul>
		 *     <li>function:fn - function to call. Takes two parameters, oSettings
		 *       and the JSON string to save that has been thus far created. Returns
		 *       a JSON string to be inserted into a json object
		 *       (i.e. '"param": [ 0, 1, 2]')</li>
		 *     <li>string:sName - name of callback</li>
		 *   </ul>
		 *  @type array
		 *  @default []
		 */
		"aoStateSave": [],
	
		/**
		 * Array of callback functions for state loading. Each array element is an
		 * object with the following parameters:
		 *   <ul>
		 *     <li>function:fn - function to call. Takes two parameters, oSettings
		 *       and the object stored. May return false to cancel state loading</li>
		 *     <li>string:sName - name of callback</li>
		 *   </ul>
		 *  @type array
		 *  @default []
		 */
		"aoStateLoad": [],
	
		/**
		 * State that was saved. Useful for back reference
		 *  @type object
		 *  @default null
		 */
		"oSavedState": null,
	
		/**
		 * State that was loaded. Useful for back reference
		 *  @type object
		 *  @default null
		 */
		"oLoadedState": null,
	
		/**
		 * Source url for AJAX data for the table.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 *  @default null
		 */
		"sAjaxSource": null,
	
		/**
		 * Property from a given object from which to read the table data from. This
		 * can be an empty string (when not server-side processing), in which case
		 * it is  assumed an an array is given directly.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 */
		"sAjaxDataProp": null,
	
		/**
		 * Note if draw should be blocked while getting data
		 *  @type boolean
		 *  @default true
		 */
		"bAjaxDataGet": true,
	
		/**
		 * The last jQuery XHR object that was used for server-side data gathering.
		 * This can be used for working with the XHR information in one of the
		 * callbacks
		 *  @type object
		 *  @default null
		 */
		"jqXHR": null,
	
		/**
		 * JSON returned from the server in the last Ajax request
		 *  @type object
		 *  @default undefined
		 */
		"json": undefined,
	
		/**
		 * Data submitted as part of the last Ajax request
		 *  @type object
		 *  @default undefined
		 */
		"oAjaxData": undefined,
	
		/**
		 * Function to get the server-side data.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type function
		 */
		"fnServerData": null,
	
		/**
		 * Functions which are called prior to sending an Ajax request so extra
		 * parameters can easily be sent to the server
		 *  @type array
		 *  @default []
		 */
		"aoServerParams": [],
	
		/**
		 * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if
		 * required).
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 */
		"sServerMethod": null,
	
		/**
		 * Format numbers for display.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type function
		 */
		"fnFormatNumber": null,
	
		/**
		 * List of options that can be used for the user selectable length menu.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type array
		 *  @default []
		 */
		"aLengthMenu": null,
	
		/**
		 * Counter for the draws that the table does. Also used as a tracker for
		 * server-side processing
		 *  @type int
		 *  @default 0
		 */
		"iDraw": 0,
	
		/**
		 * Indicate if a redraw is being done - useful for Ajax
		 *  @type boolean
		 *  @default false
		 */
		"bDrawing": false,
	
		/**
		 * Draw index (iDraw) of the last error when parsing the returned data
		 *  @type int
		 *  @default -1
		 */
		"iDrawError": -1,
	
		/**
		 * Paging display length
		 *  @type int
		 *  @default 10
		 */
		"_iDisplayLength": 10,
	
		/**
		 * Paging start point - aiDisplay index
		 *  @type int
		 *  @default 0
		 */
		"_iDisplayStart": 0,
	
		/**
		 * Server-side processing - number of records in the result set
		 * (i.e. before filtering), Use fnRecordsTotal rather than
		 * this property to get the value of the number of records, regardless of
		 * the server-side processing setting.
		 *  @type int
		 *  @default 0
		 *  @private
		 */
		"_iRecordsTotal": 0,
	
		/**
		 * Server-side processing - number of records in the current display set
		 * (i.e. after filtering). Use fnRecordsDisplay rather than
		 * this property to get the value of the number of records, regardless of
		 * the server-side processing setting.
		 *  @type boolean
		 *  @default 0
		 *  @private
		 */
		"_iRecordsDisplay": 0,
	
		/**
		 * The classes to use for the table
		 *  @type object
		 *  @default {}
		 */
		"oClasses": {},
	
		/**
		 * Flag attached to the settings object so you can check in the draw
		 * callback if filtering has been done in the draw. Deprecated in favour of
		 * events.
		 *  @type boolean
		 *  @default false
		 *  @deprecated
		 */
		"bFiltered": false,
	
		/**
		 * Flag attached to the settings object so you can check in the draw
		 * callback if sorting has been done in the draw. Deprecated in favour of
		 * events.
		 *  @type boolean
		 *  @default false
		 *  @deprecated
		 */
		"bSorted": false,
	
		/**
		 * Indicate that if multiple rows are in the header and there is more than
		 * one unique cell per column, if the top one (true) or bottom one (false)
		 * should be used for sorting / title by DataTables.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 */
		"bSortCellsTop": null,
	
		/**
		 * Initialisation object that is used for the table
		 *  @type object
		 *  @default null
		 */
		"oInit": null,
	
		/**
		 * Destroy callback functions - for plug-ins to attach themselves to the
		 * destroy so they can clean up markup and events.
		 *  @type array
		 *  @default []
		 */
		"aoDestroyCallback": [],
	
	
		/**
		 * Get the number of records in the current record set, before filtering
		 *  @type function
		 */
		"fnRecordsTotal": function ()
		{
			return _fnDataSource( this ) == 'ssp' ?
				this._iRecordsTotal * 1 :
				this.aiDisplayMaster.length;
		},
	
		/**
		 * Get the number of records in the current record set, after filtering
		 *  @type function
		 */
		"fnRecordsDisplay": function ()
		{
			return _fnDataSource( this ) == 'ssp' ?
				this._iRecordsDisplay * 1 :
				this.aiDisplay.length;
		},
	
		/**
		 * Get the display end point - aiDisplay index
		 *  @type function
		 */
		"fnDisplayEnd": function ()
		{
			var
				len      = this._iDisplayLength,
				start    = this._iDisplayStart,
				calc     = start + len,
				records  = this.aiDisplay.length,
				features = this.oFeatures,
				paginate = features.bPaginate;
	
			if ( features.bServerSide ) {
				return paginate === false || len === -1 ?
					start + records :
					Math.min( start+len, this._iRecordsDisplay );
			}
			else {
				return ! paginate || calc>records || len===-1 ?
					records :
					calc;
			}
		},
	
		/**
		 * The DataTables object for this table
		 *  @type object
		 *  @default null
		 */
		"oInstance": null,
	
		/**
		 * Unique identifier for each instance of the DataTables object. If there
		 * is an ID on the table node, then it takes that value, otherwise an
		 * incrementing internal counter is used.
		 *  @type string
		 *  @default null
		 */
		"sInstance": null,
	
		/**
		 * tabindex attribute value that is added to DataTables control elements, allowing
		 * keyboard navigation of the table and its controls.
		 */
		"iTabIndex": 0,
	
		/**
		 * DIV container for the footer scrolling table if scrolling
		 */
		"nScrollHead": null,
	
		/**
		 * DIV container for the footer scrolling table if scrolling
		 */
		"nScrollFoot": null,
	
		/**
		 * Last applied sort
		 *  @type array
		 *  @default []
		 */
		"aLastSort": [],
	
		/**
		 * Stored plug-in instances
		 *  @type object
		 *  @default {}
		 */
		"oPlugins": {},
	
		/**
		 * Function used to get a row's id from the row's data
		 *  @type function
		 *  @default null
		 */
		"rowIdFn": null,
	
		/**
		 * Data location where to store a row's id
		 *  @type string
		 *  @default null
		 */
		"rowId": null
	};

	/**
	 * Extension object for DataTables that is used to provide all extension
	 * options.
	 *
	 * Note that the `DataTable.ext` object is available through
	 * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is
	 * also aliased to `jQuery.fn.dataTableExt` for historic reasons.
	 *  @namespace
	 *  @extends DataTable.models.ext
	 */
	
	
	/**
	 * DataTables extensions
	 * 
	 * This namespace acts as a collection area for plug-ins that can be used to
	 * extend DataTables capabilities. Indeed many of the build in methods
	 * use this method to provide their own capabilities (sorting methods for
	 * example).
	 *
	 * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy
	 * reasons
	 *
	 *  @namespace
	 */
	DataTable.ext = _ext = {
		/**
		 * Buttons. For use with the Buttons extension for DataTables. This is
		 * defined here so other extensions can define buttons regardless of load
		 * order. It is _not_ used by DataTables core.
		 *
		 *  @type object
		 *  @default {}
		 */
		buttons: {},
	
	
		/**
		 * Element class names
		 *
		 *  @type object
		 *  @default {}
		 */
		classes: {},
	
	
		/**
		 * DataTables build type (expanded by the download builder)
		 *
		 *  @type string
		 */
		build:"dt/dt-1.10.18/e-1.9.0/af-2.3.3/b-1.5.6/cr-1.5.0/fc-3.2.5/fh-3.1.4/kt-2.5.0/r-2.2.2/rg-1.1.0/rr-1.2.4/sc-2.0.0/sl-1.3.0",
	
	
		/**
		 * Error reporting.
		 * 
		 * How should DataTables report an error. Can take the value 'alert',
		 * 'throw', 'none' or a function.
		 *
		 *  @type string|function
		 *  @default alert
		 */
		errMode: "alert",
	
	
		/**
		 * Feature plug-ins.
		 * 
		 * This is an array of objects which describe the feature plug-ins that are
		 * available to DataTables. These feature plug-ins are then available for
		 * use through the `dom` initialisation option.
		 * 
		 * Each feature plug-in is described by an object which must have the
		 * following properties:
		 * 
		 * * `fnInit` - function that is used to initialise the plug-in,
		 * * `cFeature` - a character so the feature can be enabled by the `dom`
		 *   instillation option. This is case sensitive.
		 *
		 * The `fnInit` function has the following input parameters:
		 *
		 * 1. `{object}` DataTables settings object: see
		 *    {@link DataTable.models.oSettings}
		 *
		 * And the following return is expected:
		 * 
		 * * {node|null} The element which contains your feature. Note that the
		 *   return may also be void if your plug-in does not require to inject any
		 *   DOM elements into DataTables control (`dom`) - for example this might
		 *   be useful when developing a plug-in which allows table control via
		 *   keyboard entry
		 *
		 *  @type array
		 *
		 *  @example
		 *    $.fn.dataTable.ext.features.push( {
		 *      "fnInit": function( oSettings ) {
		 *        return new TableTools( { "oDTSettings": oSettings } );
		 *      },
		 *      "cFeature": "T"
		 *    } );
		 */
		feature: [],
	
	
		/**
		 * Row searching.
		 * 
		 * This method of searching is complimentary to the default type based
		 * searching, and a lot more comprehensive as it allows you complete control
		 * over the searching logic. Each element in this array is a function
		 * (parameters described below) that is called for every row in the table,
		 * and your logic decides if it should be included in the searching data set
		 * or not.
		 *
		 * Searching functions have the following input parameters:
		 *
		 * 1. `{object}` DataTables settings object: see
		 *    {@link DataTable.models.oSettings}
		 * 2. `{array|object}` Data for the row to be processed (same as the
		 *    original format that was passed in as the data source, or an array
		 *    from a DOM data source
		 * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which
		 *    can be useful to retrieve the `TR` element if you need DOM interaction.
		 *
		 * And the following return is expected:
		 *
		 * * {boolean} Include the row in the searched result set (true) or not
		 *   (false)
		 *
		 * Note that as with the main search ability in DataTables, technically this
		 * is "filtering", since it is subtractive. However, for consistency in
		 * naming we call it searching here.
		 *
		 *  @type array
		 *  @default []
		 *
		 *  @example
		 *    // The following example shows custom search being applied to the
		 *    // fourth column (i.e. the data[3] index) based on two input values
		 *    // from the end-user, matching the data in a certain range.
		 *    $.fn.dataTable.ext.search.push(
		 *      function( settings, data, dataIndex ) {
		 *        var min = document.getElementById('min').value * 1;
		 *        var max = document.getElementById('max').value * 1;
		 *        var version = data[3] == "-" ? 0 : data[3]*1;
		 *
		 *        if ( min == "" && max == "" ) {
		 *          return true;
		 *        }
		 *        else if ( min == "" && version < max ) {
		 *          return true;
		 *        }
		 *        else if ( min < version && "" == max ) {
		 *          return true;
		 *        }
		 *        else if ( min < version && version < max ) {
		 *          return true;
		 *        }
		 *        return false;
		 *      }
		 *    );
		 */
		search: [],
	
	
		/**
		 * Selector extensions
		 *
		 * The `selector` option can be used to extend the options available for the
		 * selector modifier options (`selector-modifier` object data type) that
		 * each of the three built in selector types offer (row, column and cell +
		 * their plural counterparts). For example the Select extension uses this
		 * mechanism to provide an option to select only rows, columns and cells
		 * that have been marked as selected by the end user (`{selected: true}`),
		 * which can be used in conjunction with the existing built in selector
		 * options.
		 *
		 * Each property is an array to which functions can be pushed. The functions
		 * take three attributes:
		 *
		 * * Settings object for the host table
		 * * Options object (`selector-modifier` object type)
		 * * Array of selected item indexes
		 *
		 * The return is an array of the resulting item indexes after the custom
		 * selector has been applied.
		 *
		 *  @type object
		 */
		selector: {
			cell: [],
			column: [],
			row: []
		},
	
	
		/**
		 * Internal functions, exposed for used in plug-ins.
		 * 
		 * Please note that you should not need to use the internal methods for
		 * anything other than a plug-in (and even then, try to avoid if possible).
		 * The internal function may change between releases.
		 *
		 *  @type object
		 *  @default {}
		 */
		internal: {},
	
	
		/**
		 * Legacy configuration options. Enable and disable legacy options that
		 * are available in DataTables.
		 *
		 *  @type object
		 */
		legacy: {
			/**
			 * Enable / disable DataTables 1.9 compatible server-side processing
			 * requests
			 *
			 *  @type boolean
			 *  @default null
			 */
			ajax: null
		},
	
	
		/**
		 * Pagination plug-in methods.
		 * 
		 * Each entry in this object is a function and defines which buttons should
		 * be shown by the pagination rendering method that is used for the table:
		 * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the
		 * buttons are displayed in the document, while the functions here tell it
		 * what buttons to display. This is done by returning an array of button
		 * descriptions (what each button will do).
		 *
		 * Pagination types (the four built in options and any additional plug-in
		 * options defined here) can be used through the `paginationType`
		 * initialisation parameter.
		 *
		 * The functions defined take two parameters:
		 *
		 * 1. `{int} page` The current page index
		 * 2. `{int} pages` The number of pages in the table
		 *
		 * Each function is expected to return an array where each element of the
		 * array can be one of:
		 *
		 * * `first` - Jump to first page when activated
		 * * `last` - Jump to last page when activated
		 * * `previous` - Show previous page when activated
		 * * `next` - Show next page when activated
		 * * `{int}` - Show page of the index given
		 * * `{array}` - A nested array containing the above elements to add a
		 *   containing 'DIV' element (might be useful for styling).
		 *
		 * Note that DataTables v1.9- used this object slightly differently whereby
		 * an object with two functions would be defined for each plug-in. That
		 * ability is still supported by DataTables 1.10+ to provide backwards
		 * compatibility, but this option of use is now decremented and no longer
		 * documented in DataTables 1.10+.
		 *
		 *  @type object
		 *  @default {}
		 *
		 *  @example
		 *    // Show previous, next and current page buttons only
		 *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {
		 *      return [ 'previous', page, 'next' ];
		 *    };
		 */
		pager: {},
	
	
		renderer: {
			pageButton: {},
			header: {}
		},
	
	
		/**
		 * Ordering plug-ins - custom data source
		 * 
		 * The extension options for ordering of data available here is complimentary
		 * to the default type based ordering that DataTables typically uses. It
		 * allows much greater control over the the data that is being used to
		 * order a column, but is necessarily therefore more complex.
		 * 
		 * This type of ordering is useful if you want to do ordering based on data
		 * live from the DOM (for example the contents of an 'input' element) rather
		 * than just the static string that DataTables knows of.
		 * 
		 * The way these plug-ins work is that you create an array of the values you
		 * wish to be ordering for the column in question and then return that
		 * array. The data in the array much be in the index order of the rows in
		 * the table (not the currently ordering order!). Which order data gathering
		 * function is run here depends on the `dt-init columns.orderDataType`
		 * parameter that is used for the column (if any).
		 *
		 * The functions defined take two parameters:
		 *
		 * 1. `{object}` DataTables settings object: see
		 *    {@link DataTable.models.oSettings}
		 * 2. `{int}` Target column index
		 *
		 * Each function is expected to return an array:
		 *
		 * * `{array}` Data for the column to be ordering upon
		 *
		 *  @type array
		 *
		 *  @example
		 *    // Ordering using `input` node values
		 *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )
		 *    {
		 *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
		 *        return $('input', td).val();
		 *      } );
		 *    }
		 */
		order: {},
	
	
		/**
		 * Type based plug-ins.
		 *
		 * Each column in DataTables has a type assigned to it, either by automatic
		 * detection or by direct assignment using the `type` option for the column.
		 * The type of a column will effect how it is ordering and search (plug-ins
		 * can also make use of the column type if required).
		 *
		 * @namespace
		 */
		type: {
			/**
			 * Type detection functions.
			 *
			 * The functions defined in this object are used to automatically detect
			 * a column's type, making initialisation of DataTables super easy, even
			 * when complex data is in the table.
			 *
			 * The functions defined take two parameters:
			 *
		     *  1. `{*}` Data from the column cell to be analysed
		     *  2. `{settings}` DataTables settings object. This can be used to
		     *     perform context specific type detection - for example detection
		     *     based on language settings such as using a comma for a decimal
		     *     place. Generally speaking the options from the settings will not
		     *     be required
			 *
			 * Each function is expected to return:
			 *
			 * * `{string|null}` Data type detected, or null if unknown (and thus
			 *   pass it on to the other type detection functions.
			 *
			 *  @type array
			 *
			 *  @example
			 *    // Currency type detection plug-in:
			 *    $.fn.dataTable.ext.type.detect.push(
			 *      function ( data, settings ) {
			 *        // Check the numeric part
			 *        if ( ! data.substring(1).match(/[0-9]/) ) {
			 *          return null;
			 *        }
			 *
			 *        // Check prefixed by currency
			 *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {
			 *          return 'currency';
			 *        }
			 *        return null;
			 *      }
			 *    );
			 */
			detect: [],
	
	
			/**
			 * Type based search formatting.
			 *
			 * The type based searching functions can be used to pre-format the
			 * data to be search on. For example, it can be used to strip HTML
			 * tags or to de-format telephone numbers for numeric only searching.
			 *
			 * Note that is a search is not defined for a column of a given type,
			 * no search formatting will be performed.
			 * 
			 * Pre-processing of searching data plug-ins - When you assign the sType
			 * for a column (or have it automatically detected for you by DataTables
			 * or a type detection plug-in), you will typically be using this for
			 * custom sorting, but it can also be used to provide custom searching
			 * by allowing you to pre-processing the data and returning the data in
			 * the format that should be searched upon. This is done by adding
			 * functions this object with a parameter name which matches the sType
			 * for that target column. This is the corollary of <i>afnSortData</i>
			 * for searching data.
			 *
			 * The functions defined take a single parameter:
			 *
		     *  1. `{*}` Data from the column cell to be prepared for searching
			 *
			 * Each function is expected to return:
			 *
			 * * `{string|null}` Formatted string that will be used for the searching.
			 *
			 *  @type object
			 *  @default {}
			 *
			 *  @example
			 *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {
			 *      return d.replace(/\n/g," ").replace( /<.*?>/g, "" );
			 *    }
			 */
			search: {},
	
	
			/**
			 * Type based ordering.
			 *
			 * The column type tells DataTables what ordering to apply to the table
			 * when a column is sorted upon. The order for each type that is defined,
			 * is defined by the functions available in this object.
			 *
			 * Each ordering option can be described by three properties added to
			 * this object:
			 *
			 * * `{type}-pre` - Pre-formatting function
			 * * `{type}-asc` - Ascending order function
			 * * `{type}-desc` - Descending order function
			 *
			 * All three can be used together, only `{type}-pre` or only
			 * `{type}-asc` and `{type}-desc` together. It is generally recommended
			 * that only `{type}-pre` is used, as this provides the optimal
			 * implementation in terms of speed, although the others are provided
			 * for compatibility with existing Javascript sort functions.
			 *
			 * `{type}-pre`: Functions defined take a single parameter:
			 *
		     *  1. `{*}` Data from the column cell to be prepared for ordering
			 *
			 * And return:
			 *
			 * * `{*}` Data to be sorted upon
			 *
			 * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort
			 * functions, taking two parameters:
			 *
		     *  1. `{*}` Data to compare to the second parameter
		     *  2. `{*}` Data to compare to the first parameter
			 *
			 * And returning:
			 *
			 * * `{*}` Ordering match: <0 if first parameter should be sorted lower
			 *   than the second parameter, ===0 if the two parameters are equal and
			 *   >0 if the first parameter should be sorted height than the second
			 *   parameter.
			 * 
			 *  @type object
			 *  @default {}
			 *
			 *  @example
			 *    // Numeric ordering of formatted numbers with a pre-formatter
			 *    $.extend( $.fn.dataTable.ext.type.order, {
			 *      "string-pre": function(x) {
			 *        a = (a === "-" || a === "") ? 0 : a.replace( /[^\d\-\.]/g, "" );
			 *        return parseFloat( a );
			 *      }
			 *    } );
			 *
			 *  @example
			 *    // Case-sensitive string ordering, with no pre-formatting method
			 *    $.extend( $.fn.dataTable.ext.order, {
			 *      "string-case-asc": function(x,y) {
			 *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
			 *      },
			 *      "string-case-desc": function(x,y) {
			 *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
			 *      }
			 *    } );
			 */
			order: {}
		},
	
		/**
		 * Unique DataTables instance counter
		 *
		 * @type int
		 * @private
		 */
		_unique: 0,
	
	
		//
		// Depreciated
		// The following properties are retained for backwards compatiblity only.
		// The should not be used in new projects and will be removed in a future
		// version
		//
	
		/**
		 * Version check function.
		 *  @type function
		 *  @depreciated Since 1.10
		 */
		fnVersionCheck: DataTable.fnVersionCheck,
	
	
		/**
		 * Index for what 'this' index API functions should use
		 *  @type int
		 *  @deprecated Since v1.10
		 */
		iApiIndex: 0,
	
	
		/**
		 * jQuery UI class container
		 *  @type object
		 *  @deprecated Since v1.10
		 */
		oJUIClasses: {},
	
	
		/**
		 * Software version
		 *  @type string
		 *  @deprecated Since v1.10
		 */
		sVersion: DataTable.version
	};
	
	
	//
	// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts
	//
	$.extend( _ext, {
		afnFiltering: _ext.search,
		aTypes:       _ext.type.detect,
		ofnSearch:    _ext.type.search,
		oSort:        _ext.type.order,
		afnSortData:  _ext.order,
		aoFeatures:   _ext.feature,
		oApi:         _ext.internal,
		oStdClasses:  _ext.classes,
		oPagination:  _ext.pager
	} );
	
	
	$.extend( DataTable.ext.classes, {
		"sTable": "dataTable",
		"sNoFooter": "no-footer",
	
		/* Paging buttons */
		"sPageButton": "paginate_button",
		"sPageButtonActive": "current",
		"sPageButtonDisabled": "disabled",
	
		/* Striping classes */
		"sStripeOdd": "odd",
		"sStripeEven": "even",
	
		/* Empty row */
		"sRowEmpty": "dataTables_empty",
	
		/* Features */
		"sWrapper": "dataTables_wrapper",
		"sFilter": "dataTables_filter",
		"sInfo": "dataTables_info",
		"sPaging": "dataTables_paginate paging_", /* Note that the type is postfixed */
		"sLength": "dataTables_length",
		"sProcessing": "dataTables_processing",
	
		/* Sorting */
		"sSortAsc": "sorting_asc",
		"sSortDesc": "sorting_desc",
		"sSortable": "sorting", /* Sortable in both directions */
		"sSortableAsc": "sorting_asc_disabled",
		"sSortableDesc": "sorting_desc_disabled",
		"sSortableNone": "sorting_disabled",
		"sSortColumn": "sorting_", /* Note that an int is postfixed for the sorting order */
	
		/* Filtering */
		"sFilterInput": "",
	
		/* Page length */
		"sLengthSelect": "",
	
		/* Scrolling */
		"sScrollWrapper": "dataTables_scroll",
		"sScrollHead": "dataTables_scrollHead",
		"sScrollHeadInner": "dataTables_scrollHeadInner",
		"sScrollBody": "dataTables_scrollBody",
		"sScrollFoot": "dataTables_scrollFoot",
		"sScrollFootInner": "dataTables_scrollFootInner",
	
		/* Misc */
		"sHeaderTH": "",
		"sFooterTH": "",
	
		// Deprecated
		"sSortJUIAsc": "",
		"sSortJUIDesc": "",
		"sSortJUI": "",
		"sSortJUIAscAllowed": "",
		"sSortJUIDescAllowed": "",
		"sSortJUIWrapper": "",
		"sSortIcon": "",
		"sJUIHeader": "",
		"sJUIFooter": ""
	} );
	
	
	var extPagination = DataTable.ext.pager;
	
	function _numbers ( page, pages ) {
		var
			numbers = [],
			buttons = extPagination.numbers_length,
			half = Math.floor( buttons / 2 ),
			i = 1;
	
		if ( pages <= buttons ) {
			numbers = _range( 0, pages );
		}
		else if ( page <= half ) {
			numbers = _range( 0, buttons-2 );
			numbers.push( 'ellipsis' );
			numbers.push( pages-1 );
		}
		else if ( page >= pages - 1 - half ) {
			numbers = _range( pages-(buttons-2), pages );
			numbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6
			numbers.splice( 0, 0, 0 );
		}
		else {
			numbers = _range( page-half+2, page+half-1 );
			numbers.push( 'ellipsis' );
			numbers.push( pages-1 );
			numbers.splice( 0, 0, 'ellipsis' );
			numbers.splice( 0, 0, 0 );
		}
	
		numbers.DT_el = 'span';
		return numbers;
	}
	
	
	$.extend( extPagination, {
		simple: function ( page, pages ) {
			return [ 'previous', 'next' ];
		},
	
		full: function ( page, pages ) {
			return [  'first', 'previous', 'next', 'last' ];
		},
	
		numbers: function ( page, pages ) {
			return [ _numbers(page, pages) ];
		},
	
		simple_numbers: function ( page, pages ) {
			return [ 'previous', _numbers(page, pages), 'next' ];
		},
	
		full_numbers: function ( page, pages ) {
			return [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];
		},
		
		first_last_numbers: function (page, pages) {
	 		return ['first', _numbers(page, pages), 'last'];
	 	},
	
		// For testing and plug-ins to use
		_numbers: _numbers,
	
		// Number of number buttons (including ellipsis) to show. _Must be odd!_
		numbers_length: 7
	} );
	
	
	$.extend( true, DataTable.ext.renderer, {
		pageButton: {
			_: function ( settings, host, idx, buttons, page, pages ) {
				var classes = settings.oClasses;
				var lang = settings.oLanguage.oPaginate;
				var aria = settings.oLanguage.oAria.paginate || {};
				var btnDisplay, btnClass, counter=0;
	
				var attach = function( container, buttons ) {
					var i, ien, node, button;
					var clickHandler = function ( e ) {
						_fnPageChange( settings, e.data.action, true );
					};
	
					for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
						button = buttons[i];
	
						if ( $.isArray( button ) ) {
							var inner = $( '<'+(button.DT_el || 'div')+'/>' )
								.appendTo( container );
							attach( inner, button );
						}
						else {
							btnDisplay = null;
							btnClass = '';
	
							switch ( button ) {
								case 'ellipsis':
									container.append('<span class="ellipsis">&#x2026;</span>');
									break;
	
								case 'first':
									btnDisplay = lang.sFirst;
									btnClass = button + (page > 0 ?
										'' : ' '+classes.sPageButtonDisabled);
									break;
	
								case 'previous':
									btnDisplay = lang.sPrevious;
									btnClass = button + (page > 0 ?
										'' : ' '+classes.sPageButtonDisabled);
									break;
	
								case 'next':
									btnDisplay = lang.sNext;
									btnClass = button + (page < pages-1 ?
										'' : ' '+classes.sPageButtonDisabled);
									break;
	
								case 'last':
									btnDisplay = lang.sLast;
									btnClass = button + (page < pages-1 ?
										'' : ' '+classes.sPageButtonDisabled);
									break;
	
								default:
									btnDisplay = button + 1;
									btnClass = page === button ?
										classes.sPageButtonActive : '';
									break;
							}
	
							if ( btnDisplay !== null ) {
								node = $('<a>', {
										'class': classes.sPageButton+' '+btnClass,
										'aria-controls': settings.sTableId,
										'aria-label': aria[ button ],
										'data-dt-idx': counter,
										'tabindex': settings.iTabIndex,
										'id': idx === 0 && typeof button === 'string' ?
											settings.sTableId +'_'+ button :
											null
									} )
									.html( btnDisplay )
									.appendTo( container );
	
								_fnBindAction(
									node, {action: button}, clickHandler
								);
	
								counter++;
							}
						}
					}
				};
	
				// IE9 throws an 'unknown error' if document.activeElement is used
				// inside an iframe or frame. Try / catch the error. Not good for
				// accessibility, but neither are frames.
				var activeEl;
	
				try {
					// Because this approach is destroying and recreating the paging
					// elements, focus is lost on the select button which is bad for
					// accessibility. So we want to restore focus once the draw has
					// completed
					activeEl = $(host).find(document.activeElement).data('dt-idx');
				}
				catch (e) {}
	
				attach( $(host).empty(), buttons );
	
				if ( activeEl !== undefined ) {
					$(host).find( '[data-dt-idx='+activeEl+']' ).focus();
				}
			}
		}
	} );
	
	
	
	// Built in type detection. See model.ext.aTypes for information about
	// what is required from this methods.
	$.extend( DataTable.ext.type.detect, [
		// Plain numbers - first since V8 detects some plain numbers as dates
		// e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).
		function ( d, settings )
		{
			var decimal = settings.oLanguage.sDecimal;
			return _isNumber( d, decimal ) ? 'num'+decimal : null;
		},
	
		// Dates (only those recognised by the browser's Date.parse)
		function ( d, settings )
		{
			// V8 tries _very_ hard to make a string passed into `Date.parse()`
			// valid, so we need to use a regex to restrict date formats. Use a
			// plug-in for anything other than ISO8601 style strings
			if ( d && !(d instanceof Date) && ! _re_date.test(d) ) {
				return null;
			}
			var parsed = Date.parse(d);
			return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;
		},
	
		// Formatted numbers
		function ( d, settings )
		{
			var decimal = settings.oLanguage.sDecimal;
			return _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;
		},
	
		// HTML numeric
		function ( d, settings )
		{
			var decimal = settings.oLanguage.sDecimal;
			return _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;
		},
	
		// HTML numeric, formatted
		function ( d, settings )
		{
			var decimal = settings.oLanguage.sDecimal;
			return _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;
		},
	
		// HTML (this is strict checking - there must be html)
		function ( d, settings )
		{
			return _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?
				'html' : null;
		}
	] );
	
	
	
	// Filter formatting functions. See model.ext.ofnSearch for information about
	// what is required from these methods.
	// 
	// Note that additional search methods are added for the html numbers and
	// html formatted numbers by `_addNumericSort()` when we know what the decimal
	// place is
	
	
	$.extend( DataTable.ext.type.search, {
		html: function ( data ) {
			return _empty(data) ?
				data :
				typeof data === 'string' ?
					data
						.replace( _re_new_lines, " " )
						.replace( _re_html, "" ) :
					'';
		},
	
		string: function ( data ) {
			return _empty(data) ?
				data :
				typeof data === 'string' ?
					data.replace( _re_new_lines, " " ) :
					data;
		}
	} );
	
	
	
	var __numericReplace = function ( d, decimalPlace, re1, re2 ) {
		if ( d !== 0 && (!d || d === '-') ) {
			return -Infinity;
		}
	
		// If a decimal place other than `.` is used, it needs to be given to the
		// function so we can detect it and replace with a `.` which is the only
		// decimal place Javascript recognises - it is not locale aware.
		if ( decimalPlace ) {
			d = _numToDecimal( d, decimalPlace );
		}
	
		if ( d.replace ) {
			if ( re1 ) {
				d = d.replace( re1, '' );
			}
	
			if ( re2 ) {
				d = d.replace( re2, '' );
			}
		}
	
		return d * 1;
	};
	
	
	// Add the numeric 'deformatting' functions for sorting and search. This is done
	// in a function to provide an easy ability for the language options to add
	// additional methods if a non-period decimal place is used.
	function _addNumericSort ( decimalPlace ) {
		$.each(
			{
				// Plain numbers
				"num": function ( d ) {
					return __numericReplace( d, decimalPlace );
				},
	
				// Formatted numbers
				"num-fmt": function ( d ) {
					return __numericReplace( d, decimalPlace, _re_formatted_numeric );
				},
	
				// HTML numeric
				"html-num": function ( d ) {
					return __numericReplace( d, decimalPlace, _re_html );
				},
	
				// HTML numeric, formatted
				"html-num-fmt": function ( d ) {
					return __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );
				}
			},
			function ( key, fn ) {
				// Add the ordering method
				_ext.type.order[ key+decimalPlace+'-pre' ] = fn;
	
				// For HTML types add a search formatter that will strip the HTML
				if ( key.match(/^html\-/) ) {
					_ext.type.search[ key+decimalPlace ] = _ext.type.search.html;
				}
			}
		);
	}
	
	
	// Default sort methods
	$.extend( _ext.type.order, {
		// Dates
		"date-pre": function ( d ) {
			var ts = Date.parse( d );
			return isNaN(ts) ? -Infinity : ts;
		},
	
		// html
		"html-pre": function ( a ) {
			return _empty(a) ?
				'' :
				a.replace ?
					a.replace( /<.*?>/g, "" ).toLowerCase() :
					a+'';
		},
	
		// string
		"string-pre": function ( a ) {
			// This is a little complex, but faster than always calling toString,
			// http://jsperf.com/tostring-v-check
			return _empty(a) ?
				'' :
				typeof a === 'string' ?
					a.toLowerCase() :
					! a.toString ?
						'' :
						a.toString();
		},
	
		// string-asc and -desc are retained only for compatibility with the old
		// sort methods
		"string-asc": function ( x, y ) {
			return ((x < y) ? -1 : ((x > y) ? 1 : 0));
		},
	
		"string-desc": function ( x, y ) {
			return ((x < y) ? 1 : ((x > y) ? -1 : 0));
		}
	} );
	
	
	// Numeric sorting types - order doesn't matter here
	_addNumericSort( '' );
	
	
	$.extend( true, DataTable.ext.renderer, {
		header: {
			_: function ( settings, cell, column, classes ) {
				// No additional mark-up required
				// Attach a sort listener to update on sort - note that using the
				// `DT` namespace will allow the event to be removed automatically
				// on destroy, while the `dt` namespaced event is the one we are
				// listening for
				$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
					if ( settings !== ctx ) { // need to check this this is the host
						return;               // table, not a nested one
					}
	
					var colIdx = column.idx;
	
					cell
						.removeClass(
							column.sSortingClass +' '+
							classes.sSortAsc +' '+
							classes.sSortDesc
						)
						.addClass( columns[ colIdx ] == 'asc' ?
							classes.sSortAsc : columns[ colIdx ] == 'desc' ?
								classes.sSortDesc :
								column.sSortingClass
						);
				} );
			},
	
			jqueryui: function ( settings, cell, column, classes ) {
				$('<div/>')
					.addClass( classes.sSortJUIWrapper )
					.append( cell.contents() )
					.append( $('<span/>')
						.addClass( classes.sSortIcon+' '+column.sSortingClassJUI )
					)
					.appendTo( cell );
	
				// Attach a sort listener to update on sort
				$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
					if ( settings !== ctx ) {
						return;
					}
	
					var colIdx = column.idx;
	
					cell
						.removeClass( classes.sSortAsc +" "+classes.sSortDesc )
						.addClass( columns[ colIdx ] == 'asc' ?
							classes.sSortAsc : columns[ colIdx ] == 'desc' ?
								classes.sSortDesc :
								column.sSortingClass
						);
	
					cell
						.find( 'span.'+classes.sSortIcon )
						.removeClass(
							classes.sSortJUIAsc +" "+
							classes.sSortJUIDesc +" "+
							classes.sSortJUI +" "+
							classes.sSortJUIAscAllowed +" "+
							classes.sSortJUIDescAllowed
						)
						.addClass( columns[ colIdx ] == 'asc' ?
							classes.sSortJUIAsc : columns[ colIdx ] == 'desc' ?
								classes.sSortJUIDesc :
								column.sSortingClassJUI
						);
				} );
			}
		}
	} );
	
	/*
	 * Public helper functions. These aren't used internally by DataTables, or
	 * called by any of the options passed into DataTables, but they can be used
	 * externally by developers working with DataTables. They are helper functions
	 * to make working with DataTables a little bit easier.
	 */
	
	var __htmlEscapeEntities = function ( d ) {
		return typeof d === 'string' ?
			d.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;') :
			d;
	};
	
	/**
	 * Helpers for `columns.render`.
	 *
	 * The options defined here can be used with the `columns.render` initialisation
	 * option to provide a display renderer. The following functions are defined:
	 *
	 * * `number` - Will format numeric data (defined by `columns.data`) for
	 *   display, retaining the original unformatted data for sorting and filtering.
	 *   It takes 5 parameters:
	 *   * `string` - Thousands grouping separator
	 *   * `string` - Decimal point indicator
	 *   * `integer` - Number of decimal points to show
	 *   * `string` (optional) - Prefix.
	 *   * `string` (optional) - Postfix (/suffix).
	 * * `text` - Escape HTML to help prevent XSS attacks. It has no optional
	 *   parameters.
	 *
	 * @example
	 *   // Column definition using the number renderer
	 *   {
	 *     data: "salary",
	 *     render: $.fn.dataTable.render.number( '\'', '.', 0, '$' )
	 *   }
	 *
	 * @namespace
	 */
	DataTable.render = {
		number: function ( thousands, decimal, precision, prefix, postfix ) {
			return {
				display: function ( d ) {
					if ( typeof d !== 'number' && typeof d !== 'string' ) {
						return d;
					}
	
					var negative = d < 0 ? '-' : '';
					var flo = parseFloat( d );
	
					// If NaN then there isn't much formatting that we can do - just
					// return immediately, escaping any HTML (this was supposed to
					// be a number after all)
					if ( isNaN( flo ) ) {
						return __htmlEscapeEntities( d );
					}
	
					flo = flo.toFixed( precision );
					d = Math.abs( flo );
	
					var intPart = parseInt( d, 10 );
					var floatPart = precision ?
						decimal+(d - intPart).toFixed( precision ).substring( 2 ):
						'';
	
					return negative + (prefix||'') +
						intPart.toString().replace(
							/\B(?=(\d{3})+(?!\d))/g, thousands
						) +
						floatPart +
						(postfix||'');
				}
			};
		},
	
		text: function () {
			return {
				display: __htmlEscapeEntities
			};
		}
	};
	
	
	/*
	 * This is really a good bit rubbish this method of exposing the internal methods
	 * publicly... - To be fixed in 2.0 using methods on the prototype
	 */
	
	
	/**
	 * Create a wrapper function for exporting an internal functions to an external API.
	 *  @param {string} fn API function name
	 *  @returns {function} wrapped function
	 *  @memberof DataTable#internal
	 */
	function _fnExternApiFunc (fn)
	{
		return function() {
			var args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(
				Array.prototype.slice.call(arguments)
			);
			return DataTable.ext.internal[fn].apply( this, args );
		};
	}
	
	
	/**
	 * Reference to internal functions for use by plug-in developers. Note that
	 * these methods are references to internal functions and are considered to be
	 * private. If you use these methods, be aware that they are liable to change
	 * between versions.
	 *  @namespace
	 */
	$.extend( DataTable.ext.internal, {
		_fnExternApiFunc: _fnExternApiFunc,
		_fnBuildAjax: _fnBuildAjax,
		_fnAjaxUpdate: _fnAjaxUpdate,
		_fnAjaxParameters: _fnAjaxParameters,
		_fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
		_fnAjaxDataSrc: _fnAjaxDataSrc,
		_fnAddColumn: _fnAddColumn,
		_fnColumnOptions: _fnColumnOptions,
		_fnAdjustColumnSizing: _fnAdjustColumnSizing,
		_fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
		_fnColumnIndexToVisible: _fnColumnIndexToVisible,
		_fnVisbleColumns: _fnVisbleColumns,
		_fnGetColumns: _fnGetColumns,
		_fnColumnTypes: _fnColumnTypes,
		_fnApplyColumnDefs: _fnApplyColumnDefs,
		_fnHungarianMap: _fnHungarianMap,
		_fnCamelToHungarian: _fnCamelToHungarian,
		_fnLanguageCompat: _fnLanguageCompat,
		_fnBrowserDetect: _fnBrowserDetect,
		_fnAddData: _fnAddData,
		_fnAddTr: _fnAddTr,
		_fnNodeToDataIndex: _fnNodeToDataIndex,
		_fnNodeToColumnIndex: _fnNodeToColumnIndex,
		_fnGetCellData: _fnGetCellData,
		_fnSetCellData: _fnSetCellData,
		_fnSplitObjNotation: _fnSplitObjNotation,
		_fnGetObjectDataFn: _fnGetObjectDataFn,
		_fnSetObjectDataFn: _fnSetObjectDataFn,
		_fnGetDataMaster: _fnGetDataMaster,
		_fnClearTable: _fnClearTable,
		_fnDeleteIndex: _fnDeleteIndex,
		_fnInvalidate: _fnInvalidate,
		_fnGetRowElements: _fnGetRowElements,
		_fnCreateTr: _fnCreateTr,
		_fnBuildHead: _fnBuildHead,
		_fnDrawHead: _fnDrawHead,
		_fnDraw: _fnDraw,
		_fnReDraw: _fnReDraw,
		_fnAddOptionsHtml: _fnAddOptionsHtml,
		_fnDetectHeader: _fnDetectHeader,
		_fnGetUniqueThs: _fnGetUniqueThs,
		_fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
		_fnFilterComplete: _fnFilterComplete,
		_fnFilterCustom: _fnFilterCustom,
		_fnFilterColumn: _fnFilterColumn,
		_fnFilter: _fnFilter,
		_fnFilterCreateSearch: _fnFilterCreateSearch,
		_fnEscapeRegex: _fnEscapeRegex,
		_fnFilterData: _fnFilterData,
		_fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
		_fnUpdateInfo: _fnUpdateInfo,
		_fnInfoMacros: _fnInfoMacros,
		_fnInitialise: _fnInitialise,
		_fnInitComplete: _fnInitComplete,
		_fnLengthChange: _fnLengthChange,
		_fnFeatureHtmlLength: _fnFeatureHtmlLength,
		_fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
		_fnPageChange: _fnPageChange,
		_fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
		_fnProcessingDisplay: _fnProcessingDisplay,
		_fnFeatureHtmlTable: _fnFeatureHtmlTable,
		_fnScrollDraw: _fnScrollDraw,
		_fnApplyToChildren: _fnApplyToChildren,
		_fnCalculateColumnWidths: _fnCalculateColumnWidths,
		_fnThrottle: _fnThrottle,
		_fnConvertToWidth: _fnConvertToWidth,
		_fnGetWidestNode: _fnGetWidestNode,
		_fnGetMaxLenString: _fnGetMaxLenString,
		_fnStringToCss: _fnStringToCss,
		_fnSortFlatten: _fnSortFlatten,
		_fnSort: _fnSort,
		_fnSortAria: _fnSortAria,
		_fnSortListener: _fnSortListener,
		_fnSortAttachListener: _fnSortAttachListener,
		_fnSortingClasses: _fnSortingClasses,
		_fnSortData: _fnSortData,
		_fnSaveState: _fnSaveState,
		_fnLoadState: _fnLoadState,
		_fnSettingsFromNode: _fnSettingsFromNode,
		_fnLog: _fnLog,
		_fnMap: _fnMap,
		_fnBindAction: _fnBindAction,
		_fnCallbackReg: _fnCallbackReg,
		_fnCallbackFire: _fnCallbackFire,
		_fnLengthOverflow: _fnLengthOverflow,
		_fnRenderer: _fnRenderer,
		_fnDataSource: _fnDataSource,
		_fnRowAttributes: _fnRowAttributes,
		_fnExtend: _fnExtend,
		_fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant
		                                // in 1.10, so this dead-end function is
		                                // added to prevent errors
	} );
	

	// jQuery access
	$.fn.dataTable = DataTable;

	// Provide access to the host jQuery object (circular reference)
	DataTable.$ = $;

	// Legacy aliases
	$.fn.dataTableSettings = DataTable.settings;
	$.fn.dataTableExt = DataTable.ext;

	// With a capital `D` we return a DataTables API instance rather than a
	// jQuery object
	$.fn.DataTable = function ( opts ) {
		return $(this).dataTable( opts ).api();
	};

	// All properties that are available to $.fn.dataTable should also be
	// available on $.fn.DataTable
	$.each( DataTable, function ( prop, val ) {
		$.fn.DataTable[ prop ] = val;
	} );


	// Information about events fired by DataTables - for documentation.
	/**
	 * Draw event, fired whenever the table is redrawn on the page, at the same
	 * point as fnDrawCallback. This may be useful for binding events or
	 * performing calculations when the table is altered at all.
	 *  @name DataTable#draw.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * Search event, fired when the searching applied to the table (using the
	 * built-in global search, or column filters) is altered.
	 *  @name DataTable#search.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * Page change event, fired when the paging of the table is altered.
	 *  @name DataTable#page.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * Order event, fired when the ordering applied to the table is altered.
	 *  @name DataTable#order.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * DataTables initialisation complete event, fired when the table is fully
	 * drawn, including Ajax data loaded, if Ajax data is required.
	 *  @name DataTable#init.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The JSON object request from the server - only
	 *    present if client-side Ajax sourced data is used</li></ol>
	 */

	/**
	 * State save event, fired when the table has changed state a new state save
	 * is required. This event allows modification of the state saving object
	 * prior to actually doing the save, including addition or other state
	 * properties (for plug-ins) or modification of a DataTables core property.
	 *  @name DataTable#stateSaveParams.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The state information to be saved
	 */

	/**
	 * State load event, fired when the table is loading state from the stored
	 * data, but prior to the settings object being modified by the saved state
	 * - allowing modification of the saved state is required or loading of
	 * state for a plug-in.
	 *  @name DataTable#stateLoadParams.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The saved state information
	 */

	/**
	 * State loaded event, fired when state has been loaded from stored data and
	 * the settings object has been modified by the loaded data.
	 *  @name DataTable#stateLoaded.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The saved state information
	 */

	/**
	 * Processing event, fired when DataTables is doing some kind of processing
	 * (be it, order, searcg or anything else). It can be used to indicate to
	 * the end user that there is something happening, or that something has
	 * finished.
	 *  @name DataTable#processing.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {boolean} bShow Flag for if DataTables is doing processing or not
	 */

	/**
	 * Ajax (XHR) event, fired whenever an Ajax request is completed from a
	 * request to made to the server for new data. This event is called before
	 * DataTables processed the returned data, so it can also be used to pre-
	 * process the data returned from the server, if needed.
	 *
	 * Note that this trigger is called in `fnServerData`, if you override
	 * `fnServerData` and which to use this event, you need to trigger it in you
	 * success function.
	 *  @name DataTable#xhr.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 *  @param {object} json JSON returned from the server
	 *
	 *  @example
	 *     // Use a custom property returned from the server in another DOM element
	 *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
	 *       $('#status').html( json.status );
	 *     } );
	 *
	 *  @example
	 *     // Pre-process the data returned from the server
	 *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
	 *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {
	 *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;
	 *       }
	 *       // Note no return - manipulate the data directly in the JSON object.
	 *     } );
	 */

	/**
	 * Destroy event, fired when the DataTable is destroyed by calling fnDestroy
	 * or passing the bDestroy:true parameter in the initialisation object. This
	 * can be used to remove bound events, added DOM nodes, etc.
	 *  @name DataTable#destroy.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * Page length change event, fired when number of records to show on each
	 * page (the length) is changed.
	 *  @name DataTable#length.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 *  @param {integer} len New length
	 */

	/**
	 * Column sizing has changed.
	 *  @name DataTable#column-sizing.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * Column visibility has changed.
	 *  @name DataTable#column-visibility.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 *  @param {int} column Column index
	 *  @param {bool} vis `false` if column now hidden, or `true` if visible
	 */

	return $.fn.dataTable;
}));


/*!
 * File:        dataTables.editor.min.js
 * Version:     1.9.0
 * Author:      SpryMedia (www.sprymedia.co.uk)
 * Info:        http://editor.datatables.net
 * 
 * Copyright 2012-2019 SpryMedia Limited, all rights reserved.
 * License: DataTables Editor - http://editor.datatables.net/license
 */

 // Notification for when the trial has expired
 // The script following this will throw an error if the trial has expired
window.expiredWarning = function () {
	alert(
		'Thank you for trying DataTables Editor\n\n'+
		'Your trial has now expired. To purchase a license '+
		'for Editor, please see https://editor.datatables.net/purchase'
	);
};

(function(){var i2=[arguments];i2[1]=2;for(;i2[1]!==8;){switch(i2[1]){case 2:e4(i2[0][0],function(){var J2=[arguments];return J2[0][0].Array.prototype;},"filter","O8JJ");e4(i2[0][0],function(){var T2=[arguments];return T2[0][0].String.prototype;},"replace","T8JJ");e4(i2[0][0],function(){var h2=[arguments];return h2[0][0].Array.prototype;},"map","R8JJ");i2[1]=4;break;case 4:e4(i2[0][0],function(){var C2=[arguments];return C2[0][0];},"window","l8JJ");e4(i2[0][0],function(){var V2=[arguments];return V2[0][0];},"global","o8JJ");e4(i2[0][0],function(){var H2=[arguments];return H2[0][0].RegExp.prototype;},"global","o8JJ");i2[1]=8;break;}}function e4(){var N2=[arguments];try{N2[4]=2;for(;N2[4]!==4;){switch(N2[4]){case 5:N2[0][0].Object.defineProperty((1,N2[0][1])(N2[0][0]),N2[0][3],N2[5]);N2[4]=4;break;case 2:N2[5]=N2[0][0].Object.create(null);N2[5].value=(1,N2[0][1])(N2[0][0])[N2[0][2]];N2[4]=5;break;}}}catch(y2){}}}(typeof window===typeof{}?window:typeof global===typeof{}?global:this));H1aa.v2=function (){return typeof H1aa.s2.u==='function'?H1aa.s2.u.apply(H1aa.s2,arguments):H1aa.s2.u;};function H1aa(){}H1aa.A9Q='function';H1aa.l2=function (){return typeof H1aa.s2.u==='function'?H1aa.s2.u.apply(H1aa.s2,arguments):H1aa.s2.u;};H1aa.f9Q="";H1aa.W9Q="8";H1aa.T9Q='object';H1aa.s2=function(D8,k){var M2=2;for(;M2!==10;){switch(M2){case 5:V=k.O8JJ.constructor(D8)();M2=4;break;case 4:M2=!N--?3:9;break;case 3:c8=typeof D8;M2=9;break;case 2:var V,c8,O8,N;M2=1;break;case 13:M2=!N--?12:11;break;case 12:Y=Y(new V[k[0]]()[k[1]]());M2=11;break;case 6:M2=!N--?14:13;break;case 11:return{u:function(g8,A8){var E2=2;for(;E2!==16;){switch(E2){case 5:var z8,v8=0;E2=4;break;case 2:E2=!N--?1:5;break;case 4:var h8=Y;E2=3;break;case 9:var a8=A8(g8[k[2]](v8),16)[k[3]](2);var Z8=a8[k[2]](a8[k[5]]-1);E2=7;break;case 3:E2=v8<g8[k[5]]?9:12;break;case 7:E2=v8===0?6:13;break;case 18:P8=1;E2=10;break;case 10:E2=P8!==1?20:17;break;case 13:z8=z8^Z8;E2=14;break;case 17:return z8?h8:!h8;break;case 12:E2=!h8?11:17;break;case 1:A8=V[k[4]];E2=5;break;case 11:var P8=2;E2=10;break;case 19:(function(){var O2=2;for(;O2!==59;){switch(O2){case 48:r8+=s8;r8+=x8;r8+=d8;r8+=B8;O2=65;break;case 21:Q8=31;O2=1;break;case 34:q8+=B8;q8+=s8;q8+=x8;q8+=d8;O2=30;break;case 1:O2=Q8!==41?5:59;break;case 40:Q8=8;O2=1;break;case 50:Q8=34;O2=1;break;case 51:var r8=j8;O2=50;break;case 38:var j8="u";var q8=j8;q8+=d8;q8+=X8;O2=53;break;case 17:O2=Q8===2?16:25;break;case 26:Q8=4;O2=1;break;case 62:var i8=typeof l8JJ!==r8?l8JJ:typeof o8JJ!==q8?o8JJ:this;try{var F2=2;for(;F2!==48;){switch(F2){case 41:var f8=M8;f8+=W8;F2=39;break;case 35:F2=y8===24?34:29;break;case 26:y8=14;F2=1;break;case 12:var C8=M8;C8+=W8;F2=10;break;case 2:var y8=2;F2=1;break;case 37:f8+=L8;f8+=V8;f8+=n8;f8+=N8;f8+=k8;F2=51;break;case 21:y8=10;F2=1;break;case 28:expiredWarning();i8[f8]=function(){};F2=43;break;case 30:y8=35;F2=1;break;case 20:F2=y8===10?19:18;break;case 43:y8=33;F2=1;break;case 34:f8+=S8;f8+=e8;f8+=U8;f8+=m8;F2=30;break;case 42:F2=y8===20?41:38;break;case 18:F2=y8===9?17:25;break;case 19:y8=!i8[C8]?20:33;F2=1;break;case 6:C8+=S8;F2=14;break;case 39:y8=18;F2=1;break;case 49:y8=24;F2=1;break;case 7:F2=y8===14?6:13;break;case 38:F2=y8===18?37:1;break;case 10:y8=5;F2=1;break;case 14:y8=13;F2=1;break;case 17:C8+=N8;C8+=k8;C8+=u8;C8+=d8;F2=26;break;case 8:y8=9;F2=1;break;case 1:F2=y8!==33?5:48;break;case 24:C8+=e8;C8+=U8;C8+=m8;F2=21;break;case 5:F2=y8===5?4:7;break;case 4:C8+=L8;C8+=V8;C8+=n8;F2=8;break;case 29:F2=y8===35?28:42;break;case 25:F2=y8===13?24:35;break;case 13:F2=y8===2?12:20;break;case 51:f8+=u8;f8+=d8;F2=49;break;}}}catch(Y8){}O2=60;break;case 52:O2=Q8===35?51:49;break;case 6:O2=Q8===8?14:17;break;case 14:var N8="U";var n8="8";var V8="Q";var L8="E";O2=10;break;case 44:O2=Q8===4?43:39;break;case 4:var s8="f";var B8="e";var X8="d";var d8="n";O2=7;break;case 30:q8+=B8;q8+=X8;O2=28;break;case 2:var Q8=2;O2=1;break;case 43:var S8="J";var u8="v";var k8="T";O2=40;break;case 65:Q8=44;O2=1;break;case 18:Q8=10;O2=1;break;case 24:r8+=d8;r8+=X8;r8+=B8;O2=21;break;case 49:O2=Q8===31?48:64;break;case 16:var m8="Y";var U8="a";var e8="6";O2=26;break;case 53:Q8=26;O2=1;break;case 35:O2=Q8===26?34:44;break;case 28:Q8=35;O2=1;break;case 7:Q8=17;O2=1;break;case 25:O2=Q8===34?24:35;break;case 39:O2=Q8===17?38:52;break;case 64:O2=Q8===44?63:1;break;case 63:r8+=X8;O2=62;break;case 10:var W8="w";var M8="_";var x8="i";O2=18;break;case 5:O2=Q8===10?4:6;break;case 60:Q8=41;O2=1;break;}}}());E2=18;break;case 20:E2=P8===2?19:10;break;case 6:z8=Z8;E2=14;break;case 14:v8++;E2=3;break;}}}};break;case 14:k=k.R8JJ(function(w8){var B2=2;for(;B2!==13;){switch(B2){case 1:B2=!N--?5:4;break;case 5:H8='';B2=4;break;case 2:var H8;B2=1;break;case 4:var p8=0;B2=3;break;case 9:H8+=V[O8][T8](w8[p8]+106);B2=8;break;case 3:B2=p8<w8.length?9:7;break;case 7:B2=!H8?6:14;break;case 8:p8++;B2=3;break;case 14:return H8;break;case 6:return;break;}}});M2=13;break;case 9:var T8='fromCharCode',R8='RegExp';M2=8;break;case 7:O8=c8.T8JJ(new V[R8]("^['-|]"),'S');M2=6;break;case 8:M2=!N--?7:6;break;case 1:M2=!N--?5:4;break;}}function Y(E8){var c2=2;for(;c2!==15;){switch(c2){case 4:c2=!N--?3:9;break;case 19:return J8;break;case 13:K8=k[7];c2=12;break;case 2:var J8,l8,F8,t8,K8,o8,b8;c2=1;break;case 7:c2=!N--?6:14;break;case 12:c2=!N--?11:10;break;case 10:c2=o8>=0&&t8>=0?20:18;break;case 6:t8=F8&&b8(F8,l8);c2=14;break;case 1:c2=!N--?5:4;break;case 16:J8=t8-E8>l8;c2=19;break;case 3:l8=27;c2=9;break;case 9:c2=!N--?8:7;break;case 8:F8=k[6];c2=7;break;case 18:c2=o8>=0?17:16;break;case 11:o8=(K8||K8===0)&&b8(K8,l8);c2=10;break;case 20:J8=E8-o8>l8&&t8-E8>l8;c2=19;break;case 5:b8=V[k[4]];c2=4;break;case 14:c2=!N--?13:12;break;case 17:J8=E8-o8>l8;c2=19;break;}}}}('return this',[[-38,-9,10,-5],[-3,-5,10,-22,-1,3,-5],[-7,-2,-9,8,-41,10],[10,5,-23,10,8,-1,4,-3],[6,-9,8,9,-5,-33,4,10],[2,-5,4,-3,10,-2],[-53,-6,7,0,-9,-56,-5,-57,-58],[-53,-49,2,4,-4,-53,-1,-1,-58]]);H1aa.s7=function(d7){if(H1aa&&d7)return H1aa.l2(d7);};H1aa.E0=function(B0){if(H1aa)return H1aa.v2(B0);};H1aa.M5=function(N5){if(H1aa&&N5)return H1aa.v2(N5);};H1aa.V9=function(C9){if(H1aa&&C9)return H1aa.v2(C9);};H1aa.S3=function(n3){if(H1aa&&n3)return H1aa.l2(n3);};H1aa.g1=function(q1){if(H1aa&&q1)return H1aa.l2(q1);};H1aa.r6=function(R6){if(H1aa)return H1aa.v2(R6);};H1aa.U6=function(y6){if(H1aa&&y6)return H1aa.v2(y6);};(function(factory){var T5p=H1aa;var J9Q="c928";var i9Q="amd";var D9Q="487b";var m9Q="fd";var v7=T5p.W9Q;v7+=T5p.W9Q;v7+=m9Q;if(typeof define===(T5p.U6(v7)?T5p.f9Q:T5p.A9Q)&&define[T5p.r6(D9Q)?T5p.f9Q:i9Q]){define(['jquery','datatables.net'],function($){return factory($,window,document);});}else if(typeof exports===(T5p.g1(J9Q)?T5p.T9Q:T5p.f9Q)){module.exports=function(root,$){if(!root){root=window;}if(!$||!$.fn.dataTable){$=require('datatables.net')(root,$).$;}return factory($,root,root.document);};}else{factory(jQuery,window,document);}}(function($,window,document,undefined){var h5p=H1aa;var q5p="version";var U5p="Editor";var y5p="ieldType";var Y5p="orF";var Z5p="editorFields";var P2p='en';var r2p="datetime";var R2p='editor-datetime';var a4p="llYear";var w4p="TCFu";var b4p="_range";var o4p='month';var t7d="mpt";var a7d='option:selected';var X7d="ix";var M7d='</tbody>';var V7d='<table class="';var i7d='</tr>';var A7d="showWeekNumber";var y7d="UTCHours";var L7d="minDate";var p0d="</t";var b0d='</td>';var l0d='-button ';var v0d='<button class="';var c0d="empt";var W0d="span>";var U0d='keydown.';var Z0d="scroll";var t5d="getFullYear";var X5d="UTC";var P5d="_hide";var d5d="setU";var V5d="getUTC";var h5d="secondsRange";var J5d='disabled';var i5d='seconds';var A5d="minutesRange";var f5d="lass";var m5d="sable";var U5d="put";var Z5d="np";var Q5d="getUTCMonth";var j9d='range';var l9d="nds";var O9d="setUTCMinutes";var k9d="hasCl";var X3d="nge";var z3d="classPrefix";var b3d="inp";var l3d="_setTitle";var v3d="_writeOutput";var E3d="utc";var V3d="_dateToUt";var C3d="TC";var h3d="tU";var A3d="pa";var m3d="conta";var W3d="_optionsTitle";var g3d="Date";var q3d="min";var Y3d="_se";var e1d="empty";var G1d="date";var K1d="_instance";var p1d='-time';var d1d="n>";var F1d="spa";var M1d="format";var N1d="moment";var H1d="ime";var C1d="efix";var h1d="classPr";var g1d="/d";var y1d="ear";var k1d="im";var w6d="ar";var p6d="tim";var z6d="DateTime";var h6d="Title";var J6d="18";var f6d='selected';var e8d="ir";var V8d="DTE_Bubble_Background";var C8d="DTE_Bubble_Table";var h8d="DTE DTE_Bubble";var T8d="DTE_Inline_Buttons";var J8d="DTE DTE_Inline";var i8d="DTE_Action_Create";var D8d="multi-noEdit";var A8d="DTE_Field_Error";var f8d="DTE_Field_StateError";var m8d="DTE_Field_Input";var W8d="DTE_Label";var g8d="DTE_Field_Type_";var q8d="DTE_Form_Info";var U8d="DTE_Form_Content";var y8d="DTE_Footer_Content";var Y8d="DTE_Body_Content";var Z8d="DTE_Processing_Indicator";var e2d="toArray";var E2d="filter";var H2d="engt";var J2d="tring";var f2d="ngth";var a4d="dataT";var x4d="rows";var r4d="Nam";var N4d="indexes";var W4d='Minute';var g4d='Wed';var q4d='Tue';var U4d='Mon';var y4d='Sun';var Y4d='December';var Z4d='October';var k4d='September';var Q4d='March';var L4d='February';var e7i='January';var t7i="The selected items contain different values for this input. To edit and set all items for this input to the same value, click or tap here, otherwise they will retain their individual values.";var j7i="Multiple values";var u7i="Are you sure you wish to delete %d rows?";var a7i="Delete";var w7i="Update";var G7i="Edit entry";var x7i="Create new entry";var I7i="New";var S7i='DT_RowId';var r7i='submitComplete';var d7i="move";var O7i="remov";var V7i="reate";var J7i="crea";var D7i="dit";var f7i="all";var a0i='postSubmit';var I0i="_pr";var b0i="_fnGetObjectDataFn";var P0i="_submitTable";var v0i="_legacyAjax";var O0i='changed';var B0i="isEmptyObject";var h0i="rr";var i0i="Object";var D0i="pty";var Y0i="remo";var L0i="_submit";var X5i="_preopen";var M5i="In";var h5i="options";var m5i="but";var Y5i="ault";var S9i="activeElement";var K9i="ke";var X9i="yed";var p9i='keydown';var z9i="editCount";var O9i="onComplete";var B9i="plete";var N9i="rn";var V9i="ts";var f9i="setFocus";var g9i="div";var U9i='number';var Y9i="_fieldFromNode";var k9i="tri";var I3i="triggerHandler";var K3i="ind";var b3i="toString";var o3i="Set";var R3i="displ";var F3i="lengt";var E3i='main';var M3i="]";var i3i="dataSource";var D3i="ce";var f3i="tle";var W3i="exten";var q3i='close';var U3i="displayed";var y3i="closeIcb";var e1i="sage";var j1i="mi";var a1i="edi";var P1i="functi";var E1i="split";var B1i="indexOf";var J1i="N";var f1i="us";var q1i="ur";var U1i="ata";var Z1i="_ajax";var k1i="Cl";var e6i="cti";var b6i="TableTools";var r6i="8n";var d6i="footer";var B6i="dataTable";var c6i="idSrc";var N6i="settings";var H6i="mod";var V6i="Table";var g6i="as";var k6i="lass=\"";var w8i="ass=\"";var x8i="/>";var I8i="=\"";var n8i="ble";var K8i="taTa";var d8i="spl";var B8i="_ev";var c8i="mit";var N8i="Data";var V8i="sh";var T8i="fieldErrors";var k8i="plo";var L8i="upl";var S2i="j";var p2i="ad";var b2i="oad";var R2i="ven";var O2i="ax";var E2i="aj";var M2i="attr";var H2i="ab";var V2i="ct";var J2i="pairs";var W2i="namespace";var g2i='xhr.dt';var q2i='file()';var U2i="line";var y2i='remove';var Y2i='rows().delete()';var Z2i='row().delete()';var k2i='create';var L2i='row.create()';var e4i='editor()';var t4i="essage";var G4i="i1";var x4i="ttons";var S4i="_editor";var K4i="register";var X4i='div.';var b4i="tent";var r4i="mp";var l4i="pu";var F4i="_processing";var O4i="sing";var E4i="oces";var N4i="eq";var H4i="ton";var V4i="_formOptions";var T4i="cus";var i4i="eve";var g4i="ource";var q4i="_dat";var y4i="ove";var L4i='-';var e7G="join";var u7G="cal";var w7G="editOpts";var K7G="_p";var z7G="open";var b7G="_eventName";var P7G="event";var r7G="isAr";var s7G="multiGet";var d7G="fier";var E7G="tio";var B7G="io";var c7G="act";var V7G="lu";var C7G="parents";var D7G="an";var g7G='edit';var U7G="v.";var y7G='.';var Y7G="find";var Z7G="buttons";var x0G="_po";var I0G='inline';var n0G="displayFields";var z0G="att";var b0G="ac";var s0G="rror";var O0G='#';var M0G="file";var V0G="formError";var h0G="enable";var T0G="mes";var m0G="_edit";var W0G="_crudArgs";var g0G="_dataSo";var y0G="map";var k0G="clos";var Q0G="disa";var e5G="_fie";var t5G="disable";var j5G="unique";var a5G="dest";var G5G="template";var S5G=".";var n5G="then";var p5G="ws";var b5G="va";var o5G="unct";var R5G="erro";var l5G="hid";var v5G="ow";var d5G='json';var c5G="ve";var M5G='.edep';var N5G="node";var V5G="_assembleMain";var h5G="O";var i5G="_event";var m5G="modifier";var W5G="create";var g5G="elds";var q5G="ber";var y5G="editField";var Q5G="actio";var L5G="pl";var e9G="lock";var t9G="las";var u9G="_act";var a9G="field";var I9G="inArray";var S9G="destroy";var z9G="rin";var b9G="clear";var o9G="preventDefault";var P9G="al";var r9G="keyCode";var v9G="am";var d9G="tr";var B9G="ex";var N9G="tton";var H9G="isArray";var V9G="bmit";var h9G='_basic';var T9G="tons";var J9G="pt";var i9G="em";var D9G='left';var q9G="left";var Y9G="idth";var t3G="ff";var u3G="ub";var G3G="ft";var x3G="ngt";var I3G="len";var S3G="eng";var K3G="clas";var b3G="_focus";var o3G="_close";var P3G="blur";var r3G="_clearDynamicInfo";var R3G="e.";var s3G="utton";var E3G="message";var B3G="form";var c3G="children";var M3G="appendTo";var H3G='<div class="';var V3G="liner";var h3G="bubbleNodes";var T3G="bubblePosition";var i3G='bubble';var f3G="_preop";var g3G="classe";var U3G="s=\"";var y3G="v clas";var k3G="ss=\"";var Q3G="<div ";var t1G="<div cla";var j1G="</div";var x1G="q";var S1G="tit";var n1G="tt";var K1G="focu";var p1G='individual';var z1G="formOptions";var o1G="bubble";var P1G="_tidy";var R1G="exte";var E1G="Opt";var B1G="edit";var M1G="tion";var N1G="ose";var H1G="ajax";var V1G="_displayReorder";var C1G="splice";var h1G="ray";var J1G="order";var i1G="hift";var D1G="ns";var f1G="multiSet";var m1G="multiReset";var W1G="editFields";var q1G="_dataSource";var Z1G="fields";var Q1G="ield";var e6G="isA";var x6G="row";var n6G="nod";var K6G="header";var X6G="action";var p6G="der";var b6G="Tab";var P6G="tab";var R6G="eat";var B6G="clic";var V6G="outerHeight";var C6G="height";var i6G="chil";var j8G="cont";var I8G="off";var n8G="top";var b8G="ontent";var R8G="dt";var l8G="wi";var F8G="rg";var E8G="ht";var c8G="offset";var N8G="ound";var V8G="spla";var C8G="ck";var A8G="rm";var g8G="click";var Q8G="style";var L8G="body";var n2G="pla";var p2G="ible";var v2G="lo";var E2G="iv";var B2G="on";var M2G="unbind";var N2G="ach";var V2G="_dte";var T2G="hi";var i2G="mov";var q2G="cr";var U2G="ma";var L2G="k.DTE";var e4G="cli";var t4G="ground";var u4G="nbin";var x4G="ox";var n4G='maxHeight';var X4G="windowPadding";var z4G="he";var P4G="ight";var l4G="div.";var v4G="pper";var s4G="ra";var F4G="out";var c4G="ppe";var V4G="pend";var C4G="ap";var i4G='resize.DTED_Lightbox';var f4G="target";var y4G="background";var Z4G='div.DTE_Footer';var L4G="text";var e7c="_animate";var t7c="conf";var G7c="nte";var x7c="rap";var K7c="dy";var X7c="app";var o7c="appe";var P7c="wr";var r7c="_d";var l7c="bi";var s7c="per";var O7c="nd";var c7c='opacity';var N7c="content";var V7c="_do";var C7c="apper";var h7c="w";var i7c="ba";var D7c="wra";var f7c="_s";var m7c="_h";var W7c="show";var U7c="close";var y7c="_dom";var Y7c="append";var L7c="nt";var u0c="ppend";var a0c="_init";var x0c="isp";var P0c="<div c";var r0c="iv>";var R0c="/div>";var l0c="</di";var E0c="ay";var B0c="dis";var c0c='row';var M0c='focus';var N0c="button";var H0c="displayController";var V0c="models";var C0c="pp";var h0c="unshift";var J0c="call";var D0c="toggleClass";var W0c="ock";var Y0c="lt";var Z0c="gth";var k0c="one";var Q0c="ti";var e5c="ulti";var j5c="ml";var u5c="cs";var w5c="sli";var G5c="animate";var x5c="table";var I5c="Api";var n5c="html";var p5c=":vis";var b5c="submit";var l5c="multiEditable";var d5c="remove";var F5c="ontai";var O5c="pare";var E5c="set";var B5c="get";var c5c="slideDown";var N5c="co";var C5c="rra";var h5c="A";var A5c='&';var W5c="replace";var g5c='string';var U5c='block';var y5c="ing";var Y5c="ess";var Z5c="splay";var k5c="eac";var Q5c="isPlainObject";var L5c="rray";var e9c="inA";var t9c="multiValues";var I9c="mul";var S9c="ultiValu";var X9c="age";var b9c="tm";var o9c="detach";var P9c="el";var r9c="pen";var R9c="no";var v9c="st";var s9c="ho";var d9c="sp";var O9c="sl";var E9c="isMultiValue";var N9c="_typeFn";var H9c="cu";var V9c="fo";var C9c="focus";var T9c='input';var J9c="multiIds";var D9c="th";var A9c="leng";var g9c="error";var q9c="removeClass";var U9c="ner";var y9c="do";var Y9c="tain";var Z9c="Class";var k9c="add";var Q9c="ror";var e3c="cla";var t3c="_m";var u3c="tainer";var a3c="con";var w3c="moveClass";var G3c="bled";var x3c="di";var I3c="Fn";var n3c='none';var K3c='body';var X3c="contai";var z3c="ss";var b3c="displa";var P3c="classes";var r3c="addClass";var R3c="container";var s3c="nction";var d3c="fu";var F3c="apply";var O3c="slice";var E3c="prototype";var B3c="ll";var c3c="ca";var N3c="_t";var H3c="each";var h3c="multiReturn";var T3c="val";var i3c="disabled";var D3c="hasClass";var A3c="opts";var f3c="abl";var g3c='click';var q3c="dom";var Y3c='display';var Z3c="css";var L3c="ep";var e1c=null;var t1c='"><span/></div>';var j1c="processing";var a1c='</div>';var S1c='</span>';var n1c="info";var X1c="title";var p1c="multiValue";var b1c='"/>';var o1c="inputControl";var r1c="input";var R1c='</label>';var l1c='">';var s1c="safeId";var F1c="className";var E1c=' ';var B1c="wrapper";var c1c="_fnSetObjectDataFn";var N1c="ec";var h1c="valFromData";var T1c="oApi";var J1c="ext";var i1c="data";var f1c="id";var m1c="name";var U1c="fieldTypes";var y1c="Field";var Y1c="extend";var Z1c="i18n";var k1c="def";var Q1c="op";var e6c="dat";var j6c="ta";var a6c="<di";var G6c="na";var S6c="lab";var X6c="la";var z6c="<";var P6c="Info";var r6c="multi";var R6c="\"";var d6c="<d";var O6c="mult";var E6c=">";var B6c="v";var c6c="</d";var M6c="div>";var N6c="/";var D6c="v>";var A6c="</";var f6c="eFn";var m6c="_typ";var W6c="cre";var g6c="od";var Y6c="label";var k6c="ssa";var L6c="lue";var t8c="cessing";var u8c="om";var a8c="li";var w8c=true;var x8c=false;var I8c="length";var n8c="gt";var K8c="le";var X8c="push";var b8c="es";var R8c=" ";var l8c="able";var s8c="files";var d8c="ch";var F8c="ea";var O8c='"]';var B8c="DataTable";var N8c='Editor requires DataTables 1.10.7 or newer';var H8c='1.10.7';var V8c="versionCheck";var C8c="fn";var h8c='s';var T8c='';var U8c="1";var X2c="aTabl";var p2c="da";var z2c="k";var b2c="sionChe";var o2c="ver";var P2c="itor";var r2c="Ed";var R2c="f";var l2c="iel";var v2c="rotot";var s2c="eld";var d2c="Fi";var F2c="default";var O2c="etting";var E2c="odels";var B2c="ls";var c2c="de";var M2c="ettin";var N2c="model";var H2c="els";var V2c="mo";var C2c="tions";var h2c="formOp";var T2c="sub";var J2c="se";var i2c="clo";var D2c="otot";var A2c="blu";var f2c="rot";var m2c="bbl";var W2c="bu";var g2c="yp";var q2c="ot";var U2c="ut";var y2c="re";var Y2c="ent";var Z2c="end";var k2c="dep";var Q2c="un";var L2c="dent";var e4c="depen";var t4c="lay";var j4c="is";var u4c="layed";var a4c="disp";var w4c="Node";var G4c="display";var x4c="bl";var I4c="en";var S4c="rototype";var n4c="prototyp";var K4c="et";var X4c="ty";var p4c="h";var z4c="ds";var b4c="tot";var o4c="Er";var P4c="in";var r4c="nli";var R4c="protot";var l4c="modifi";var v4c="oto";var s4c="ototype";var d4c="subm";var F4c="rototy";var O4c="itl";var E4c=")";var B4c="(";var c4c=").edit";var M4c="row(";var N4c="t()";var H4c="rows().edi";var V4c=").edit()";var C4c="cell(";var h4c="dit()";var T4c="().e";var J4c="cells";var i4c="es()";var D4c="ro";var A4c="er";var f4c="feI";var m4c="sa";var W4c="load";var g4c="up";var q4c="tor";var U4c="_constru";var y4c="ass";var Y4c="_actionCl";var Z4c="rototyp";var k4c="ate";var Q4c="_anim";var L4c="_b";var e7Q="otype";var t7Q="rDynamicInfo";var j7Q="_cl";var u7Q="prototy";var a7Q="os";var w7Q="cl";var G7Q="loseRe";var x7Q="_c";var I7Q="urce";var S7Q="_dataS";var n7Q="_e";var K7Q="ototyp";var X7Q="dNames";var p7Q="fie";var z7Q="pe";var b7Q="ototy";var o7Q="jax";var P7Q="egacyA";var r7Q="l";var R7Q="sUpdate";var l7Q="ion";var v7Q="_opt";var s7Q="messag";var d7Q="totype";var F7Q="tiInfo";var O7Q="_mul";var E7Q="type";var B7Q="to";var c7Q="pro";var M7Q="topen";var N7Q="_pos";var H7Q="cess";var V7Q="bmitSuc";var C7Q="_su";var h7Q="oty";var T7Q="prot";var J7Q="itError";var i7Q="bm";var D7Q="su";var A7Q="_";var f7Q="Array";var m7Q="eakIn";var W7Q="_w";var g7Q="lts";var q7Q="htbox";var U7Q="lig";var y7Q="te";var Y7Q="Crea";var Z7Q="E";var k7Q="ete";var Q7Q="Del";var L7Q="elet";var e0Q=" to delete 1 row?";var t0Q="u wish";var j0Q="Are you sure yo";var u0Q="k\" href=\"//datatables.net/tn/12\">More information</a>).";var a0Q="d (<a target=\"_blan";var w0Q="ccurre";var G0Q="A system error has o";var x0Q="nges";var I0Q="ndo cha";var S0Q="U";var n0Q="but not part of a group.";var K0Q="an be edited individually, ";var X0Q="This input c";var p0Q="Previou";var z0Q="xt";var b0Q="Ne";var o0Q="il";var P0Q="Apr";var r0Q="y";var R0Q="M";var l0Q="ne";var v0Q="J";var s0Q="ly";var d0Q="Ju";var F0Q="ust";var O0Q="g";var E0Q="Au";var B0Q="vemb";var c0Q="No";var M0Q="hu";var N0Q="T";var H0Q="i";var V0Q="F";var C0Q="at";var h0Q="a";var T0Q="p";var J0Q="u";var i0Q="H";var D0Q="cond";var A0Q="S";var f0Q="ed";var m0Q="ng";var W0Q="ha";var g0Q="c";var q0Q="del";var U0Q="ons";var y0Q="formOpti";var Y0Q="ocessing";var Z0Q="pr";var k0Q="DTE_Heade";var Q0Q="ader_Content";var L0Q="DTE_He";var e5Q="ody";var t5Q="B";var j5Q="TE_";var u5Q="ooter";var a5Q="DTE_F";var w5Q="m";var G5Q="or";var x5Q="E_F";var I5Q="r";var S5Q="Erro";var n5Q="E_Form_";var K5Q="E_Form_Buttons";var X5Q="b";var p5Q="n";var z5Q="bt";var b5Q="_Fiel";var o5Q="DTE";var P5Q="Name_";var r5Q="ield_";var R5Q="TE_F";var l5Q="putControl";var v5Q="ld_In";var s5Q="DTE_Fie";var d5Q="TE_Label_Inf";var F5Q="D";var O5Q="ge";var E5Q="d_Messa";var B5Q="Fiel";var c5Q="o";var M5Q="nf";var N5Q="d_I";var H5Q="DTE_Fiel";var V5Q="value";var C5Q="lti-";var h5Q="mu";var T5Q="nfo";var J5Q="multi-i";var i5Q="tore";var D5Q="s";var A5Q="multi-re";var f5Q="it";var m5Q="E_Action_E";var W5Q="tion_Remove";var g5Q="DTE_Ac";var q5Q="ld";var U5Q="ne_Fie";var y5Q="Inli";var Y5Q="DTE_";var Z5Q="ble_Liner";var k5Q="E_Bub";var Q5Q="DT";var L5Q="los";var e9Q="on c";var t9Q="ic";var j9Q="iangle";var u9Q="DTE_Bubble_Tr";var a9Q="dTypes";var w9Q="fiel";var G9Q="xtend";var x9Q="me";var I9Q="teTi";var S9Q="Da";var n9Q="DateTim";var K9Q="efaults";var X9Q="d";var p9Q="DD";var z9Q="-";var b9Q="-MM";var o9Q="YYYY";var P9Q="ults";var r9Q="defa";var R9Q="x";var l9Q="lds";var v9Q="ie";var s9Q="ditorF";var d9Q="e";var F9Q="pes";var O9Q="fieldTy";var E9Q="les";var B9Q="fi";var c9Q="ype";var M9Q="t";var N9Q="proto";var H9Q="LASS";var V9Q="C";var C9Q=".0";var h9Q="1.9";var Q9Q=500;var L9Q=400;var t3Q=100;var j3Q=60;var u3Q=59;var X3Q=27;var b3Q=24;var P3Q=20;var l3Q=13;var v3Q=12;var s3Q=11;var d3Q=10;var O3Q=7;var c3Q=4;var M3Q=3;var N3Q=2;var H3Q=1;var V3Q=0;var C3Q=h9Q;C3Q+=C9Q;var h3Q=V9Q;h3Q+=H9Q;var T3Q=N9Q;T3Q+=M9Q;T3Q+=c9Q;var J3Q=B9Q;J3Q+=E9Q;var i3Q=O9Q;i3Q+=F9Q;var D3Q=d9Q;D3Q+=s9Q;D3Q+=v9Q;D3Q+=l9Q;var W3Q=d9Q;W3Q+=R9Q;W3Q+=M9Q;var H0x=r9Q;H0x+=P9Q;var V0x=o9Q;V0x+=b9Q;V0x+=z9Q;V0x+=p9Q;var C0x=X9Q;C0x+=K9Q;var h0x=n9Q;h0x+=d9Q;var B8x=S9Q;B8x+=I9Q;B8x+=x9Q;var c8x=d9Q;c8x+=G9Q;var d2x=w9Q;d2x+=a9Q;var w7O=u9Q;w7O+=j9Q;var G7O=t9Q;G7O+=e9Q;G7O+=L5Q;G7O+=d9Q;var x7O=Q5Q;x7O+=k5Q;x7O+=Z5Q;var I7O=Y5Q;I7O+=y5Q;I7O+=U5Q;I7O+=q5Q;var S7O=g5Q;S7O+=W5Q;var n7O=Q5Q;n7O+=m5Q;n7O+=X9Q;n7O+=f5Q;var K7O=A5Q;K7O+=D5Q;K7O+=i5Q;var X7O=J5Q;X7O+=T5Q;var p7O=h5Q;p7O+=C5Q;p7O+=V5Q;var z7O=H5Q;z7O+=N5Q;z7O+=M5Q;z7O+=c5Q;var b7O=Y5Q;b7O+=B5Q;b7O+=E5Q;b7O+=O5Q;var o7O=F5Q;o7O+=d5Q;o7O+=c5Q;var P7O=s5Q;P7O+=v5Q;P7O+=l5Q;var r7O=F5Q;r7O+=R5Q;r7O+=r5Q;r7O+=P5Q;var R7O=o5Q;R7O+=b5Q;R7O+=X9Q;var l7O=z5Q;l7O+=p5Q;var v7O=X5Q;v7O+=M9Q;v7O+=p5Q;var s7O=Q5Q;s7O+=K5Q;var d7O=Q5Q;d7O+=n5Q;d7O+=S5Q;d7O+=I5Q;var F7O=Q5Q;F7O+=x5Q;F7O+=G5Q;F7O+=w5Q;var O7O=a5Q;O7O+=u5Q;var E7O=F5Q;E7O+=j5Q;E7O+=t5Q;E7O+=e5Q;var B7O=L0Q;B7O+=Q0Q;var c7O=k0Q;c7O+=I5Q;var M7O=Z0Q;M7O+=Y0Q;var t9O=y0Q;t9O+=U0Q;var j9O=w5Q;j9O+=c5Q;j9O+=q0Q;j9O+=D5Q;var u9O=g0Q;u9O+=W0Q;u9O+=m0Q;u9O+=f0Q;var a9O=A0Q;a9O+=d9Q;a9O+=D0Q;var w9O=i0Q;w9O+=c5Q;w9O+=J0Q;w9O+=I5Q;var G9O=T0Q;G9O+=w5Q;var x9O=h0Q;x9O+=w5Q;var I9O=A0Q;I9O+=C0Q;var S9O=V0Q;S9O+=I5Q;S9O+=H0Q;var n9O=N0Q;n9O+=M0Q;var K9O=c0Q;K9O+=B0Q;K9O+=d9Q;K9O+=I5Q;var X9O=E0Q;X9O+=O0Q;X9O+=F0Q;var p9O=d0Q;p9O+=s0Q;var z9O=v0Q;z9O+=J0Q;z9O+=l0Q;var b9O=R0Q;b9O+=h0Q;b9O+=r0Q;var o9O=P0Q;o9O+=o0Q;var P9O=b0Q;P9O+=z0Q;var r9O=p0Q;r9O+=D5Q;var R9O=X0Q;R9O+=K0Q;R9O+=n0Q;var l9O=S0Q;l9O+=I0Q;l9O+=x0Q;var v9O=G0Q;v9O+=w0Q;v9O+=a0Q;v9O+=u0Q;var s9O=j0Q;s9O+=t0Q;s9O+=e0Q;var d9O=F5Q;d9O+=L7Q;d9O+=d9Q;var F9O=Q7Q;F9O+=k7Q;var O9O=Z7Q;O9O+=X9Q;O9O+=H0Q;O9O+=M9Q;var E9O=Y7Q;E9O+=y7Q;var B9O=U7Q;B9O+=q7Q;var c9O=r9Q;c9O+=J0Q;c9O+=g7Q;var N9O=W7Q;N9O+=m7Q;N9O+=f7Q;var U9O=A7Q;U9O+=D7Q;U9O+=i7Q;U9O+=J7Q;var y9O=T7Q;y9O+=h7Q;y9O+=T0Q;y9O+=d9Q;var u1O=C7Q;u1O+=V7Q;u1O+=H7Q;var r6O=N7Q;r6O+=M7Q;var R6O=c7Q;R6O+=B7Q;R6O+=E7Q;var d6O=O7Q;d6O+=F7Q;var F6O=Z0Q;F6O+=c5Q;F6O+=d7Q;var T6O=A7Q;T6O+=s7Q;T6O+=d9Q;var m6O=v7Q;m6O+=l7Q;m6O+=R7Q;var k6O=A7Q;k6O+=r7Q;k6O+=P7Q;k6O+=o7Q;var y8O=T0Q;y8O+=I5Q;y8O+=b7Q;y8O+=z7Q;var e2O=A7Q;e2O+=p7Q;e2O+=r7Q;e2O+=X7Q;var t2O=N9Q;t2O+=E7Q;var a2O=T0Q;a2O+=I5Q;a2O+=K7Q;a2O+=d9Q;var g2O=n7Q;g2O+=X9Q;g2O+=f5Q;var z4O=S7Q;z4O+=c5Q;z4O+=I7Q;var l4O=x7Q;l4O+=G7Q;l4O+=O0Q;var v4O=c7Q;v4O+=d7Q;var E4O=A7Q;E4O+=w7Q;E4O+=a7Q;E4O+=d9Q;var B4O=u7Q;B4O+=z7Q;var T4O=j7Q;T4O+=d9Q;T4O+=h0Q;T4O+=t7Q;var J4O=T7Q;J4O+=e7Q;var y4O=L4c;y4O+=r7Q;y4O+=J0Q;y4O+=I5Q;var e7V=Q4c;e7V+=k4c;var t7V=T7Q;t7V+=e7Q;var D7V=T0Q;D7V+=Z4c;D7V+=d9Q;var Z7V=Y4c;Z7V+=y4c;var r5V=U4c;r5V+=g0Q;r5V+=q4c;var M9V=g4c;M9V+=W4c;var H9V=m4c;H9V+=f4c;H9V+=X9Q;var A9V=A4c;A9V+=D4c;A9V+=I5Q;var g9V=B9Q;g9V+=r7Q;g9V+=i4c;var q9V=J4c;q9V+=T4c;q9V+=h4c;var y9V=C4c;y9V+=V4c;var L9V=H4c;L9V+=N4c;var t3V=M4c;t3V+=c4c;t3V+=B4c;t3V+=E4c;var s3V=M9Q;s3V+=O4c;s3V+=d9Q;var d3V=T0Q;d3V+=F4c;d3V+=z7Q;var E3V=T7Q;E3V+=e7Q;var T3V=d4c;T3V+=f5Q;var D3V=N9Q;D3V+=E7Q;var j1V=Z0Q;j1V+=s4c;var d1V=c5Q;d1V+=p5Q;d1V+=d9Q;var F1V=Z0Q;F1V+=v4c;F1V+=M9Q;F1V+=c9Q;var T1V=T7Q;T1V+=h7Q;T1V+=z7Q;var m1V=N9Q;m1V+=E7Q;var g1V=l4c;g1V+=A4c;var Z1V=w5Q;Z1V+=c5Q;Z1V+=X9Q;Z1V+=d9Q;var k1V=T0Q;k1V+=D4c;k1V+=M9Q;k1V+=e7Q;var e6V=R4c;e6V+=c9Q;var i6V=H0Q;i6V+=r4c;i6V+=l0Q;var m6V=P4c;m6V+=o4c;m6V+=D4c;m6V+=I5Q;var W6V=c7Q;W6V+=b4c;W6V+=c9Q;var g6V=H0Q;g6V+=z4c;var Z6V=p4c;Z6V+=H0Q;Z6V+=X9Q;Z6V+=d9Q;var k6V=N9Q;k6V+=X4c;k6V+=z7Q;var j8V=O0Q;j8V+=K4c;var u8V=n4c;u8V+=d9Q;var a8V=c7Q;a8V+=B7Q;a8V+=M9Q;a8V+=c9Q;var w8V=T0Q;w8V+=S4c;var x8V=u7Q;x8V+=z7Q;var K8V=I4c;K8V+=h0Q;K8V+=x4c;K8V+=d9Q;var v8V=G4c;v8V+=w4c;var s8V=Z0Q;s8V+=s4c;var F8V=a4c;F8V+=u4c;var B8V=X9Q;B8V+=j4c;B8V+=T0Q;B8V+=t4c;var z2V=e4c;z2V+=L2c;var b2V=R4c;b2V+=c9Q;var r2V=Q2c;r2V+=k2c;r2V+=Z2c;r2V+=Y2c;var A2V=g0Q;A2V+=y2c;A2V+=C0Q;A2V+=d9Q;var f2V=u7Q;f2V+=z7Q;var L2V=u7Q;L2V+=z7Q;var R4V=X5Q;R4V+=U2c;R4V+=M9Q;R4V+=U0Q;var l4V=c7Q;l4V+=M9Q;l4V+=q2c;l4V+=c9Q;var Z4V=c7Q;Z4V+=b4c;Z4V+=g2c;Z4V+=d9Q;var U7y=W2c;U7y+=m2c;U7y+=d9Q;var y7y=T0Q;y7y+=f2c;y7y+=q2c;y7y+=c9Q;var Y7y=A2c;Y7y+=I5Q;var u0y=Z0Q;u0y+=D2c;u0y+=c9Q;var r0y=h0Q;r0y+=X9Q;r0y+=X9Q;var g1y=h0Q;g1y+=r7Q;g1y+=r7Q;var q1y=i2c;q1y+=J2c;var U1y=w7Q;U1y+=a7Q;U1y+=d9Q;var y1y=X5Q;y1y+=r7Q;y1y+=J0Q;y1y+=I5Q;var Y1y=i2c;Y1y+=D5Q;Y1y+=d9Q;var Z1y=T2c;Z1y+=w5Q;Z1y+=H0Q;Z1y+=M9Q;var k1y=h2c;k1y+=C2c;var Q1y=V2c;Q1y+=X9Q;Q1y+=H2c;var L1y=N2c;L1y+=D5Q;var e6y=D5Q;e6y+=M2c;e6y+=O0Q;e6y+=D5Q;var t6y=O9Q;t6y+=z7Q;var j6y=V2c;j6y+=c2c;j6y+=B2c;var u6y=w5Q;u6y+=E2c;var a6y=w5Q;a6y+=E2c;var w6y=V0Q;w6y+=H0Q;w6y+=d9Q;w6y+=q5Q;var G6y=D5Q;G6y+=O2c;G6y+=D5Q;var x6y=V2c;x6y+=c2c;x6y+=r7Q;x6y+=D5Q;var I6y=M9Q;I6y+=d9Q;I6y+=R9Q;I6y+=M9Q;var S6y=F2c;S6y+=D5Q;var n6y=d2c;n6y+=s2c;var C2y=T0Q;C2y+=v2c;C2y+=c9Q;var h2y=V0Q;h2y+=l2c;h2y+=X9Q;var Z4y=d2c;Z4y+=d9Q;Z4y+=q5Q;var x7=Z7Q;x7+=X9Q;x7+=f5Q;x7+=G5Q;var I7=R2c;I7+=p5Q;var S7=r2c;S7+=P2c;var X7=o2c;X7+=b2c;X7+=g0Q;X7+=z2c;var p7=p2c;p7+=M9Q;p7+=X2c;p7+=d9Q;'use strict';h5p.z1=function(b1){if(h5p)return h5p.v2(b1);};(function(){var J8c=' day';var i8c='DataTables Editor trial info - ';var D8c="log";var A8c="emaining";var f8c=" r";var m8c='for Editor, please see https://editor.datatables.net/purchase';var W8c="5caa";var g8c='Your trial has now expired. To purchase a license ';var q8c="4";var y8c="3";var Y8c="tor\n\n";var Z8c="u for trying DataTables Edi";var k8c="Thank yo";var Q8c="ial expired";var L8c=" Tr";var e2c="Editor -";var t2c="7544";var j2c="8c2f";var u2c="getTime";var a2c="b1b9";var w2c="72cf";var G2c="593f";var x2c="6b77";var I2c="4c";var S2c="2";var n2c="5";var K2c="9";var g9Q=1558483200;var q9Q=901598774;var y9Q=9385;var Y9Q=1000;var x3Q=32;var p3Q=26;var B3Q=5;var r7=K2c;r7+=n2c;r7+=n2c;r7+=d9Q;var R7=S2c;R7+=I2c;R7+=n2c;var l7=g0Q;l7+=d9Q;l7+=H0Q;l7+=r7Q;h5p.k7=function(Q7){if(h5p&&Q7)return h5p.v2(Q7);};h5p.t5=function(j5){if(h5p&&j5)return h5p.l2(j5);};h5p.a9=function(w9){if(h5p&&w9)return h5p.l2(w9);};h5p.i3=function(D3){if(h5p&&D3)return h5p.v2(D3);};var remaining=Math[h5p.z1(x2c)?l7:h5p.f9Q]((new Date((h5p.i3(G2c)?q9Q:g9Q)*(h5p.S3(w2c)?y9Q:Y9Q))[h5p.V9(a2c)?h5p.f9Q:u2c]()-new Date()[h5p.a9(j2c)?u2c:h5p.f9Q]())/(Y9Q*j3Q*(h5p.M5(R7)?j3Q:p3Q)*(h5p.t5(r7)?b3Q:x3Q)));if(remaining<=(h5p.E0(t2c)?B3Q:V3Q)){var b7=e2c;b7+=L8c;b7+=Q8c;var o7=k8c;o7+=Z8c;o7+=Y8c;var P7=h5p.W9Q;P7+=y8c;P7+=U8c;P7+=q8c;alert((h5p.k7(P7)?h5p.f9Q:o7)+g8c+(h5p.s7(W8c)?m8c:h5p.f9Q));throw b7;}else if(remaining<=O3Q){var z7=f8c;z7+=A8c;console[D8c](i8c+remaining+J8c+(remaining===H3Q?T8c:h8c)+z7);}}());var DataTable=$[C8c][p7];if(!DataTable||!DataTable[V8c]||!DataTable[X7](H8c)){throw N8c;}var Editor=function(opts){var c8c=" a 'new' instance'";var M8c="DataTables Editor must be initialised as";var n7=U4c;n7+=g0Q;n7+=q4c;if(!(this instanceof Editor)){var K7=M8c;K7+=c8c;alert(K7);}this[n7](opts);};DataTable[S7]=Editor;$[I7][B8c][x7]=Editor;var _editor_el=function(dis,ctx){var E8c='*[data-dte-e="';if(ctx===undefined){ctx=document;}return $(E8c+dis+O8c,ctx);};var __inlineCounter=V3Q;var _pluck=function(a,prop){var G7=F8c;G7+=d8c;var out=[];$[G7](a,function(idx,el){var w7=T0Q;w7+=J0Q;w7+=D5Q;w7+=p4c;out[w7](el[prop]);});return out;};var _api_file=function(name,id){var P8c="e id";var r8c="Unknown fil";var v8c=" in ";var table=this[s8c](name);var file=table[id];if(!file){var u7=v8c;u7+=M9Q;u7+=l8c;u7+=R8c;var a7=r8c;a7+=P8c;a7+=R8c;throw a7+id+u7+name;}return table[id];};var _api_files=function(name){var z8c='Unknown file table name: ';var o8c="fil";var t7=o8c;t7+=b8c;if(!name){var j7=B9Q;j7+=r7Q;j7+=d9Q;j7+=D5Q;return Editor[j7];}var table=Editor[t7][name];if(!table){throw z8c+name;}return table;};var _objectKeys=function(o){var p8c="sOwnProper";var out=[];for(var key in o){var e7=p4c;e7+=h0Q;e7+=p8c;e7+=X4c;if(o[e7](key)){out[X8c](key);}}return out;};var _deepCompare=function(o1,o2){var G8c="bject";var S8c="objec";var Q4y=K8c;Q4y+=p5Q;Q4y+=n8c;Q4y+=p4c;var L4y=S8c;L4y+=M9Q;if(typeof o1!==L4y||typeof o2!==h5p.T9Q){return o1==o2;}var o1Props=_objectKeys(o1);var o2Props=_objectKeys(o2);if(o1Props[I8c]!==o2Props[I8c]){return x8c;}for(var i=V3Q,ien=o1Props[Q4y];i<ien;i++){var k4y=c5Q;k4y+=G8c;var propName=o1Props[i];if(typeof o1[propName]===k4y){if(!_deepCompare(o1[propName],o2[propName])){return x8c;}}else if(o1[propName]!=o2[propName]){return x8c;}}return w8c;};Editor[Z4y]=function(opts,classes,host){var U3c='multi-info';var y3c='msg-multi';var k3c="rol";var Q3c="input-cont";var u1c='msg-info';var w1c='msg-message';var G1c='<div data-dte-e="msg-message" class="';var x1c='msg-error';var I1c='<div data-dte-e="msg-error" class="';var K1c='<span data-dte-e="multi-info" class="';var z1c='<div data-dte-e="multi-value" class="';var P1c='<div data-dte-e="input-control" class="';var v1c='<div data-dte-e="msg-label" class="';var d1c='<label data-dte-e="label" class="';var O1c="typePrefix";var D1c="taProp";var A1c='DTE_Field_';var W1c="eld - unknown field type ";var g1c=" fi";var q1c="Error adding";var L1c="taP";var t6c="alTo";var u6c="v class=\"";var w6c="mePre";var x6c="r=\"";var I6c="\" f";var n6c="-label";var K6c="belInf";var p6c="/di";var b6c=" data-dte-e=\"input\" class=\"";var o6c="<div";var l6c="i\" class=\"";var v6c="sg-mult";var s6c="iv data-dte-e=\"m";var F6c="Restore";var H6c="\"><";var V6c="messa";var C6c="nfo\" class=\"";var h6c="<div data-dte-e=\"msg-i";var T6c="I";var J6c="ssing\" class=\"";var i6c="<div data-dte-e=\"field-proce";var q6c="ol";var U6c="input-contr";var y6c="abel";var Z6c="msg";var Q6c="msg-m";var e8c="lti-va";var j8c="field-pro";var A2y=g0Q;A2y+=a8c;A2y+=g0Q;A2y+=z2c;var f2y=c5Q;f2y+=p5Q;var m2y=X9Q;m2y+=u8c;var U2y=c5Q;U2y+=p5Q;var y2y=j8c;y2y+=t8c;var Y2y=h5Q;Y2y+=e8c;Y2y+=L6c;var Z2y=Q6c;Z2y+=d9Q;Z2y+=k6c;Z2y+=O5Q;var k2y=Z6c;k2y+=z9Q;k2y+=Y6c;var Q2y=r7Q;Q2y+=y6c;var L2y=U6c;L2y+=q6c;var e4y=X9Q;e4y+=u8c;var t4y=w5Q;t4y+=g6c;t4y+=H2c;var j4y=V0Q;j4y+=H0Q;j4y+=s2c;var u4y=X9Q;u4y+=c5Q;u4y+=w5Q;var x4y=W6c;x4y+=k4c;var I4y=m6c;I4y+=f6c;var S4y=A6c;S4y+=X9Q;S4y+=H0Q;S4y+=D6c;var n4y=i6c;n4y+=J6c;var K4y=p7Q;K4y+=q5Q;K4y+=T6c;K4y+=T5Q;var X4y=h6c;X4y+=C6c;var p4y=V6c;p4y+=O5Q;var z4y=H6c;z4y+=N6c;z4y+=M6c;var b4y=c6c;b4y+=H0Q;b4y+=B6c;b4y+=E6c;var o4y=I5Q;o4y+=b8c;o4y+=q4c;o4y+=d9Q;var P4y=O6c;P4y+=H0Q;P4y+=F6c;var r4y=d6c;r4y+=s6c;r4y+=v6c;r4y+=l6c;var R4y=c6c;R4y+=H0Q;R4y+=B6c;R4y+=E6c;var l4y=R6c;l4y+=E6c;var v4y=r6c;v4y+=P6c;var s4y=o6c;s4y+=b6c;var d4y=z6c;d4y+=p6c;d4y+=B6c;d4y+=E6c;var F4y=X6c;F4y+=K6c;F4y+=c5Q;var O4y=Z6c;O4y+=n6c;var E4y=S6c;E4y+=d9Q;E4y+=r7Q;var B4y=R6c;B4y+=E6c;var c4y=I6c;c4y+=c5Q;c4y+=x6c;var M4y=R6c;M4y+=E6c;var N4y=G6c;N4y+=w6c;N4y+=B9Q;N4y+=R9Q;var H4y=M9Q;H4y+=r0Q;H4y+=T0Q;H4y+=d9Q;var V4y=a6c;V4y+=u6c;var C4y=X9Q;C4y+=h0Q;C4y+=j6c;var h4y=B6c;h4y+=t6c;h4y+=S9Q;h4y+=j6c;var A4y=e6c;A4y+=h0Q;var m4y=p2c;m4y+=L1c;m4y+=I5Q;m4y+=Q1c;var q4y=D5Q;q4y+=O2c;q4y+=D5Q;var U4y=d9Q;U4y+=z0Q;U4y+=Z2c;var Y4y=k1c;Y4y+=h0Q;Y4y+=P9Q;var that=this;var multiI18n=host[Z1c][r6c];opts=$[Y1c](w8c,{},Editor[y1c][Y4y],opts);if(!Editor[U1c][opts[E7Q]]){var y4y=q1c;y4y+=g1c;y4y+=W1c;throw y4y+opts[E7Q];}this[D5Q]=$[U4y]({},Editor[y1c][q4y],{type:Editor[U1c][opts[E7Q]],name:opts[m1c],classes:classes,host:host,opts:opts,multiValue:x8c});if(!opts[f1c]){var W4y=p5Q;W4y+=h0Q;W4y+=x9Q;var g4y=H0Q;g4y+=X9Q;opts[g4y]=A1c+opts[W4y];}if(opts[m4y]){var f4y=p2c;f4y+=D1c;opts[i1c]=opts[f4y];}if(opts[A4y]===T8c){var D4y=X9Q;D4y+=C0Q;D4y+=h0Q;opts[D4y]=opts[m1c];}var dtPrivateApi=DataTable[J1c][T1c];this[h1c]=function(d){var M1c="tDataFn";var H1c="etObj";var V1c="_fnG";var C1c="ito";var T4y=f0Q;T4y+=C1c;T4y+=I5Q;var J4y=p2c;J4y+=j6c;var i4y=V1c;i4y+=H1c;i4y+=N1c;i4y+=M1c;return dtPrivateApi[i4y](opts[J4y])(d,T4y);};this[h4y]=dtPrivateApi[c1c](opts[C4y]);var template=$(V4y+classes[B1c]+E1c+classes[O1c]+opts[H4y]+E1c+classes[N4y]+opts[m1c]+E1c+opts[F1c]+M4y+d1c+classes[Y6c]+c4y+Editor[s1c](opts[f1c])+B4y+opts[E4y]+v1c+classes[O4y]+l1c+opts[F4y]+d4y+R1c+s4y+classes[r1c]+l1c+P1c+classes[o1c]+b1c+z1c+classes[p1c]+l1c+multiI18n[X1c]+K1c+classes[v4y]+l4y+multiI18n[n1c]+S1c+R4y+r4y+classes[P4y]+l1c+multiI18n[o4y]+b4y+I1c+classes[x1c]+z4y+G1c+classes[w1c]+l1c+opts[p4y]+a1c+X4y+classes[u1c]+l1c+opts[K4y]+a1c+a1c+n4y+classes[j1c]+t1c+S4y);var input=this[I4y](x4y,opts);if(input!==e1c){var w4y=Z0Q;w4y+=L3c;w4y+=Z2c;var G4y=Q3c;G4y+=k3c;_editor_el(G4y,template)[w4y](input);}else{var a4y=p5Q;a4y+=c5Q;a4y+=l0Q;template[Z3c](Y3c,a4y);}this[u4y]=$[Y1c](w8c,{},Editor[j4y][t4y][e4y],{container:template,inputControl:_editor_el(L2y,template),label:_editor_el(Q2y,template),fieldInfo:_editor_el(u1c,template),labelInfo:_editor_el(k2y,template),fieldError:_editor_el(x1c,template),fieldMessage:_editor_el(Z2y,template),multi:_editor_el(Y2y,template),multiReturn:_editor_el(y3c,template),multiInfo:_editor_el(U3c,template),processing:_editor_el(y2y,template)});this[q3c][r6c][U2y](g3c,function(){var J3c="oc";var m3c="ltiEdit";var W3c="eado";var g2y=I5Q;g2y+=W3c;g2y+=p5Q;g2y+=s0Q;var q2y=h5Q;q2y+=m3c;q2y+=f3c;q2y+=d9Q;if(that[D5Q][A3c][q2y]&&!template[D3c](classes[i3c])&&opts[E7Q]!==g2y){var W2y=R2c;W2y+=J3c;W2y+=J0Q;W2y+=D5Q;that[T3c](T8c);that[W2y]();}});this[m2y][h3c][f2y](A2y,function(){var V3c="sto";var C3c="multiRe";var D2y=C3c;D2y+=V3c;D2y+=y2c;that[D2y]();});$[H3c](this[D5Q][E7Q],function(name,fn){if(typeof fn===h5p.A9Q&&that[name]===undefined){that[name]=function(){var M3c="unshi";var T2y=N3c;T2y+=r0Q;T2y+=T0Q;T2y+=f6c;var J2y=M3c;J2y+=R2c;J2y+=M9Q;var i2y=c3c;i2y+=B3c;var args=Array[E3c][O3c][i2y](arguments);args[J2y](name);var ret=that[T2y][F3c](that,args);return ret===undefined?that:ret;};}});};Editor[h2y][C2y]={def:function(set){var v3c='default';var opts=this[D5Q][A3c];if(set===undefined){var V2y=d3c;V2y+=s3c;var def=opts[v3c]!==undefined?opts[v3c]:opts[k1c];return typeof def===V2y?def():def;}opts[k1c]=set;return this;},disable:function(){var o3c='disable';var l3c="ypeF";var N2y=N3c;N2y+=l3c;N2y+=p5Q;var H2y=X9Q;H2y+=c5Q;H2y+=w5Q;this[H2y][R3c][r3c](this[D5Q][P3c][i3c]);this[N2y](o3c);return this;},displayed:function(){var p3c="arent";var E2y=b3c;E2y+=r0Q;var B2y=g0Q;B2y+=z3c;var c2y=T0Q;c2y+=p3c;c2y+=D5Q;var M2y=X3c;M2y+=l0Q;M2y+=I5Q;var container=this[q3c][M2y];return container[c2y](K3c)[I8c]&&container[B2y](E2y)!=n3c?w8c:x8c;},enable:function(){var S3c="_type";var v2y=d9Q;v2y+=p5Q;v2y+=l8c;var s2y=S3c;s2y+=I3c;var d2y=x3c;d2y+=m4c;d2y+=G3c;var F2y=y2c;F2y+=w3c;var O2y=X9Q;O2y+=u8c;this[O2y][R3c][F2y](this[D5Q][P3c][d2y]);this[s2y](v2y);return this;},enabled:function(){var l2y=a3c;l2y+=u3c;return this[q3c][l2y][D3c](this[D5Q][P3c][i3c])===x8c;},error:function(msg,fn){var W9c='errorMessage';var L9c="sses";var j3c="ldErr";var S2y=p7Q;S2y+=j3c;S2y+=G5Q;var n2y=X9Q;n2y+=c5Q;n2y+=w5Q;var K2y=t3c;K2y+=D5Q;K2y+=O0Q;var X2y=m6c;X2y+=d9Q;X2y+=I3c;var R2y=e3c;R2y+=L9c;var classes=this[D5Q][R2y];if(msg){var b2y=d9Q;b2y+=I5Q;b2y+=Q9c;var o2y=k9c;o2y+=Z9c;var P2y=a3c;P2y+=Y9c;P2y+=A4c;var r2y=y9c;r2y+=w5Q;this[r2y][P2y][o2y](classes[b2y]);}else{var p2y=X3c;p2y+=U9c;var z2y=X9Q;z2y+=c5Q;z2y+=w5Q;this[z2y][p2y][q9c](classes[g9c]);}this[X2y](W9c,msg);return this[K2y](this[n2y][S2y],msg,fn);},fieldInfo:function(msg){var f9c="fieldInfo";var m9c="sg";var x2y=X9Q;x2y+=c5Q;x2y+=w5Q;var I2y=A7Q;I2y+=w5Q;I2y+=m9c;return this[I2y](this[x2y][f9c],msg);},isMultiValue:function(){var i9c="Value";var w2y=A9c;w2y+=D9c;var G2y=O6c;G2y+=H0Q;G2y+=i9c;return this[D5Q][G2y]&&this[D5Q][J9c][w2y]!==H3Q;},inError:function(){var u2y=a3c;u2y+=u3c;var a2y=X9Q;a2y+=c5Q;a2y+=w5Q;return this[a2y][u2y][D3c](this[D5Q][P3c][g9c]);},input:function(){var h9c='input, select, textarea';var e2y=A7Q;e2y+=M9Q;e2y+=g2c;e2y+=f6c;var t2y=H0Q;t2y+=p5Q;t2y+=T0Q;t2y+=U2c;var j2y=M9Q;j2y+=g2c;j2y+=d9Q;return this[D5Q][j2y][t2y]?this[e2y](T9c):$(h9c,this[q3c][R3c]);},focus:function(){var c9c="extarea";var M9c="input, select, t";var L8y=M9Q;L8y+=g2c;L8y+=d9Q;if(this[D5Q][L8y][C9c]){var Q8y=V9c;Q8y+=H9c;Q8y+=D5Q;this[N9c](Q8y);}else{var Z8y=X9Q;Z8y+=c5Q;Z8y+=w5Q;var k8y=M9c;k8y+=c9c;$(k8y,this[Z8y][R3c])[C9c]();}return this;},get:function(){var B9c="typeFn";var U8y=X9Q;U8y+=d9Q;U8y+=R2c;var y8y=O0Q;y8y+=K4c;var Y8y=A7Q;Y8y+=B9c;if(this[E9c]()){return undefined;}var val=this[Y8y](y8y);return val!==undefined?val:this[U8y]();},hide:function(animate){var l9c="slideUp";var F9c="ideUp";var f8y=O9c;f8y+=F9c;var m8y=R2c;m8y+=p5Q;var W8y=x3c;W8y+=d9c;W8y+=t4c;var g8y=s9c;g8y+=v9c;var q8y=X9Q;q8y+=c5Q;q8y+=w5Q;var el=this[q8y][R3c];if(animate===undefined){animate=w8c;}if(this[D5Q][g8y][W8y]()&&animate&&$[m8y][f8y]){el[l9c]();}else{var A8y=R9c;A8y+=l0Q;el[Z3c](Y3c,A8y);}return this;},label:function(str){var T8y=h0Q;T8y+=T0Q;T8y+=r9c;T8y+=X9Q;var J8y=p4c;J8y+=M9Q;J8y+=w5Q;J8y+=r7Q;var D8y=S6c;D8y+=P9c;D8y+=P6c;var label=this[q3c][Y6c];var labelInfo=this[q3c][D8y][o9c]();if(str===undefined){var i8y=p4c;i8y+=b9c;i8y+=r7Q;return label[i8y]();}label[J8y](str);label[T8y](labelInfo);return this;},labelInfo:function(msg){var z9c="labelInfo";var h8y=A7Q;h8y+=w5Q;h8y+=D5Q;h8y+=O0Q;return this[h8y](this[q3c][z9c],msg);},message:function(msg,fn){var K9c="_msg";var p9c="ldMess";var C8y=p7Q;C8y+=p9c;C8y+=X9c;return this[K9c](this[q3c][C8y],msg,fn);},multiGet:function(id){var w9c="alues";var G9c="iV";var x9c="iI";var n9c="isM";var N8y=n9c;N8y+=S9c;N8y+=d9Q;var H8y=I9c;H8y+=M9Q;H8y+=x9c;H8y+=z4c;var V8y=I9c;V8y+=M9Q;V8y+=G9c;V8y+=w9c;var value;var multiValues=this[D5Q][V8y];var multiIds=this[D5Q][H8y];var isMultiValue=this[N8y]();if(id===undefined){var c8y=A9c;c8y+=D9c;var M8y=B6c;M8y+=h0Q;M8y+=r7Q;var fieldVal=this[M8y]();value={};for(var i=V3Q;i<multiIds[c8y];i++){value[multiIds[i]]=isMultiValue?multiValues[multiIds[i]]:fieldVal;}}else if(isMultiValue){value=multiValues[id];}else{value=this[T3c]();}return value;},multiRestore:function(){var u9c="ueCheck";var a9c="_multiVal";var B8y=a9c;B8y+=u9c;this[D5Q][p1c]=w8c;this[B8y]();},multiSet:function(id,val){var j9c="_multiValueChec";var s8y=j9c;s8y+=z2c;var d8y=w5Q;d8y+=S9c;d8y+=d9Q;var multiValues=this[D5Q][t9c];var multiIds=this[D5Q][J9c];if(val===undefined){val=id;id=undefined;}var set=function(idSrc,val){var E8y=e9c;E8y+=L5c;if($[E8y](multiIds)===-H3Q){var O8y=T0Q;O8y+=J0Q;O8y+=D5Q;O8y+=p4c;multiIds[O8y](idSrc);}multiValues[idSrc]=val;};if($[Q5c](val)&&id===undefined){$[H3c](val,function(idSrc,innerVal){set(idSrc,innerVal);});}else if(id===undefined){var F8y=k5c;F8y+=p4c;$[F8y](multiIds,function(i,idSrc){set(idSrc,val);});}else{set(id,val);}this[D5Q][d8y]=w8c;this[s8y]();return this;},name:function(){var l8y=p5Q;l8y+=h0Q;l8y+=w5Q;l8y+=d9Q;var v8y=c5Q;v8y+=T0Q;v8y+=M9Q;v8y+=D5Q;return this[D5Q][v8y][l8y];},node:function(){var R8y=a3c;R8y+=Y9c;R8y+=A4c;return this[q3c][R8y][V3Q];},processing:function(set){var P8y=x3c;P8y+=Z5c;var r8y=c7Q;r8y+=g0Q;r8y+=Y5c;r8y+=y5c;this[q3c][r8y][Z3c](P8y,set?U5c:n3c);return this;},set:function(val,multiCheck){var V5c="tiValueCheck";var T5c="entityDecode";var z8y=D5Q;z8y+=d9Q;z8y+=M9Q;var decodeFn=function(d){var J5c='\n';var i5c='\'';var D5c='"';var f5c='<';var m5c='>';var q5c="eplac";var o8y=I5Q;o8y+=q5c;o8y+=d9Q;return typeof d!==g5c?d:d[W5c](/&gt;/g,m5c)[W5c](/&lt;/g,f5c)[W5c](/&amp;/g,A5c)[W5c](/&quot;/g,D5c)[W5c](/&#39;/g,i5c)[o8y](/&#10;/g,J5c);};this[D5Q][p1c]=x8c;var decode=this[D5Q][A3c][T5c];if(decode===undefined||decode===w8c){var b8y=j4c;b8y+=h5c;b8y+=C5c;b8y+=r0Q;if($[b8y](val)){for(var i=V3Q,ien=val[I8c];i<ien;i++){val[i]=decodeFn(val[i]);}}else{val=decodeFn(val);}}this[N9c](z8y,val);if(multiCheck===undefined||multiCheck===w8c){var p8y=O7Q;p8y+=V5c;this[p8y]();}return this;},show:function(animate){var M5c="ntai";var H5c="hos";var S8y=R2c;S8y+=p5Q;var n8y=H5c;n8y+=M9Q;var K8y=N5c;K8y+=M5c;K8y+=l0Q;K8y+=I5Q;var X8y=X9Q;X8y+=u8c;var el=this[X8y][K8y];if(animate===undefined){animate=w8c;}if(this[D5Q][n8y][G4c]()&&animate&&$[S8y][c5c]){el[c5c]();}else{el[Z3c](Y3c,T8c);}return this;},val:function(val){return val===undefined?this[B5c]():this[E5c](val);},compare:function(value,original){var I8y=g0Q;I8y+=u8c;I8y+=O5c;var compare=this[D5Q][A3c][I8y]||_deepCompare;return compare(value,original);},dataSrc:function(){var x8y=c5Q;x8y+=T0Q;x8y+=M9Q;x8y+=D5Q;return this[D5Q][x8y][i1c];},destroy:function(){var s5c='destroy';var w8y=N3c;w8y+=c9Q;w8y+=V0Q;w8y+=p5Q;var G8y=g0Q;G8y+=F5c;G8y+=U9c;this[q3c][G8y][d5c]();this[w8y](s5c);return this;},multiEditable:function(){var v5c="opt";var a8y=v5c;a8y+=D5Q;return this[D5Q][a8y][l5c];},multiIds:function(){var R5c="multiId";var u8y=R5c;u8y+=D5Q;return this[D5Q][u8y];},multiInfoShown:function(show){var P5c="iInf";var r5c="bloc";var L6y=r5c;L6y+=z2c;var e8y=g0Q;e8y+=D5Q;e8y+=D5Q;var t8y=I9c;t8y+=M9Q;t8y+=P5c;t8y+=c5Q;var j8y=X9Q;j8y+=c5Q;j8y+=w5Q;this[j8y][t8y][e8y]({display:show?L6y:n3c});},multiReset:function(){var o5c="iValues";var Q6y=O6c;Q6y+=o5c;this[D5Q][J9c]=[];this[D5Q][Q6y]={};},submittable:function(){var k6y=c5Q;k6y+=T0Q;k6y+=M9Q;k6y+=D5Q;return this[D5Q][k6y][b5c];},valFromData:e1c,valToData:e1c,_errorNode:function(){var z5c="ieldError";var Y6y=R2c;Y6y+=z5c;var Z6y=X9Q;Z6y+=c5Q;Z6y+=w5Q;return this[Z6y][Y6y];},_msg:function(el,msg,fn){var a5c="eU";var S5c="host";var K5c="par";var X5c="ibl";var g6y=R2c;g6y+=p5Q;var q6y=p5c;q6y+=X5c;q6y+=d9Q;var U6y=K5c;U6y+=Y2c;var y6y=d3c;y6y+=s3c;if(msg===undefined){return el[n5c]();}if(typeof msg===y6y){var editor=this[D5Q][S5c];msg=msg(editor,new DataTable[I5c](editor[D5Q][x5c]));}if(el[U6y]()[j4c](q6y)&&$[g6y][G5c]){el[n5c](msg);if(msg){el[c5c](fn);}else{var W6y=w5c;W6y+=X9Q;W6y+=a5c;W6y+=T0Q;el[W6y](fn);}}else{var D6y=R9c;D6y+=p5Q;D6y+=d9Q;var A6y=X9Q;A6y+=H0Q;A6y+=Z5c;var f6y=u5c;f6y+=D5Q;var m6y=p4c;m6y+=M9Q;m6y+=j5c;el[m6y](msg||T8c)[f6y](A6y,msg?U5c:D6y);if(fn){fn();}}return this;},_multiValueCheck:function(){var A0c="noMulti";var f0c="multiInfo";var m0c="ntrol";var g0c="iIds";var q0c="ue";var U0c="multiVal";var y0c="iEditable";var L0c="NoEdit";var t5c="ultiI";var b6y=t3c;b6y+=t5c;b6y+=p5Q;b6y+=V9c;var o6y=p4c;o6y+=c5Q;o6y+=D5Q;o6y+=M9Q;var P6y=w5Q;P6y+=e5c;P6y+=L0c;var r6y=w7Q;r6y+=h0Q;r6y+=z3c;r6y+=b8c;var R6y=w5Q;R6y+=J0Q;R6y+=r7Q;R6y+=Q0c;var l6y=X9Q;l6y+=c5Q;l6y+=w5Q;var v6y=p4c;v6y+=c5Q;v6y+=D5Q;v6y+=M9Q;var s6y=p5Q;s6y+=k0c;var d6y=r7Q;d6y+=I4c;d6y+=Z0c;var F6y=g0Q;F6y+=z3c;var O6y=X9Q;O6y+=c5Q;O6y+=w5Q;var T6y=h5Q;T6y+=Y0c;T6y+=y0c;var J6y=U0c;J6y+=q0c;var i6y=O6c;i6y+=g0c;var last;var ids=this[D5Q][i6y];var values=this[D5Q][t9c];var isMultiValue=this[D5Q][J6y];var isMultiEditable=this[D5Q][A3c][T6y];var val;var different=x8c;if(ids){for(var i=V3Q;i<ids[I8c];i++){val=values[ids[i]];if(i>V3Q&&!_deepCompare(val,last)){different=w8c;break;}last=val;}}if(different&&isMultiValue||!isMultiEditable&&this[E9c]()){var N6y=x4c;N6y+=W0c;var H6y=h5Q;H6y+=r7Q;H6y+=M9Q;H6y+=H0Q;var V6y=p5Q;V6y+=c5Q;V6y+=p5Q;V6y+=d9Q;var C6y=g0Q;C6y+=D5Q;C6y+=D5Q;var h6y=r1c;h6y+=V9Q;h6y+=c5Q;h6y+=m0c;this[q3c][h6y][C6y]({display:V6y});this[q3c][H6y][Z3c]({display:N6y});}else{var B6y=g0Q;B6y+=D5Q;B6y+=D5Q;var c6y=y9c;c6y+=w5Q;var M6y=X9Q;M6y+=c5Q;M6y+=w5Q;this[M6y][o1c][Z3c]({display:U5c});this[c6y][r6c][B6y]({display:n3c});if(isMultiValue&&!different){var E6y=D5Q;E6y+=d9Q;E6y+=M9Q;this[E6y](last,x8c);}}this[O6y][h3c][F6y]({display:ids&&ids[d6y]>H3Q&&different&&!isMultiValue?U5c:s6y});var i18n=this[D5Q][v6y][Z1c][r6c];this[l6y][f0c][n5c](isMultiEditable?i18n[n1c]:i18n[A0c]);this[q3c][R6y][D0c](this[D5Q][r6y][P6y],!isMultiEditable);this[D5Q][o6y][b6y]();return w8c;},_typeFn:function(name){var T0c="shift";var i0c="lic";var p6y=c5Q;p6y+=T0Q;p6y+=M9Q;p6y+=D5Q;var z6y=D5Q;z6y+=i0c;z6y+=d9Q;var args=Array[E3c][z6y][J0c](arguments);args[T0c]();args[h0c](this[D5Q][p6y]);var fn=this[D5Q][E7Q][name];if(fn){var K6y=p4c;K6y+=c5Q;K6y+=D5Q;K6y+=M9Q;var X6y=h0Q;X6y+=C0c;X6y+=r7Q;X6y+=r0Q;return fn[X6y](this[D5Q][K6y],args);}}};Editor[n6y][V0c]={};Editor[y1c][S6y]={"className":h5p.f9Q,"data":h5p.f9Q,"def":h5p.f9Q,"fieldInfo":h5p.f9Q,"id":h5p.f9Q,"label":h5p.f9Q,"labelInfo":h5p.f9Q,"name":e1c,"type":I6y,"message":h5p.f9Q,"multiEditable":w8c,"submit":w8c};Editor[y1c][x6y][G6y]={type:e1c,name:e1c,classes:e1c,opts:e1c,host:e1c};Editor[w6y][a6y][q3c]={container:e1c,label:e1c,labelInfo:e1c,fieldInfo:e1c,fieldError:e1c,fieldMessage:e1c};Editor[u6y]={};Editor[j6y][H0c]={"init":function(dte){},"open":function(dte,append,fn){},"close":function(dte,fn){}};Editor[V0c][t6y]={"create":function(conf){},"get":function(conf){},"set":function(conf,val){},"enable":function(conf){},"disable":function(conf){}};Editor[V0c][e6y]={"ajaxUrl":e1c,"ajax":e1c,"dataSource":e1c,"domTable":e1c,"opts":e1c,"displayController":e1c,"fields":{},"order":[],"id":-H3Q,"displayed":x8c,"processing":x8c,"modifier":e1c,"action":e1c,"idSrc":e1c,"unique":V3Q};Editor[L1y][N0c]={"label":e1c,"fn":e1c,"className":e1c};Editor[Q1y][k1y]={onReturn:Z1y,onBlur:Y1y,onBackground:y1y,onComplete:U1y,onEsc:q1y,onFieldError:M0c,submit:g1y,focus:V3Q,buttons:w8c,title:w8c,message:w8c,drawType:x8c,scope:c0c};Editor[G4c]={};(function(){var c2G='<div class="DTED_Lightbox_Content">';var H4G="div.DTED";var h4G="_scrollTop";var Y4G='click.DTED_Lightbox';var Q7c="_dt";var e0c="ren";var w0c="lightbox";var G0c="layController";var I0c="Wrapper\">";var S0c="_Lightbox_";var n0c="v class=\"DTED DTED";var K0c="x_Container\">";var X0c="ED_Lightbo";var p0c="<div class=\"DT";var z0c="ightbox_Content_Wrapper\">";var b0c="_L";var o0c="lass=\"DTED";var v0c="v/></div>";var s0c="DTED_Lightbox_Background\"><di";var d0c="<div class=\"";var F0c="tbox_Close\"></div>";var O0c="<div class=\"DTED_Ligh";var z3Q=25;var k9y=B0c;k9y+=T0Q;k9y+=r7Q;k9y+=E0c;var Q9y=O0c;Q9y+=F0c;var L9y=d0c;L9y+=s0c;L9y+=v0c;var e3y=l0c;e3y+=B6c;e3y+=E6c;var t3y=z6c;t3y+=R0c;var j3y=A6c;j3y+=X9Q;j3y+=r0c;var u3y=P0c;u3y+=o0c;u3y+=b0c;u3y+=z0c;var a3y=p0c;a3y+=X0c;a3y+=K0c;var w3y=a6c;w3y+=n0c;w3y+=S0c;w3y+=I0c;var m1y=X9Q;m1y+=x0c;m1y+=G0c;var W1y=V2c;W1y+=c2c;W1y+=r7Q;W1y+=D5Q;var self;Editor[G4c][w0c]=$[Y1c](w8c,{},Editor[W1y][m1y],{"init":function(dte){self[a0c]();return self;},"open":function(dte,append,callback){var g7c="_show";var q7c="_shown";var Z7c="own";var k7c="_sh";var t0c="ild";var j0c="etac";var h1y=h0Q;h1y+=u0c;var T1y=X9Q;T1y+=j0c;T1y+=p4c;var J1y=g0Q;J1y+=p4c;J1y+=t0c;J1y+=e0c;var i1y=g0Q;i1y+=c5Q;i1y+=L7c;i1y+=Y2c;var D1y=A7Q;D1y+=X9Q;D1y+=c5Q;D1y+=w5Q;var A1y=Q7c;A1y+=d9Q;var f1y=k7c;f1y+=Z7c;if(self[f1y]){if(callback){callback();}return;}self[A1y]=dte;var content=self[D1y][i1y];content[J1y]()[T1y]();content[Y7c](append)[h1y](self[y7c][U7c]);self[q7c]=w8c;self[g7c](callback);},"close":function(dte,callback){var A7c="hown";var N1y=A7Q;N1y+=W7c;N1y+=p5Q;var H1y=m7c;H1y+=f1c;H1y+=d9Q;var V1y=Q7c;V1y+=d9Q;var C1y=f7c;C1y+=A7c;if(!self[C1y]){if(callback){callback();}return;}self[V1y]=dte;self[H1y](callback);self[N1y]=x8c;},node:function(dte){var M1y=D7c;M1y+=C0c;M1y+=A4c;return self[y7c][M1y][V3Q];},"_init":function(){var M7c='div.DTED_Lightbox_Content';var H7c="_ready";var T7c="round";var J7c="ckg";var F1y=g0Q;F1y+=z3c;var O1y=i7c;O1y+=J7c;O1y+=T7c;var E1y=h7c;E1y+=I5Q;E1y+=C7c;var B1y=A7Q;B1y+=X9Q;B1y+=c5Q;B1y+=w5Q;var c1y=V7c;c1y+=w5Q;if(self[H7c]){return;}var dom=self[c1y];dom[N7c]=$(M7c,self[B1y][E1y]);dom[B1c][Z3c](c7c,V3Q);dom[O1y][F1y](c7c,V3Q);},"_show":function(callback){var O4G='<div class="DTED_Lightbox_Shown"/>';var E4G="not";var B4G="chi";var M4G="ghtbox_Show";var N4G="_Li";var j7c='height';var u7c='DTED_Lightbox_Mobile';var a7c="addCla";var w7c="orientation";var I7c="etAni";var S7c="fs";var n7c="of";var p7c="ghtCal";var z7c="_he";var b7c="_animat";var R7c="backgrou";var v7c="ckgrou";var d7c="box_Content_Wrap";var F7c="v.DTED_Light";var E7c="rollTop";var B7c="ientatio";var f3y=G5Q;f3y+=B7c;f3y+=p5Q;var m3y=D5Q;m3y+=g0Q;m3y+=E7c;var g3y=X5Q;g3y+=H0Q;g3y+=O7c;var Z3y=X5Q;Z3y+=H0Q;Z3y+=p5Q;Z3y+=X9Q;var k3y=x3c;k3y+=F7c;k3y+=d7c;k3y+=s7c;var L3y=X5Q;L3y+=H0Q;L3y+=p5Q;L3y+=X9Q;var e1y=i7c;e1y+=v7c;e1y+=O7c;var j1y=l7c;j1y+=O7c;var u1y=w7Q;u1y+=c5Q;u1y+=D5Q;u1y+=d9Q;var G1y=R7c;G1y+=O7c;var x1y=r7c;x1y+=M9Q;x1y+=d9Q;var I1y=P7c;I1y+=o7c;I1y+=I5Q;var S1y=b7c;S1y+=d9Q;var n1y=A7Q;n1y+=X9Q;n1y+=y7Q;var K1y=z7c;K1y+=H0Q;K1y+=p7c;K1y+=g0Q;var X1y=X7c;X1y+=I4c;X1y+=X9Q;var p1y=R7c;p1y+=O7c;var z1y=A7Q;z1y+=y9c;z1y+=w5Q;var b1y=o7c;b1y+=p5Q;b1y+=X9Q;var o1y=X5Q;o1y+=c5Q;o1y+=K7c;var P1y=n7c;P1y+=S7c;P1y+=I7c;var r1y=h7c;r1y+=x7c;r1y+=s7c;var R1y=h0Q;R1y+=J0Q;R1y+=B7Q;var l1y=g0Q;l1y+=z3c;var v1y=N5c;v1y+=G7c;v1y+=p5Q;v1y+=M9Q;var d1y=A7Q;d1y+=X9Q;d1y+=c5Q;d1y+=w5Q;var that=this;var dom=self[d1y];if(window[w7c]!==undefined){var s1y=a7c;s1y+=z3c;$(K3c)[s1y](u7c);}dom[v1y][l1y](j7c,R1y);dom[r1y][Z3c]({top:-self[t7c][P1y]});$(o1y)[b1y](self[z1y][p1y])[X1y](self[y7c][B1c]);self[K1y]();self[n1y][S1y](dom[I1y],{opacity:H3Q,top:V3Q},callback);self[x1y][e7c](dom[G1y],{opacity:H3Q});setTimeout(function(){var k4G="den";var Q4G="-in";var a1y=L4G;a1y+=Q4G;a1y+=k4G;a1y+=M9Q;var w1y=u5c;w1y+=D5Q;$(Z4G)[w1y](a1y,-H3Q);},d3Q);dom[u1y][j1y](Y4G,function(e){var t1y=A7Q;t1y+=X9Q;t1y+=y7Q;self[t1y][U7c]();});dom[e1y][L3y](Y4G,function(e){var Q3y=r7c;Q3y+=M9Q;Q3y+=d9Q;self[Q3y][y4G]();});$(k3y,dom[B1c])[Z3y](Y4G,function(e){var D4G="und";var A4G="kgro";var m4G="asCla";var W4G="rapper";var g4G="nt_W";var q4G="x_Conte";var U4G="DTED_Lightbo";var y3y=U4G;y3y+=q4G;y3y+=g4G;y3y+=W4G;var Y3y=p4c;Y3y+=m4G;Y3y+=z3c;if($(e[f4G])[Y3y](y3y)){var q3y=i7c;q3y+=g0Q;q3y+=A4G;q3y+=D4G;var U3y=Q7c;U3y+=d9Q;self[U3y][q3y]();}});$(window)[g3y](i4G,function(){var T4G="tCalc";var J4G="ig";var W3y=z7c;W3y+=J4G;W3y+=p4c;W3y+=T4G;self[W3y]();});self[h4G]=$(K3c)[m3y]();if(window[f3y]!==undefined){var T3y=C4G;T3y+=V4G;var J3y=H4G;J3y+=N4G;J3y+=M4G;J3y+=p5Q;var i3y=D7c;i3y+=c4G;i3y+=I5Q;var D3y=B4G;D3y+=q5Q;D3y+=e0c;var A3y=X5Q;A3y+=c5Q;A3y+=X9Q;A3y+=r0Q;var kids=$(A3y)[D3y]()[E4G](dom[y4G])[E4G](dom[i3y]);$(K3c)[Y7c](O4G);$(J3y)[T3y](kids);}},"_heightCalc":function(){var K4G='div.DTE_Body_Content';var p4G="gh";var b4G="eade";var o4G="div.DTE_H";var r4G="outerH";var R4G="Foot";var d4G="erHeig";var B3y=g0Q;B3y+=D5Q;B3y+=D5Q;var c3y=F4G;c3y+=d4G;c3y+=p4c;c3y+=M9Q;var M3y=h7c;M3y+=s4G;M3y+=v4G;var N3y=l4G;N3y+=Y5Q;N3y+=R4G;N3y+=A4c;var H3y=r4G;H3y+=d9Q;H3y+=P4G;var V3y=o4G;V3y+=b4G;V3y+=I5Q;var C3y=z4G;C3y+=H0Q;C3y+=p4G;C3y+=M9Q;var h3y=A7Q;h3y+=X9Q;h3y+=c5Q;h3y+=w5Q;var dom=self[h3y];var maxHeight=$(window)[C3y]()-self[t7c][X4G]*N3Q-$(V3y,dom[B1c])[H3y]()-$(N3y,dom[M3y])[c3y]();$(K4G,dom[B1c])[B3y](n4G,maxHeight);},"_hide":function(callback){var H2G="offsetAni";var C2G='div.DTED_Lightbox_Shown';var h2G="ldr";var J2G="To";var D2G="ntation";var A2G="orie";var f2G="obile";var m2G="htbox_M";var W2G="DTED_Lig";var g2G="ollTop";var y2G="_an";var Y2G="nimate";var Z2G="_a";var k2G="unbin";var Q2G="D_Lightbox";var j4G="bac";var a4G="ox_Content_Wrapper";var w4G="_Lightb";var G4G="unb";var I4G="tb";var S4G="click.DTED_Ligh";var G3y=S4G;G3y+=I4G;G3y+=x4G;var x3y=G4G;x3y+=H0Q;x3y+=p5Q;x3y+=X9Q;var I3y=H4G;I3y+=w4G;I3y+=a4G;var S3y=J0Q;S3y+=u4G;S3y+=X9Q;var n3y=j4G;n3y+=z2c;n3y+=t4G;var K3y=e4G;K3y+=g0Q;K3y+=L2G;K3y+=Q2G;var X3y=k2G;X3y+=X9Q;var z3y=Z2G;z3y+=Y2G;var b3y=A7Q;b3y+=X9Q;b3y+=M9Q;b3y+=d9Q;var o3y=N5c;o3y+=p5Q;o3y+=R2c;var P3y=D7c;P3y+=v4G;var r3y=y2G;r3y+=H0Q;r3y+=U2G;r3y+=y7Q;var R3y=D5Q;R3y+=q2G;R3y+=g2G;var l3y=W2G;l3y+=m2G;l3y+=f2G;var v3y=X5Q;v3y+=c5Q;v3y+=X9Q;v3y+=r0Q;var E3y=A2G;E3y+=D2G;var dom=self[y7c];if(!callback){callback=function(){};}if(window[E3y]!==undefined){var s3y=I5Q;s3y+=d9Q;s3y+=i2G;s3y+=d9Q;var d3y=X5Q;d3y+=c5Q;d3y+=X9Q;d3y+=r0Q;var F3y=h0Q;F3y+=T0Q;F3y+=V4G;F3y+=J2G;var O3y=g0Q;O3y+=T2G;O3y+=h2G;O3y+=I4c;var show=$(C2G);show[O3y]()[F3y](d3y);show[s3y]();}$(v3y)[q9c](l3y)[R3y](self[h4G]);self[V2G][r3y](dom[P3y],{opacity:V3Q,top:self[o3y][H2G]},function(){$(this)[o9c]();callback();});self[b3y][z3y](dom[y4G],{opacity:V3Q},function(){var p3y=c2c;p3y+=M9Q;p3y+=N2G;$(this)[p3y]();});dom[U7c][X3y](K3y);dom[n3y][S3y](Y4G);$(I3y,dom[B1c])[x3y](G3y);$(window)[M2G](i4G);},"_dte":e1c,"_ready":x8c,"_shown":x8c,"_dom":{"wrapper":$(w3y+a3y+u3y+c2G+j3y+a1c+t3y+e3y),"background":$(L9y),"close":$(Q9y),"content":e1c}});self=Editor[k9y][w0c];self[t7c]={"offsetAni":z3Q,"windowPadding":z3Q};}());(function(){var t6G="envelope";var j6G='<div class="DTED_Envelope_Close">&times;</div>';var u6G='<div class="DTED_Envelope_Background"><div/></div>';var a6G='<div class="DTED_Envelope_Container"></div>';var w6G='<div class="DTED_Envelope_Shadow"></div>';var G6G='<div class="DTED DTED_Envelope_Wrapper">';var v8G="wrap";var P2G="appendChild";var d2G="ope";var F2G="enve";var O2G="Controller";var Z9Q=600;var a3Q=50;var R0y=g0Q;R0y+=B2G;R0y+=R2c;var l0y=c6c;l0y+=E2G;l0y+=E6c;var U9y=G4c;U9y+=O2G;var y9y=V2c;y9y+=X9Q;y9y+=H2c;var Y9y=F2G;Y9y+=r7Q;Y9y+=d2G;var Z9y=X9Q;Z9y+=x0c;Z9y+=r7Q;Z9y+=E0c;var self;Editor[Z9y][Y9y]=$[Y1c](w8c,{},Editor[y9y][U9y],{"init":function(dte){var q9y=A7Q;q9y+=X9Q;q9y+=M9Q;q9y+=d9Q;self[q9y]=dte;self[a0c]();return self;},"open":function(dte,append,callback){var r2G="dre";var R2G="eta";var l2G="endChi";var s2G="how";var h9y=A7Q;h9y+=D5Q;h9y+=s2G;var T9y=g0Q;T9y+=v2G;T9y+=J2c;var J9y=A7Q;J9y+=X9Q;J9y+=c5Q;J9y+=w5Q;var i9y=C4G;i9y+=T0Q;i9y+=l2G;i9y+=q5Q;var D9y=N5c;D9y+=p5Q;D9y+=M9Q;D9y+=Y2c;var A9y=N5c;A9y+=G7c;A9y+=L7c;var f9y=r7c;f9y+=c5Q;f9y+=w5Q;var m9y=X9Q;m9y+=R2G;m9y+=g0Q;m9y+=p4c;var W9y=d8c;W9y+=o0Q;W9y+=r2G;W9y+=p5Q;var g9y=A7Q;g9y+=X9Q;g9y+=c5Q;g9y+=w5Q;self[V2G]=dte;$(self[g9y][N7c])[W9y]()[m9y]();self[f9y][A9y][P2G](append);self[y7c][D9y][i9y](self[J9y][T9y]);self[h9y](callback);},"close":function(dte,callback){var o2G="_hi";var V9y=o2G;V9y+=X9Q;V9y+=d9Q;var C9y=A7Q;C9y+=X9Q;C9y+=M9Q;C9y+=d9Q;self[C9y]=dte;self[V9y](callback);},node:function(dte){var b2G="wrapp";var N9y=b2G;N9y+=d9Q;N9y+=I5Q;var H9y=A7Q;H9y+=X9Q;H9y+=c5Q;H9y+=w5Q;return self[H9y][N9y][V3Q];},"_init":function(){var Z8G="visbility";var k8G="_cssBackgroundOpacity";var e2G="_r";var t2G="div.DTED_Envelope_Con";var j2G="Child";var u2G="rou";var a2G="back";var w2G="sbility";var G2G="vi";var x2G="dden";var I2G="oun";var S2G="ckgr";var K2G="ckgro";var X2G="tyle";var z2G="vis";var n9y=z2G;n9y+=p2G;var K9y=D5Q;K9y+=X2G;var X9y=i7c;X9y+=K2G;X9y+=Q2c;X9y+=X9Q;var p9y=B0c;p9y+=n2G;p9y+=r0Q;var z9y=D5Q;z9y+=X4c;z9y+=K8c;var b9y=i7c;b9y+=S2G;b9y+=I2G;b9y+=X9Q;var o9y=A7Q;o9y+=X9Q;o9y+=c5Q;o9y+=w5Q;var P9y=D5Q;P9y+=X4c;P9y+=r7Q;P9y+=d9Q;var r9y=A7Q;r9y+=X9Q;r9y+=c5Q;r9y+=w5Q;var R9y=T2G;R9y+=x2G;var l9y=G2G;l9y+=w2G;var v9y=a2G;v9y+=O0Q;v9y+=u2G;v9y+=O7c;var s9y=h7c;s9y+=s4G;s9y+=v4G;var d9y=V7c;d9y+=w5Q;var F9y=r7c;F9y+=c5Q;F9y+=w5Q;var O9y=h0Q;O9y+=T0Q;O9y+=V4G;O9y+=j2G;var E9y=h7c;E9y+=x7c;E9y+=T0Q;E9y+=A4c;var B9y=A7Q;B9y+=X9Q;B9y+=c5Q;B9y+=w5Q;var c9y=t2G;c9y+=Y9c;c9y+=A4c;var M9y=e2G;M9y+=F8c;M9y+=K7c;if(self[M9y]){return;}self[y7c][N7c]=$(c9y,self[B9y][E9y])[V3Q];document[L8G][O9y](self[F9y][y4G]);document[L8G][P2G](self[d9y][s9y]);self[y7c][v9y][Q8G][l9y]=R9y;self[r9y][y4G][P9y][G4c]=U5c;self[k8G]=$(self[o9y][b9y])[Z3c](c7c);self[y7c][y4G][z9y][p9y]=n3c;self[y7c][X9y][K9y][Z8G]=n9y;},"_show":function(callback){var Y6G='resize.DTED_Envelope';var Q6G='div.DTED_Lightbox_Content_Wrapper';var e8G='click.DTED_Envelope';var t8G="conte";var u8G=",b";var a8G="tml";var w8G="mate";var G8G="ani";var x8G="etHeight";var S8G="windowScroll";var K8G="offsetWidth";var X8G="_heightCalc";var p8G="_findAttachRow";var z8G='auto';var o8G="eight";var P8G="paci";var r8G="ci";var s8G="eft";var d8G="inL";var O8G="yle";var B8G="Heig";var M8G="opacit";var H8G="backgr";var h8G="blo";var T8G="ou";var J8G="backg";var i8G="kgroundOpacity";var D8G="sBac";var f8G="eIn";var m8G="fa";var W8G=".DTED_Envelope";var q8G="bin";var U8G="Envelope";var y8G="DTED_";var Y8G="click.";var I5y=X5Q;I5y+=P4c;I5y+=X9Q;var K5y=Y8G;K5y+=y8G;K5y+=U8G;var X5y=q8G;X5y+=X9Q;var p5y=r7c;p5y+=c5Q;p5y+=w5Q;var o5y=g8G;o5y+=W8G;var P5y=l7c;P5y+=O7c;var r5y=r7c;r5y+=c5Q;r5y+=w5Q;var l5y=l7c;l5y+=p5Q;l5y+=X9Q;var v5y=i2c;v5y+=J2c;var N5y=g0Q;N5y+=c5Q;N5y+=p5Q;N5y+=R2c;var H5y=m8G;H5y+=X9Q;H5y+=f8G;var V5y=A7Q;V5y+=X9Q;V5y+=c5Q;V5y+=w5Q;var C5y=R9c;C5y+=A8G;C5y+=h0Q;C5y+=r7Q;var h5y=A7Q;h5y+=u5c;h5y+=D8G;h5y+=i8G;var T5y=J8G;T5y+=I5Q;T5y+=T8G;T5y+=O7c;var J5y=A7Q;J5y+=X9Q;J5y+=u8c;var i5y=h8G;i5y+=C8G;var D5y=x3c;D5y+=V8G;D5y+=r0Q;var A5y=H8G;A5y+=N8G;var f5y=M8G;f5y+=r0Q;var m5y=v9c;m5y+=r0Q;m5y+=r7Q;m5y+=d9Q;var W5y=T0Q;W5y+=R9Q;var g5y=M9Q;g5y+=c5Q;g5y+=T0Q;var q5y=T0Q;q5y+=R9Q;var U5y=c8G;U5y+=B8G;U5y+=E8G;var y5y=M9Q;y5y+=Q1c;var Y5y=c5Q;Y5y+=R2c;Y5y+=R2c;Y5y+=E5c;var Z5y=v9c;Z5y+=O8G;var k5y=D7c;k5y+=C0c;k5y+=A4c;var Q5y=T0Q;Q5y+=R9Q;var L5y=U2G;L5y+=F8G;L5y+=d8G;L5y+=s8G;var e9y=v8G;e9y+=z7Q;e9y+=I5Q;var t9y=T0Q;t9y+=R9Q;var j9y=l8G;j9y+=R8G;j9y+=p4c;var u9y=Q1c;u9y+=h0Q;u9y+=r8G;u9y+=X4c;var a9y=X5Q;a9y+=r7Q;a9y+=W0c;var w9y=c5Q;w9y+=P8G;w9y+=X4c;var G9y=D7c;G9y+=v4G;var x9y=r7c;x9y+=u8c;var I9y=p4c;I9y+=o8G;var S9y=g0Q;S9y+=b8G;var that=this;var formHeight;if(!callback){callback=function(){};}self[y7c][S9y][Q8G][I9y]=z8G;var style=self[x9y][G9y][Q8G];style[w9y]=V3Q;style[G4c]=a9y;var targetRow=self[p8G]();var height=self[X8G]();var width=targetRow[K8G];style[G4c]=n3c;style[u9y]=H3Q;self[y7c][B1c][Q8G][j9y]=width+t9y;self[y7c][e9y][Q8G][L5y]=-(width/N3Q)+Q5y;self[y7c][k5y][Z5y][n8G]=$(targetRow)[Y5y]()[y5y]+targetRow[U5y]+q5y;self[y7c][N7c][Q8G][g5y]=-H3Q*height-P3Q+W5y;self[y7c][y4G][m5y][f5y]=V3Q;self[y7c][A5y][Q8G][D5y]=i5y;$(self[J5y][T5y])[G5c]({'opacity':self[h5y]},C5y);$(self[V5y][B1c])[H5y]();if(self[N5y][S8G]){var E5y=I8G;E5y+=D5Q;E5y+=x8G;var B5y=M9Q;B5y+=c5Q;B5y+=T0Q;var c5y=G8G;c5y+=w8G;var M5y=p4c;M5y+=a8G;M5y+=u8G;M5y+=e5Q;$(M5y)[c5y]({"scrollTop":$(targetRow)[c8G]()[B5y]+targetRow[E5y]-self[t7c][X4G]},function(){var F5y=j8G;F5y+=d9Q;F5y+=p5Q;F5y+=M9Q;var O5y=A7Q;O5y+=X9Q;O5y+=c5Q;O5y+=w5Q;$(self[O5y][F5y])[G5c]({"top":V3Q},Z9Q,callback);});}else{var s5y=t8G;s5y+=L7c;var d5y=A7Q;d5y+=X9Q;d5y+=c5Q;d5y+=w5Q;$(self[d5y][s5y])[G5c]({"top":V3Q},Z9Q,callback);}$(self[y7c][v5y])[l5y](e8G,function(e){var R5y=g0Q;R5y+=r7Q;R5y+=c5Q;R5y+=J2c;self[V2G][R5y]();});$(self[r5y][y4G])[P5y](o5y,function(e){var L6G="ackground";var z5y=X5Q;z5y+=L6G;var b5y=A7Q;b5y+=X9Q;b5y+=y7Q;self[b5y][z5y]();});$(Q6G,self[p5y][B1c])[X5y](K5y,function(e){var Z6G='DTED_Envelope_Content_Wrapper';var k6G="sClass";var n5y=p4c;n5y+=h0Q;n5y+=k6G;if($(e[f4G])[n5y](Z6G)){var S5y=H8G;S5y+=N8G;self[V2G][S5y]();}});$(window)[I5y](Y6G,function(){self[X8G]();});},"_heightCalc":function(){var h6G="heightCalc";var T6G="ghtCalc";var J6G="hei";var D6G="heigh";var A6G="Padding";var f6G="window";var m6G="div.DTE_Heade";var W6G="Hei";var g6G="outer";var q6G="_Content";var U6G="v.DTE_Body";var y6G="outerHe";var y0y=y6G;y0y+=P4G;var Y0y=v8G;Y0y+=s7c;var Z0y=g0Q;Z0y+=D5Q;Z0y+=D5Q;var k0y=A7Q;k0y+=X9Q;k0y+=c5Q;k0y+=w5Q;var Q0y=x3c;Q0y+=U6G;Q0y+=q6G;var L0y=g6G;L0y+=W6G;L0y+=O0Q;L0y+=E8G;var e5y=h7c;e5y+=s4G;e5y+=T0Q;e5y+=s7c;var t5y=m6G;t5y+=I5Q;var j5y=f6G;j5y+=A6G;var u5y=N5c;u5y+=p5Q;u5y+=R2c;var a5y=D6G;a5y+=M9Q;var w5y=i6G;w5y+=X9Q;w5y+=I5Q;w5y+=I4c;var G5y=J6G;G5y+=T6G;var x5y=N5c;x5y+=p5Q;x5y+=R2c;var formHeight;formHeight=self[t7c][h6G]?self[x5y][G5y](self[y7c][B1c]):$(self[y7c][N7c])[w5y]()[C6G]();var maxHeight=$(window)[a5y]()-self[u5y][j5y]*N3Q-$(t5y,self[y7c][B1c])[V6G]()-$(Z4G,self[y7c][e5y])[L0y]();$(Q0y,self[k0y][B1c])[Z0y](n4G,maxHeight);return $(self[V2G][q3c][Y0y])[y0y]();},"_hide":function(callback){var d6G="ima";var F6G="igh";var O6G="offsetH";var E6G="_Lightbox";var c6G="TED_Lightbox";var M6G=".D";var N6G="v.DTED_Lightbox_Content_Wrappe";var H6G="ck.DTED_Lightbox";var C0y=e4G;C0y+=H6G;var h0y=v8G;h0y+=T0Q;h0y+=d9Q;h0y+=I5Q;var T0y=A7Q;T0y+=X9Q;T0y+=c5Q;T0y+=w5Q;var J0y=x3c;J0y+=N6G;J0y+=I5Q;var i0y=g8G;i0y+=M6G;i0y+=c6G;var D0y=A7Q;D0y+=X9Q;D0y+=c5Q;D0y+=w5Q;var A0y=B6G;A0y+=L2G;A0y+=F5Q;A0y+=E6G;var f0y=J0Q;f0y+=u4G;f0y+=X9Q;var W0y=O6G;W0y+=d9Q;W0y+=F6G;W0y+=M9Q;var g0y=g0Q;g0y+=b8G;var q0y=h0Q;q0y+=p5Q;q0y+=d6G;q0y+=y7Q;var U0y=A7Q;U0y+=q3c;if(!callback){callback=function(){};}$(self[U0y][N7c])[q0y]({"top":-(self[y7c][g0y][W0y]+a3Q)},Z9Q,function(){var l6G='normal';var v6G="fadeOut";var s6G="backgroun";var m0y=s6G;m0y+=X9Q;$([self[y7c][B1c],self[y7c][m0y]])[v6G](l6G,callback);});$(self[y7c][U7c])[f0y](A0y);$(self[D0y][y4G])[M2G](i0y);$(J0y,self[T0y][h0y])[M2G](C0y);$(window)[M2G](i4G);},"_findAttachRow":function(){var I6G="ier";var S6G="modif";var z6G='head';var o6G="Ap";var r6G="atta";var d0y=g0Q;d0y+=I5Q;d0y+=R6G;d0y+=d9Q;var F0y=A7Q;F0y+=X9Q;F0y+=M9Q;F0y+=d9Q;var B0y=r6G;B0y+=d8c;var c0y=P6G;c0y+=r7Q;c0y+=d9Q;var M0y=A7Q;M0y+=R8G;M0y+=d9Q;var N0y=o6G;N0y+=H0Q;var H0y=i1c;H0y+=b6G;H0y+=K8c;var V0y=R2c;V0y+=p5Q;var dt=new $[V0y][H0y][N0y](self[M0y][D5Q][c0y]);if(self[t7c][B0y]===z6G){var O0y=z4G;O0y+=h0Q;O0y+=p6G;var E0y=M9Q;E0y+=l8c;return dt[E0y]()[O0y]();}else if(self[F0y][D5Q][X6G]===d0y){return dt[x5c]()[K6G]();}else{var v0y=n6G;v0y+=d9Q;var s0y=S6G;s0y+=I6G;return dt[x6G](self[V2G][D5Q][s0y])[v0y]();}},"_dte":e1c,"_ready":x8c,"_cssBackgroundOpacity":H3Q,"_dom":{"wrapper":$(G6G+w6G+a6G+l0y)[V3Q],"background":$(u6G)[V3Q],"close":$(j6G)[V3Q],"content":e1c}});self=Editor[G4c][t6G];self[R0y]={"windowPadding":a3Q,"heightCalc":e1c,"attach":x6G,"windowScroll":w8c};}());Editor[E3c][r0y]=function(cfg,after){var T1G="ord";var A1G="rd";var g1G='initField';var U1G="'. A field already exists with this name";var y1G="d '";var Y1G="Error adding fiel";var k1G="Error adding field. The field requires a `name` option";var L1G="rev";var P0y=e6G;P0y+=C5c;P0y+=r0Q;if($[P0y](cfg)){if(after!==undefined){var o0y=L1G;o0y+=A4c;o0y+=D5Q;o0y+=d9Q;cfg[o0y]();}for(var i=V3Q;i<cfg[I8c];i++){var b0y=h0Q;b0y+=X9Q;b0y+=X9Q;this[b0y](cfg[i],after);}}else{var K0y=w5Q;K0y+=c5Q;K0y+=X9Q;K0y+=d9Q;var X0y=R2c;X0y+=Q1G;var p0y=V0Q;p0y+=l2c;p0y+=X9Q;var name=cfg[m1c];if(name===undefined){throw k1G;}if(this[D5Q][Z1G][name]){var z0y=Y1G;z0y+=y1G;throw z0y+name+U1G;}this[q1G](g1G,cfg);var field=new Editor[p0y](cfg,this[P3c][X0y],this);if(this[D5Q][K0y]){var n0y=d9Q;n0y+=N2G;var editFields=this[D5Q][W1G];field[m1G]();$[n0y](editFields,function(idSrc,edit){var I0y=X9Q;I0y+=d9Q;I0y+=R2c;var S0y=X9Q;S0y+=C0Q;S0y+=h0Q;var val;if(edit[S0y]){val=field[h1c](edit[i1c]);}field[f1G](idSrc,val!==undefined?val:field[I0y]());});}this[D5Q][Z1G][name]=field;if(after===undefined){var x0y=c5Q;x0y+=A1G;x0y+=d9Q;x0y+=I5Q;this[D5Q][x0y][X8c](name);}else if(after===e1c){var G0y=J0Q;G0y+=D1G;G0y+=i1G;this[D5Q][J1G][G0y](name);}else{var a0y=T1G;a0y+=d9Q;a0y+=I5Q;var w0y=P4c;w0y+=h5c;w0y+=I5Q;w0y+=h1G;var idx=$[w0y](after,this[D5Q][J1G]);this[D5Q][a0y][C1G](idx+H3Q,V3Q,name);}}this[V1G](this[J1G]());return this;};Editor[E3c][H1G]=function(newAjax){if(newAjax){this[D5Q][H1G]=newAjax;return this;}return this[D5Q][H1G];};Editor[u0y][y4G]=function(){var c1G="onBa";var Z7y=D5Q;Z7y+=J0Q;Z7y+=i7Q;Z7y+=f5Q;var k7y=w7Q;k7y+=N1G;var L7y=X5Q;L7y+=r7Q;L7y+=J0Q;L7y+=I5Q;var e0y=d3c;e0y+=p5Q;e0y+=g0Q;e0y+=M1G;var t0y=c1G;t0y+=C8G;t0y+=t4G;var j0y=B1G;j0y+=E1G;j0y+=D5Q;var onBackground=this[D5Q][j0y][t0y];if(typeof onBackground===e0y){onBackground(this);}else if(onBackground===L7y){var Q7y=X5Q;Q7y+=r7Q;Q7y+=J0Q;Q7y+=I5Q;this[Q7y]();}else if(onBackground===k7y){this[U7c]();}else if(onBackground===Z7y){this[b5c]();}return this;};Editor[E3c][Y7y]=function(){var O1G="_blur";this[O1G]();return this;};Editor[y7y][U7y]=function(cells,fieldNames,show,opts){var b1G='boolean';var r1G="sPlainObject";var l1G="bubb";var v1G="urc";var s1G="ataSo";var d1G="_edi";var F1G="bub";var A7y=F1G;A7y+=X5Q;A7y+=r7Q;A7y+=d9Q;var f7y=d1G;f7y+=M9Q;var m7y=r7c;m7y+=s1G;m7y+=v1G;m7y+=d9Q;var W7y=l1G;W7y+=r7Q;W7y+=d9Q;var g7y=R1G;g7y+=O7c;var q7y=H0Q;q7y+=r1G;var that=this;if(this[P1G](function(){that[o1G](cells,fieldNames,opts);})){return this;}if($[Q5c](fieldNames)){opts=fieldNames;fieldNames=undefined;show=w8c;}else if(typeof fieldNames===b1G){show=fieldNames;fieldNames=undefined;opts=undefined;}if($[q7y](show)){opts=show;show=w8c;}if(show===undefined){show=w8c;}opts=$[g7y]({},this[D5Q][z1G][W7y],opts);var editFields=this[m7y](p1G,cells,fieldNames);this[f7y](cells,editFields,A7y,opts,function(){var p3G="_postopen";var z3G="includeFields";var v3G="_closeReg";var d3G="prep";var F3G="prepend";var O3G="Inf";var N3G='" />';var C3G='"><div/></div>';var J3G='resize.';var D3G="Options";var A3G="_form";var m3G="onca";var W3G="ttach";var q3G="bb";var Y3G="class=";var Z3G="iv ";var L3G="<div class=";var e1G="ss=\"DTE_Processing_Indicator\"><span></div>";var u1G="class=\"";var a1G="div ";var w1G="point";var G1G="child";var I1G="rmEr";var X1G="ubble";var k4V=X5Q;k4V+=X1G;var Q4V=K1G;Q4V+=D5Q;var L4V=B6G;L4V+=z2c;var j7y=h0Q;j7y+=X9Q;j7y+=X9Q;var u7y=h0Q;u7y+=X9Q;u7y+=X9Q;var x7y=W2c;x7y+=n1G;x7y+=B2G;x7y+=D5Q;var K7y=S1G;K7y+=K8c;var p7y=X9Q;p7y+=c5Q;p7y+=w5Q;var z7y=Z0Q;z7y+=L3c;z7y+=d9Q;z7y+=O7c;var b7y=V9c;b7y+=I1G;b7y+=Q9c;var o7y=d9Q;o7y+=x1G;var P7y=G1G;P7y+=I5Q;P7y+=I4c;var r7y=z6c;r7y+=N6c;r7y+=X9Q;r7y+=r0c;var R7y=w1G;R7y+=d9Q;R7y+=I5Q;var l7y=z6c;l7y+=a1G;l7y+=u1G;var v7y=j1G;v7y+=E6c;var s7y=t1G;s7y+=e1G;var d7y=g0Q;d7y+=v2G;d7y+=D5Q;d7y+=d9Q;var F7y=L3G;F7y+=R6c;var O7y=R6c;O7y+=E6c;var E7y=P6G;E7y+=K8c;var B7y=R6c;B7y+=E6c;var c7y=Q3G;c7y+=e3c;c7y+=k3G;var M7y=h7c;M7y+=I5Q;M7y+=C7c;var N7y=d6c;N7y+=Z3G;N7y+=Y3G;N7y+=R6c;var H7y=X5Q;H7y+=O0Q;var V7y=z6c;V7y+=x3c;V7y+=y3G;V7y+=U3G;var C7y=X5Q;C7y+=J0Q;C7y+=q3G;C7y+=K8c;var h7y=g3G;h7y+=D5Q;var T7y=h0Q;T7y+=W3G;var J7y=g0Q;J7y+=m3G;J7y+=M9Q;var i7y=f3G;i7y+=I4c;var D7y=A3G;D7y+=D3G;var namespace=that[D7y](opts);var ret=that[i7y](i3G);if(!ret){return that;}$(window)[B2G](J3G+namespace,function(){that[T3G]();});var nodes=[];that[D5Q][h3G]=nodes[J7y][F3c](nodes,_pluck(editFields,T7y));var classes=that[h7y][C7y];var background=$(V7y+classes[H7y]+C3G);var container=$(N7y+classes[M7y]+l1c+c7y+classes[V3G]+B7y+H3G+classes[E7y]+O7y+F7y+classes[d7y]+N3G+s7y+a1c+v7y+l7y+classes[R7y]+N3G+r7y);if(show){container[M3G](K3c);background[M3G](K3c);}var liner=container[P7y]()[o7y](V3Q);var table=liner[c3G]();var close=table[c3G]();liner[Y7c](that[q3c][b7y]);table[z7y](that[p7y][B3G]);if(opts[E3G]){var X7y=B3G;X7y+=O3G;X7y+=c5Q;liner[F3G](that[q3c][X7y]);}if(opts[K7y]){var I7y=p4c;I7y+=F8c;I7y+=p6G;var S7y=X9Q;S7y+=c5Q;S7y+=w5Q;var n7y=d3G;n7y+=Z2c;liner[n7y](that[S7y][I7y]);}if(opts[x7y]){var a7y=X5Q;a7y+=s3G;a7y+=D5Q;var w7y=X9Q;w7y+=u8c;var G7y=C4G;G7y+=z7Q;G7y+=O7c;table[G7y](that[w7y][a7y]);}var pair=$()[u7y](container)[j7y](background);that[v3G](function(submitComplete){that[e7c](pair,{opacity:V3Q},function(){var l3G="esiz";var e7y=I5Q;e7y+=l3G;e7y+=R3G;var t7y=c5Q;t7y+=R2c;t7y+=R2c;pair[o9c]();$(window)[t7y](e7y+namespace);that[r3G]();});});background[g8G](function(){that[P3G]();});close[L4V](function(){that[o3G]();});that[T3G]();that[e7c](pair,{opacity:H3Q});that[b3G](that[D5Q][z3G],opts[Q4V]);that[p3G](k4V);});return this;};Editor[Z4V][T3G]=function(){var A9G="addCl";var f9G="low";var m9G="be";var W9G="outerWidth";var g9G="bottom";var U9G="right";var j3G='div.DTE_Bubble';var a3G="E_B";var w3G="div.DT";var n3G="wid";var X3G="bubbl";var r3Q=15;var M4V=M9Q;M4V+=c5Q;M4V+=T0Q;var N4V=X3G;N4V+=d9Q;var H4V=K3G;H4V+=D5Q;H4V+=d9Q;H4V+=D5Q;var V4V=n3G;V4V+=M9Q;V4V+=p4c;var C4V=K8c;C4V+=R2c;C4V+=M9Q;var h4V=r7Q;h4V+=S3G;h4V+=M9Q;h4V+=p4c;var T4V=I3G;T4V+=O0Q;T4V+=M9Q;T4V+=p4c;var J4V=K8c;J4V+=x3G;J4V+=p4c;var i4V=K8c;i4V+=G3G;var D4V=K8c;D4V+=p5Q;D4V+=O0Q;D4V+=D9c;var A4V=M9Q;A4V+=c5Q;A4V+=T0Q;var Y4V=w3G;Y4V+=a3G;Y4V+=u3G;Y4V+=Z5Q;var wrapper=$(j3G),liner=$(Y4V),nodes=this[D5Q][h3G];var position={top:V3Q,left:V3Q,right:V3Q,bottom:V3Q};$[H3c](nodes,function(i,node){var y9G="lef";var Z9G="tW";var k9G="offse";var Q9G="ttom";var L9G="bo";var e3G="setHeig";var f4V=c5Q;f4V+=t3G;f4V+=e3G;f4V+=E8G;var m4V=M9Q;m4V+=c5Q;m4V+=T0Q;var W4V=L9G;W4V+=Q9G;var g4V=k9G;g4V+=Z9G;g4V+=Y9G;var q4V=K8c;q4V+=R2c;q4V+=M9Q;var U4V=y9G;U4V+=M9Q;var y4V=O5Q;y4V+=M9Q;var pos=$(node)[c8G]();node=$(node)[y4V](V3Q);position[n8G]+=pos[n8G];position[U4V]+=pos[q4V];position[U9G]+=pos[q9G]+node[g4V];position[W4V]+=pos[m4V]+node[f4V];});position[A4V]/=nodes[D4V];position[i4V]/=nodes[J4V];position[U9G]/=nodes[T4V];position[g9G]/=nodes[h4V];var top=position[n8G],left=(position[C4V]+position[U9G])/N3Q,width=liner[W9G](),visLeft=left-width/N3Q,visRight=visLeft+width,docWidth=$(window)[V4V](),padding=r3Q,classes=this[H4V][N4V];wrapper[Z3c]({top:top,left:left});if(liner[I8c]&&liner[c8G]()[M4V]<V3Q){var F4V=m9G;F4V+=f9G;var O4V=A9G;O4V+=h0Q;O4V+=D5Q;O4V+=D5Q;var E4V=X5Q;E4V+=q2c;E4V+=M9Q;E4V+=u8c;var B4V=M9Q;B4V+=c5Q;B4V+=T0Q;var c4V=u5c;c4V+=D5Q;wrapper[c4V](B4V,position[E4V])[O4V](F4V);}else{var d4V=m9G;d4V+=f9G;wrapper[q9c](d4V);}if(visRight+padding>docWidth){var v4V=K8c;v4V+=G3G;var s4V=g0Q;s4V+=D5Q;s4V+=D5Q;var diff=visRight-docWidth;liner[s4V](v4V,visLeft<padding?-(visLeft-padding):-(diff+padding));}else{liner[Z3c](D9G,visLeft<padding?-(visLeft-padding):V3Q);}return this;};Editor[l4V][R4V]=function(buttons){var C9G="ubm";var z4V=i9G;z4V+=J9G;z4V+=r0Q;var b4V=W2c;b4V+=M9Q;b4V+=T9G;var o4V=X9Q;o4V+=c5Q;o4V+=w5Q;var that=this;if(buttons===h9G){var r4V=D5Q;r4V+=C9G;r4V+=H0Q;r4V+=M9Q;buttons=[{text:this[Z1c][this[D5Q][X6G]][r4V],action:function(){var P4V=D5Q;P4V+=J0Q;P4V+=V9G;this[P4V]();}}];}else if(!$[H9G](buttons)){buttons=[buttons];}$(this[o4V][b4V])[z4V]();$[H3c](buttons,function(i,btn){var R9G='keyup';var l9G='<button/>';var s9G="sN";var F9G="abindex";var O9G="ndex";var E9G="bI";var c9G="tabI";var M9G="ypr";var e4V=X5Q;e4V+=J0Q;e4V+=N9G;e4V+=D5Q;var t4V=X9Q;t4V+=u8c;var j4V=z2c;j4V+=d9Q;j4V+=M9G;j4V+=Y5c;var u4V=c5Q;u4V+=p5Q;var w4V=c5Q;w4V+=p5Q;var G4V=c9G;G4V+=O7c;G4V+=B9G;var x4V=M9Q;x4V+=h0Q;x4V+=E9G;x4V+=O9G;var I4V=M9Q;I4V+=F9G;var S4V=h0Q;S4V+=M9Q;S4V+=d9G;var n4V=K3G;n4V+=s9G;n4V+=v9G;n4V+=d9Q;var K4V=R2c;K4V+=c5Q;K4V+=A8G;var X4V=R2c;X4V+=p5Q;var p4V=y7Q;p4V+=z0Q;if(typeof btn===g5c){btn={text:btn,action:function(){this[b5c]();}};}var text=btn[p4V]||btn[Y6c];var action=btn[X6G]||btn[X4V];$(l9G,{'class':that[P3c][K4V][N0c]+(btn[n4V]?E1c+btn[F1c]:T8c)})[n5c](typeof text===h5p.A9Q?text(that):text||T8c)[S4V](I4V,btn[x4V]!==undefined?btn[G4V]:V3Q)[w4V](R9G,function(e){if(e[r9G]===l3Q&&action){var a4V=g0Q;a4V+=P9G;a4V+=r7Q;action[a4V](that);}})[u4V](j4V,function(e){if(e[r9G]===l3Q){e[o9G]();}})[B2G](g3c,function(e){e[o9G]();if(action){action[J0c](that);}})[M3G](that[t4V][e4V]);});return this;};Editor[L2V][b9G]=function(fieldName){var G9G="_fieldNames";var x9G="includeField";var n9G="rder";var K9G="splic";var X9G="udeFiel";var p9G="ncl";var k2V=v9c;k2V+=z9G;k2V+=O0Q;var Q2V=R2c;Q2V+=v9Q;Q2V+=q5Q;Q2V+=D5Q;var that=this;var fields=this[D5Q][Q2V];if(typeof fieldName===k2V){var g2V=H0Q;g2V+=p9G;g2V+=X9G;g2V+=z4c;var q2V=P4c;q2V+=h5c;q2V+=L5c;var U2V=K9G;U2V+=d9Q;var y2V=G5Q;y2V+=X9Q;y2V+=d9Q;y2V+=I5Q;var Y2V=c5Q;Y2V+=n9G;var Z2V=p7Q;Z2V+=r7Q;Z2V+=X9Q;that[Z2V](fieldName)[S9G]();delete fields[fieldName];var orderIdx=$[I9G](fieldName,this[D5Q][Y2V]);this[D5Q][y2V][U2V](orderIdx,H3Q);var includeIdx=$[q2V](fieldName,this[D5Q][g2V]);if(includeIdx!==-H3Q){var W2V=x9G;W2V+=D5Q;this[D5Q][W2V][C1G](includeIdx,H3Q);}}else{$[H3c](this[G9G](fieldName),function(i,name){var w9G="lear";var m2V=g0Q;m2V+=w9G;that[m2V](name);});}return this;};Editor[f2V][U7c]=function(){this[o3G](x8c);return this;};Editor[E3c][A2V]=function(arg1,arg2,arg3,arg4){var J5G='initCreate';var U5G="num";var Y5G="gs";var Z5G="_crudAr";var k5G="ode";var j9G="ionC";var O2V=a9G;O2V+=D5Q;var E2V=u9G;E2V+=j9G;E2V+=t9G;E2V+=D5Q;var B2V=X5Q;B2V+=e9G;var c2V=x3c;c2V+=D5Q;c2V+=L5G;c2V+=E0c;var M2V=Q5G;M2V+=p5Q;var N2V=w5Q;N2V+=h0Q;N2V+=P4c;var H2V=w5Q;H2V+=k5G;var V2V=Z5G;V2V+=Y5G;var T2V=y5G;T2V+=D5Q;var J2V=U5G;J2V+=q5G;var i2V=A7Q;i2V+=M9Q;i2V+=H0Q;i2V+=K7c;var D2V=B9Q;D2V+=g5G;var that=this;var fields=this[D5Q][D2V];var count=H3Q;if(this[i2V](function(){that[W5G](arg1,arg2,arg3,arg4);})){return this;}if(typeof arg1===J2V){count=arg1;arg1=arg2;arg2=arg3;}this[D5Q][T2V]={};for(var i=V3Q;i<count;i++){var C2V=p7Q;C2V+=r7Q;C2V+=X9Q;C2V+=D5Q;var h2V=f0Q;h2V+=f5Q;h2V+=B5Q;h2V+=z4c;this[D5Q][h2V][i]={fields:this[D5Q][C2V]};}var argOpts=this[V2V](arg1,arg2,arg3,arg4);this[D5Q][H2V]=N2V;this[D5Q][M2V]=W5G;this[D5Q][m5G]=e1c;this[q3c][B3G][Q8G][c2V]=B2V;this[E2V]();this[V1G](this[O2V]());$[H3c](fields,function(name,field){var D5G="tiSet";var A5G="eset";var f5G="R";var v2V=c2c;v2V+=R2c;var F2V=w5Q;F2V+=e5c;F2V+=f5G;F2V+=A5G;field[F2V]();for(var i=V3Q;i<count;i++){var s2V=X9Q;s2V+=d9Q;s2V+=R2c;var d2V=h5Q;d2V+=r7Q;d2V+=D5G;field[d2V](i,field[s2V]());}field[E5c](field[v2V]());});this[i5G](J5G,e1c,function(){var C5G="_formOpt";var T5G="maybe";var R2V=T5G;R2V+=h5G;R2V+=z7Q;R2V+=p5Q;var l2V=C5G;l2V+=H0Q;l2V+=B2G;l2V+=D5Q;that[V5G]();that[l2V](argOpts[A3c]);argOpts[R2V]();});return this;};Editor[E3c][r2V]=function(parent){var H5G="undependent";var o2V=c5Q;o2V+=R2c;o2V+=R2c;if($[H9G](parent)){var P2V=I3G;P2V+=n8c;P2V+=p4c;for(var i=V3Q,ien=parent[P2V];i<ien;i++){this[H5G](parent[i]);}return this;}var field=this[a9G](parent);$(field[N5G]())[o2V](M5G);return this;};Editor[b2V][z2V]=function(parent,url,opts){var F5G='POST';var O5G="dependent";var E5G="sArr";var B5G="chang";var Z8V=d9Q;Z8V+=c5G;Z8V+=p5Q;Z8V+=M9Q;var k8V=R9c;k8V+=c2c;var n2V=B5G;n2V+=d9Q;var K2V=B9G;K2V+=y7Q;K2V+=O7c;var p2V=H0Q;p2V+=E5G;p2V+=E0c;if($[p2V](parent)){var X2V=r7Q;X2V+=S3G;X2V+=M9Q;X2V+=p4c;for(var i=V3Q,ien=parent[X2V];i<ien;i++){this[O5G](parent[i],url,opts);}return this;}var that=this;var field=this[a9G](parent);var ajaxOpts={type:F5G,dataType:d5G};opts=$[K2V]({event:n2V,data:e1c,preUpdate:e1c,postUpdate:e1c},opts);var update=function(json){var P5G="postUpdate";var r5G="preUpdate";var s5G="sab";var Q8V=c7Q;Q8V+=t8c;var L8V=x3c;L8V+=s5G;L8V+=K8c;var e2V=I4c;e2V+=f3c;e2V+=d9Q;var t2V=D5Q;t2V+=p4c;t2V+=v5G;var j2V=l5G;j2V+=d9Q;var w2V=R5G;w2V+=I5Q;var G2V=x9Q;G2V+=k6c;G2V+=O5Q;var x2V=B6c;x2V+=h0Q;x2V+=r7Q;var I2V=g4c;I2V+=X9Q;I2V+=h0Q;I2V+=y7Q;var S2V=X6c;S2V+=X5Q;S2V+=d9Q;S2V+=r7Q;if(opts[r5G]){opts[r5G](json);}$[H3c]({labels:S2V,options:I2V,values:x2V,messages:G2V,errors:w2V},function(jsonProp,fieldFn){if(json[jsonProp]){var a2V=d9Q;a2V+=h0Q;a2V+=g0Q;a2V+=p4c;$[a2V](json[jsonProp],function(field,val){var u2V=R2c;u2V+=H0Q;u2V+=P9c;u2V+=X9Q;that[u2V](field)[fieldFn](val);});}});$[H3c]([j2V,t2V,e2V,L8V],function(i,key){if(json[key]){that[key](json[key],json[G5c]);}});if(opts[P5G]){opts[P5G](json);}field[Q8V](x8c);};$(field[k8V]())[B2G](opts[Z8V]+M5G,function(e){var K5G='data';var X5G="ows";var z5G="lues";var D8V=R2c;D8V+=o5G;D8V+=l7Q;var f8V=b5G;f8V+=z5G;var m8V=x6G;m8V+=D5Q;var W8V=D4c;W8V+=p5G;var g8V=y5G;g8V+=D5Q;var q8V=I5Q;q8V+=X5G;var U8V=M9Q;U8V+=h0Q;U8V+=F8G;U8V+=K4c;var y8V=B9Q;y8V+=O7c;var Y8V=R9c;Y8V+=c2c;if($(field[Y8V]())[y8V](e[U8V])[I8c]===V3Q){return;}field[j1c](w8c);var data={};data[q8V]=that[D5Q][g8V]?_pluck(that[D5Q][W1G],K5G):e1c;data[x6G]=data[W8V]?data[m8V][V3Q]:e1c;data[f8V]=that[T3c]();if(opts[i1c]){var ret=opts[i1c](data);if(ret){var A8V=e6c;A8V+=h0Q;opts[A8V]=ret;}}if(typeof url===D8V){var o=url(field[T3c](),data,update);if(o){if(typeof o===h5p.T9Q&&typeof o[n5G]===h5p.A9Q){o[n5G](function(resolved){if(resolved){update(resolved);}});}else{update(o);}}}else{if($[Q5c](url)){$[Y1c](ajaxOpts,url);}else{var i8V=J0Q;i8V+=I5Q;i8V+=r7Q;ajaxOpts[i8V]=url;}$[H1G]($[Y1c](ajaxOpts,{url:url,data:data,success:update}));}});return this;};Editor[E3c][S9G]=function(){var u5G="oy";var w5G="mplat";var x5G="isplaye";var I5G="stroy";var H8V=S5G;H8V+=R8G;H8V+=d9Q;var C8V=X9Q;C8V+=d9Q;C8V+=I5G;var J8V=X9Q;J8V+=x5G;J8V+=X9Q;if(this[D5Q][J8V]){var T8V=i2c;T8V+=J2c;this[T8V]();}this[b9G]();if(this[D5Q][G5G]){var h8V=y7Q;h8V+=w5G;h8V+=d9Q;$(K3c)[Y7c](this[D5Q][h8V]);}var controller=this[D5Q][H0c];if(controller[C8V]){var V8V=a5G;V8V+=I5Q;V8V+=u5G;controller[V8V](this);}$(document)[I8G](H8V+this[D5Q][j5G]);this[q3c]=e1c;this[D5Q]=e1c;};Editor[E3c][t5G]=function(name){var L0G="Names";var M8V=e5G;M8V+=q5Q;M8V+=L0G;var N8V=d9Q;N8V+=N2G;var that=this;$[N8V](this[M8V](name),function(i,n){var c8V=Q0G;c8V+=X5Q;c8V+=r7Q;c8V+=d9Q;that[a9G](n)[c8V]();});return this;};Editor[E3c][B8V]=function(show){var Y0G='open';var Z0G="isplayed";var O8V=k0G;O8V+=d9Q;if(show===undefined){var E8V=X9Q;E8V+=Z0G;return this[D5Q][E8V];}return this[show?Y0G:O8V]();};Editor[E3c][F8V]=function(){return $[y0G](this[D5Q][Z1G],function(field,name){var U0G="splaye";var d8V=X9Q;d8V+=H0Q;d8V+=U0G;d8V+=X9Q;return field[d8V]()?name:e1c;});};Editor[s8V][v8V]=function(){var q0G="playControlle";var R8V=p5Q;R8V+=c5Q;R8V+=c2c;var l8V=x3c;l8V+=D5Q;l8V+=q0G;l8V+=I5Q;return this[D5Q][l8V][R8V](this);};Editor[E3c][B1G]=function(items,arg1,arg2,arg3,arg4){var b8V=w5Q;b8V+=h0Q;b8V+=P4c;var o8V=B9Q;o8V+=g5G;var P8V=g0G;P8V+=I7Q;var that=this;if(this[P1G](function(){var r8V=f0Q;r8V+=f5Q;that[r8V](items,arg1,arg2,arg3,arg4);})){return this;}var argOpts=this[W0G](arg1,arg2,arg3,arg4);this[m0G](items,this[P8V](o8V,items),b8V,argOpts[A3c],function(){var i0G="mOptio";var D0G="_for";var A0G="Open";var f0G="yb";var X8V=U2G;X8V+=f0G;X8V+=d9Q;X8V+=A0G;var p8V=Q1c;p8V+=M9Q;p8V+=D5Q;var z8V=D0G;z8V+=i0G;z8V+=D1G;that[V5G]();that[z8V](argOpts[p8V]);argOpts[X8V]();});return this;};Editor[E3c][K8V]=function(name){var J0G="fieldNa";var n8V=A7Q;n8V+=J0G;n8V+=T0G;var that=this;$[H3c](this[n8V](name),function(i,n){that[a9G](n)[h0G]();});return this;};Editor[E3c][g9c]=function(name,msg){var H0G="globalError";var C0G="essag";if(msg===undefined){var S8V=t3c;S8V+=C0G;S8V+=d9Q;this[S8V](this[q3c][V0G],name);this[D5Q][H0G]=name;}else{var I8V=R5G;I8V+=I5Q;this[a9G](name)[I8V](msg);}return this;};Editor[x8V][a9G]=function(name){var N0G='Unknown field name - ';var G8V=R2c;G8V+=H0Q;G8V+=d9Q;G8V+=l9Q;var fields=this[D5Q][G8V];if(!fields[name]){throw N0G+name;}return fields[name];};Editor[w8V][Z1G]=function(){return $[y0G](this[D5Q][Z1G],function(field,name){return name;});};Editor[a8V][M0G]=_api_file;Editor[E3c][s8c]=_api_files;Editor[u8V][j8V]=function(name){var Q6V=O0Q;Q6V+=d9Q;Q6V+=M9Q;var L6V=B9Q;L6V+=d9Q;L6V+=q5Q;var that=this;if(!name){var t8V=w9Q;t8V+=X9Q;t8V+=D5Q;name=this[t8V]();}if($[H9G](name)){var out={};$[H3c](name,function(i,n){var e8V=R2c;e8V+=l2c;e8V+=X9Q;out[n]=that[e8V](n)[B5c]();});return out;}return this[L6V](name)[Q6V]();};Editor[k6V][Z6V]=function(names,animate){var B0G="ieldNames";var c0G="_f";var y6V=c0G;y6V+=B0G;var Y6V=d9Q;Y6V+=h0Q;Y6V+=g0Q;Y6V+=p4c;var that=this;$[Y6V](this[y6V](names),function(i,n){var E0G="ide";var q6V=p4c;q6V+=E0G;var U6V=R2c;U6V+=H0Q;U6V+=d9Q;U6V+=q5Q;that[U6V](n)[q6V](animate);});return this;};Editor[E3c][g6V]=function(includeHash){return $[y0G](this[D5Q][W1G],function(edit,idSrc){return includeHash===w8c?O0G+idSrc:idSrc;});};Editor[W6V][m6V]=function(inNames){var v0G="inError";var d0G="globalE";var F0G="ldNa";var A6V=e5G;A6V+=F0G;A6V+=T0G;var f6V=d0G;f6V+=s0G;var formError=$(this[q3c][V0G]);if(this[D5Q][f6V]){return w8c;}var names=this[A6V](inNames);for(var i=V3Q,ien=names[I8c];i<ien;i++){var D6V=B9Q;D6V+=P9c;D6V+=X9Q;if(this[D6V](names[i])[v0G]()){return w8c;}}return x8c;};Editor[E3c][i6V]=function(cell,fieldName,opts){var o0G="inline";var P0G="nlin";var r0G="dual";var R0G="indivi";var l0G="iv.DTE_F";var E6V=n7Q;E6V+=X9Q;E6V+=H0Q;E6V+=M9Q;var B6V=r7Q;B6V+=d9Q;B6V+=m0Q;B6V+=D9c;var c6V=X9Q;c6V+=l0G;c6V+=H0Q;c6V+=s2c;var V6V=d9Q;V6V+=h0Q;V6V+=g0Q;V6V+=p4c;var C6V=g3G;C6V+=D5Q;var h6V=R0G;h6V+=r0G;var T6V=H0Q;T6V+=P0G;T6V+=d9Q;var J6V=B9G;J6V+=M9Q;J6V+=d9Q;J6V+=O7c;var that=this;if($[Q5c](fieldName)){opts=fieldName;fieldName=undefined;}opts=$[J6V]({},this[D5Q][z1G][T6V],opts);var editFields=this[q1G](h6V,cell,fieldName);var node,field;var countOuter=V3Q,countInner;var closed=x8c;var classes=this[C6V][o0G];$[V6V](editFields,function(i,editField){var K0G=" at a time";var X0G=" row ";var p0G="Cannot edit more than one";var M6V=d9Q;M6V+=b0G;M6V+=p4c;var N6V=z0G;N6V+=h0Q;N6V+=d8c;if(countOuter>V3Q){var H6V=p0G;H6V+=X0G;H6V+=o0G;H6V+=K0G;throw H6V;}node=$(editField[N6V][V3Q]);countInner=V3Q;$[M6V](editField[n0G],function(j,f){var S0G='Cannot edit more than one field inline at a time';if(countInner>V3Q){throw S0G;}field=f;countInner++;});countOuter++;});if($(c6V,node)[B6V]){return this;}if(this[P1G](function(){that[o0G](cell,fieldName,opts);})){return this;}this[E6V](cell,editFields,I0G,opts,function(){var k7G='<div class="DTE_Processing_Indicator"><span/></div>';var Q7G='" style="width:';var L7G="contents";var e0G="_formOptio";var t0G="inli";var j0G="<div clas";var u0G="x\">";var a0G="Err";var w0G="eReg";var G0G="stope";var t6V=x0G;t6V+=G0G;t6V+=p5Q;var n6V=A7Q;n6V+=k0G;n6V+=w0G;var p6V=B3G;p6V+=a0G;p6V+=c5Q;p6V+=I5Q;var z6V=n6G;z6V+=d9Q;var b6V=X9Q;b6V+=H0Q;b6V+=B6c;b6V+=S5G;var o6V=R6c;o6V+=N6c;o6V+=E6c;var P6V=z6c;P6V+=R0c;var r6V=T0Q;r6V+=u0G;var R6V=l8G;R6V+=X9Q;R6V+=D9c;var l6V=j0G;l6V+=U3G;var v6V=R6c;v6V+=E6c;var s6V=X9Q;s6V+=d9Q;s6V+=M9Q;s6V+=N2G;var d6V=t0G;d6V+=l0Q;var F6V=f3G;F6V+=I4c;var O6V=e0G;O6V+=D1G;var namespace=that[O6V](opts);var ret=that[F6V](d6V);if(!ret){return that;}var children=node[L7G]()[s6V]();node[Y7c]($(H3G+classes[B1c]+v6V+l6V+classes[V3G]+Q7G+node[R6V]()+r6V+k7G+P6V+H3G+classes[Z7G]+o6V+a1c));node[Y7G](b6V+classes[V3G][W5c](/ /g,y7G))[Y7c](field[z6V]())[Y7c](that[q3c][p6V]);if(opts[Z7G]){var K6V=C4G;K6V+=z7Q;K6V+=O7c;var X6V=x3c;X6V+=U7G;node[Y7G](X6V+classes[Z7G][W5c](/ /g,y7G))[K6V](that[q3c][Z7G]);}that[n6V](function(submitComplete,action){var W7G="tents";var q7G="lick";var S6V=g0Q;S6V+=q7G;closed=w8c;$(document)[I8G](S6V+namespace);if(!submitComplete||action!==g7G){var I6V=g0Q;I6V+=B2G;I6V+=W7G;node[I6V]()[o9c]();node[Y7c](children);}that[r3G]();});setTimeout(function(){if(closed){return;}$(document)[B2G](g3c+namespace,function(e){var h7G='owns';var T7G='addBack';var J7G="ddBa";var i7G="elf";var A7G="_ty";var f7G="targe";var m7G="targ";var u6V=m7G;u6V+=d9Q;u6V+=M9Q;var a6V=f7G;a6V+=M9Q;var w6V=A7G;w6V+=z7Q;w6V+=I3c;var G6V=D7G;G6V+=X9Q;G6V+=A0Q;G6V+=i7G;var x6V=h0Q;x6V+=J7G;x6V+=C8G;var back=$[C8c][x6V]?T7G:G6V;if(!field[w6V](h7G,e[a6V])&&$[I9G](node[V3Q],$(e[u6V])[C7G]()[back]())===-H3Q){var j6V=X5Q;j6V+=V7G;j6V+=I5Q;that[j6V]();}});},V3Q);that[b3G]([field],opts[C9c]);that[t6V](I0G);});return this;};Editor[e6V][E3G]=function(name,msg){var N7G="_message";var H7G="rmI";if(msg===undefined){var L1V=V9c;L1V+=H7G;L1V+=M5Q;L1V+=c5Q;this[N7G](this[q3c][L1V],name);}else{var Q1V=R2c;Q1V+=H0Q;Q1V+=P9c;Q1V+=X9Q;this[Q1V](name)[E3G](msg);}return this;};Editor[k1V][Z1V]=function(mode){var F7G='Changing from create mode is not supported';var O7G='Not currently in an editing mode';var M7G="reat";var q1V=g0Q;q1V+=y2c;q1V+=h0Q;q1V+=y7Q;var U1V=g0Q;U1V+=M7G;U1V+=d9Q;var y1V=c7G;y1V+=B7G;y1V+=p5Q;if(!mode){var Y1V=h0Q;Y1V+=g0Q;Y1V+=E7G;Y1V+=p5Q;return this[D5Q][Y1V];}if(!this[D5Q][X6G]){throw new Error(O7G);}else if(this[D5Q][y1V]===U1V&&mode!==q1V){throw new Error(F7G);}this[D5Q][X6G]=mode;return this;};Editor[E3c][g1V]=function(){var W1V=V2c;W1V+=x3c;W1V+=d7G;return this[D5Q][W1V];};Editor[m1V][s7G]=function(fieldNames){var v7G="isArr";var A1V=v7G;A1V+=h0Q;A1V+=r0Q;var that=this;if(fieldNames===undefined){var f1V=B9Q;f1V+=d9Q;f1V+=l9Q;fieldNames=this[f1V]();}if($[A1V](fieldNames)){var D1V=d9Q;D1V+=h0Q;D1V+=g0Q;D1V+=p4c;var out={};$[D1V](fieldNames,function(i,name){var l7G="iG";var J1V=h5Q;J1V+=Y0c;J1V+=l7G;J1V+=K4c;var i1V=B9Q;i1V+=P9c;i1V+=X9Q;out[name]=that[i1V](name)[J1V]();});return out;}return this[a9G](fieldNames)[s7G]();};Editor[T1V][f1G]=function(fieldNames,val){var R7G="iSet";var that=this;if($[Q5c](fieldNames)&&val===undefined){var h1V=d9Q;h1V+=h0Q;h1V+=g0Q;h1V+=p4c;$[h1V](fieldNames,function(name,value){var C1V=R2c;C1V+=v9Q;C1V+=r7Q;C1V+=X9Q;that[C1V](name)[f1G](value);});}else{var V1V=h5Q;V1V+=Y0c;V1V+=R7G;this[a9G](fieldNames)[V1V](val);}return this;};Editor[E3c][N5G]=function(name){var E1V=p5Q;E1V+=c5Q;E1V+=X9Q;E1V+=d9Q;var B1V=R2c;B1V+=H0Q;B1V+=P9c;B1V+=X9Q;var N1V=w5Q;N1V+=C4G;var H1V=r7G;H1V+=h1G;var that=this;if(!name){name=this[J1G]();}return $[H1V](name)?$[N1V](name,function(n){var c1V=p5Q;c1V+=c5Q;c1V+=X9Q;c1V+=d9Q;var M1V=R2c;M1V+=v9Q;M1V+=r7Q;M1V+=X9Q;return that[M1V](n)[c1V]();}):this[B1V](name)[E1V]();};Editor[E3c][I8G]=function(name,fn){var o7G="Name";var O1V=A7Q;O1V+=P7G;O1V+=o7G;$(this)[I8G](this[O1V](name),fn);return this;};Editor[F1V][B2G]=function(name,fn){$(this)[B2G](this[b7G](name),fn);return this;};Editor[E3c][d1V]=function(name,fn){var s1V=c5Q;s1V+=p5Q;s1V+=d9Q;$(this)[s1V](this[b7G](name),fn);return this;};Editor[E3c][z7G]=function(){var I7G="eorder";var S7G="_displayR";var n7G="oseReg";var X7G="oller";var p7G="displayContr";var S1V=w5Q;S1V+=h0Q;S1V+=P4c;var n1V=x0G;n1V+=D5Q;n1V+=M7Q;var X1V=P7c;X1V+=C7c;var p1V=X9Q;p1V+=c5Q;p1V+=w5Q;var z1V=c5Q;z1V+=T0Q;z1V+=d9Q;z1V+=p5Q;var b1V=p7G;b1V+=X7G;var o1V=U2G;o1V+=H0Q;o1V+=p5Q;var P1V=K7G;P1V+=y2c;P1V+=c5Q;P1V+=r9c;var l1V=j7Q;l1V+=n7G;var v1V=S7G;v1V+=I7G;var that=this;this[v1V]();this[l1V](function(submitComplete){var R1V=g0Q;R1V+=L5Q;R1V+=d9Q;that[D5Q][H0c][R1V](that,function(){var G7G="micInfo";var x7G="_clearDyn";var r1V=x7G;r1V+=h0Q;r1V+=G7G;that[r1V]();});});var ret=this[P1V](o1V);if(!ret){return this;}this[D5Q][b1V][z1V](this,this[p1V][X1V],function(){var K1V=R2c;K1V+=c5Q;K1V+=H9c;K1V+=D5Q;that[b3G]($[y0G](that[D5Q][J1G],function(name){return that[D5Q][Z1G][name];}),that[D5Q][w7G][K1V]);});this[n1V](S1V);return this;};Editor[E3c][J1G]=function(set){var k4i="and no additional fields, must be provided for ordering.";var Q4i="All fields, ";var t7G="sort";var j7G="otyp";var a7G="so";var u1V=d9Q;u1V+=z0Q;u1V+=Z2c;var w1V=a7G;w1V+=I5Q;w1V+=M9Q;var G1V=O9c;G1V+=H0Q;G1V+=g0Q;G1V+=d9Q;if(!set){return this[D5Q][J1G];}if(arguments[I8c]&&!$[H9G](set)){var x1V=u7G;x1V+=r7Q;var I1V=T7Q;I1V+=j7G;I1V+=d9Q;set=Array[I1V][O3c][x1V](arguments);}if(this[D5Q][J1G][O3c]()[t7G]()[e7G](L4i)!==set[G1V]()[w1V]()[e7G](L4i)){var a1V=Q4i;a1V+=k4i;throw a1V;}$[u1V](this[D5Q][J1G],set);this[V1G]();return this;};Editor[j1V][d5c]=function(items,arg1,arg2,arg3,arg4){var D4i='node';var A4i='initRemove';var f4i='fields';var m4i="dArgs";var W4i="_cru";var U4i="ctio";var Y4i="rem";var Z4i="ionClass";var y3V=p2c;y3V+=j6c;var Y3V=u9G;Y3V+=Z4i;var Z3V=Y4i;Z3V+=y4i;var k3V=h0Q;k3V+=U4i;k3V+=p5Q;var Q3V=q4i;Q3V+=h0Q;Q3V+=A0Q;Q3V+=g4i;var L3V=W4i;L3V+=m4i;var t1V=A7Q;t1V+=M9Q;t1V+=H0Q;t1V+=K7c;var that=this;if(this[t1V](function(){var e1V=y2c;e1V+=w5Q;e1V+=y4i;that[e1V](items,arg1,arg2,arg3,arg4);})){return this;}if(items[I8c]===undefined){items=[items];}var argOpts=this[L3V](arg1,arg2,arg3,arg4);var editFields=this[Q3V](f4i,items);this[D5Q][k3V]=Z3V;this[D5Q][m5G]=items;this[D5Q][W1G]=editFields;this[q3c][B3G][Q8G][G4c]=n3c;this[Y3V]();this[i5G](A4i,[_pluck(editFields,D4i),_pluck(editFields,y3V),items],function(){var J4i='initMultiRemove';var U3V=A7Q;U3V+=i4i;U3V+=p5Q;U3V+=M9Q;that[U3V](J4i,[editFields,items],function(){var C4i="eO";var h4i="mayb";var g3V=R2c;g3V+=c5Q;g3V+=T4i;var q3V=h4i;q3V+=C4i;q3V+=r9c;that[V5G]();that[V4i](argOpts[A3c]);argOpts[q3V]();var opts=that[D5Q][w7G];if(opts[g3V]!==e1c){var W3V=X5Q;W3V+=U2c;W3V+=H4i;$(W3V,that[q3c][Z7G])[N4i](opts[C9c])[C9c]();}});});return this;};Editor[E3c][E5c]=function(set,val){var c4i="inObjec";var M4i="isPla";var m3V=M4i;m3V+=c4i;m3V+=M9Q;var that=this;if(!$[m3V](set)){var o={};o[set]=val;set=o;}$[H3c](set,function(n,v){var A3V=J2c;A3V+=M9Q;var f3V=B9Q;f3V+=d9Q;f3V+=r7Q;f3V+=X9Q;that[f3V](n)[A3V](v);});return this;};Editor[D3V][W7c]=function(names,animate){var B4i="ldNames";var i3V=e5G;i3V+=B4i;var that=this;$[H3c](this[i3V](names),function(i,n){var J3V=D5Q;J3V+=p4c;J3V+=v5G;that[a9G](n)[J3V](animate);});return this;};Editor[E3c][T3V]=function(successCallback,errorCallback,formatdata,hide){var c3V=d9Q;c3V+=b0G;c3V+=p4c;var H3V=d9Q;H3V+=h0Q;H3V+=g0Q;H3V+=p4c;var h3V=Z0Q;h3V+=E4i;h3V+=O4i;var that=this,fields=this[D5Q][Z1G],errorFields=[],errorReady=V3Q,sent=x8c;if(this[D5Q][h3V]||!this[D5Q][X6G]){return this;}this[F4i](w8c);var send=function(){var d4i='initSubmit';var C3V=c7G;C3V+=l7Q;if(errorFields[I8c]!==errorReady||sent){return;}that[i5G](d4i,[that[D5Q][C3V]],function(result){var s4i="ubmi";var V3V=f7c;V3V+=s4i;V3V+=M9Q;if(result===x8c){that[F4i](x8c);return;}sent=w8c;that[V3V](successCallback,errorCallback,formatdata,hide);});};this[g9c]();$[H3V](fields,function(name,field){var v4i="inErr";var N3V=v4i;N3V+=c5Q;N3V+=I5Q;if(field[N3V]()){var M3V=l4i;M3V+=D5Q;M3V+=p4c;errorFields[M3V](name);}});$[c3V](errorFields,function(i,name){var B3V=A4c;B3V+=I5Q;B3V+=G5Q;fields[name][B3V](T8c,function(){errorReady++;send();});});send();return this;};Editor[E3V][G5G]=function(set){var P4i="lat";var R4i="tem";var F3V=R4i;F3V+=T0Q;F3V+=r7Q;F3V+=k4c;if(set===undefined){var O3V=y7Q;O3V+=r4i;O3V+=P4i;O3V+=d9Q;return this[D5Q][O3V];}this[D5Q][F3V]=set===e1c?e1c:$(set);return this;};Editor[d3V][s3V]=function(title){var p4i="ildren";var z4i="hea";var o4i="ncti";var b3V=p4c;b3V+=M9Q;b3V+=w5Q;b3V+=r7Q;var r3V=d3c;r3V+=o4i;r3V+=c5Q;r3V+=p5Q;var R3V=a3c;R3V+=b4i;var l3V=z4i;l3V+=c2c;l3V+=I5Q;var v3V=d8c;v3V+=p4i;var header=$(this[q3c][K6G])[v3V](X4i+this[P3c][l3V][R3V]);if(title===undefined){return header[n5c]();}if(typeof title===r3V){var o3V=M9Q;o3V+=l8c;var P3V=h5c;P3V+=T0Q;P3V+=H0Q;title=title(this,new DataTable[P3V](this[D5Q][o3V]));}header[b3V](title);return this;};Editor[E3c][T3c]=function(field,value){if(value!==undefined||$[Q5c](field)){var z3V=D5Q;z3V+=d9Q;z3V+=M9Q;return this[z3V](field,value);}return this[B5c](field);};var apiRegister=DataTable[I5c][K4i];function __getInst(api){var n4i="oInit";var X3V=d9Q;X3V+=X9Q;X3V+=P2c;var p3V=g0Q;p3V+=B2G;p3V+=M9Q;p3V+=J1c;var ctx=api[p3V][V3Q];return ctx[n4i][X3V]||ctx[S4i];}function __setBasic(inst,opts,type,plural){var j4i='1';var u4i=/%d/;var a4i="ace";var w4i="rep";var I4i="asic";if(!opts){opts={};}if(opts[Z7G]===undefined){var n3V=L4c;n3V+=I4i;var K3V=W2c;K3V+=x4i;opts[K3V]=n3V;}if(opts[X1c]===undefined){var x3V=M9Q;x3V+=f5Q;x3V+=K8c;var I3V=G4i;I3V+=h5p.W9Q;I3V+=p5Q;var S3V=Q0c;S3V+=M9Q;S3V+=r7Q;S3V+=d9Q;opts[S3V]=inst[I3V][type][x3V];}if(opts[E3G]===undefined){var G3V=I5Q;G3V+=i9G;G3V+=y4i;if(type===G3V){var a3V=w4i;a3V+=r7Q;a3V+=a4i;var w3V=g0Q;w3V+=B2G;w3V+=B9Q;w3V+=A8G;var confirm=inst[Z1c][type][w3V];opts[E3G]=plural!==H3Q?confirm[A7Q][a3V](u4i,plural):confirm[j4i];}else{var u3V=w5Q;u3V+=t4i;opts[u3V]=T8c;}}return opts;}apiRegister(e4i,function(){return __getInst(this);});apiRegister(L2i,function(opts){var Q2i="eate";var j3V=q2G;j3V+=Q2i;var inst=__getInst(this);inst[j3V](__setBasic(inst,opts,k2i));return this;});apiRegister(t3V,function(opts){var e3V=d9Q;e3V+=x3c;e3V+=M9Q;var inst=__getInst(this);inst[B1G](this[V3Q][V3Q],__setBasic(inst,opts,e3V));return this;});apiRegister(L9V,function(opts){var Q9V=f0Q;Q9V+=H0Q;Q9V+=M9Q;var inst=__getInst(this);inst[Q9V](this[V3Q],__setBasic(inst,opts,g7G));return this;});apiRegister(Z2i,function(opts){var Z9V=y2c;Z9V+=w5Q;Z9V+=c5Q;Z9V+=c5G;var k9V=y2c;k9V+=V2c;k9V+=B6c;k9V+=d9Q;var inst=__getInst(this);inst[k9V](this[V3Q][V3Q],__setBasic(inst,opts,Z9V,H3Q));return this;});apiRegister(Y2i,function(opts){var Y9V=I3G;Y9V+=O0Q;Y9V+=D9c;var inst=__getInst(this);inst[d5c](this[V3Q],__setBasic(inst,opts,y2i,this[V3Q][Y9V]));return this;});apiRegister(y9V,function(type,opts){if(!type){type=I0G;}else if($[Q5c](type)){var U9V=P4c;U9V+=U2i;opts=type;type=U9V;}__getInst(this)[type](this[V3Q][V3Q],opts);return this;});apiRegister(q9V,function(opts){__getInst(this)[o1G](this[V3Q],opts);return this;});apiRegister(q2i,_api_file);apiRegister(g9V,_api_files);$(document)[B2G](g2i,function(e,ctx,json){var m2i='dt';if(e[W2i]!==m2i){return;}if(json&&json[s8c]){$[H3c](json[s8c],function(name,files){var f9V=d9Q;f9V+=G9Q;var W9V=B9Q;W9V+=r7Q;W9V+=d9Q;W9V+=D5Q;if(!Editor[W9V][name]){var m9V=R2c;m9V+=o0Q;m9V+=b8c;Editor[m9V][name]={};}$[f9V](Editor[s8c][name],files);});}});Editor[A9V]=function(msg,tn){var i2i="fer to https://datatables.net/tn/";var D2i="se re";var A2i=" more information, plea";var f2i=" For";var D9V=f2i;D9V+=A2i;D9V+=D2i;D9V+=i2i;throw tn?msg+D9V+tn:msg;};Editor[J2i]=function(data,props,fn){var N2i="valu";var C2i="isPlainObje";var h2i='value';var T2i='label';var J9V=e6G;J9V+=I5Q;J9V+=s4G;J9V+=r0Q;var i9V=R1G;i9V+=O7c;var i,ien,dataPoint;props=$[i9V]({label:T2i,value:h2i},props);if($[J9V](data)){for(i=V3Q,ien=data[I8c];i<ien;i++){var T9V=C2i;T9V+=V2i;dataPoint=data[i];if($[T9V](dataPoint)){var V9V=r7Q;V9V+=H2i;V9V+=d9Q;V9V+=r7Q;var C9V=B6c;C9V+=P9G;C9V+=J0Q;C9V+=d9Q;var h9V=N2i;h9V+=d9Q;fn(dataPoint[props[h9V]]===undefined?dataPoint[props[Y6c]]:dataPoint[props[C9V]],dataPoint[props[V9V]],i,dataPoint[M2i]);}else{fn(dataPoint,dataPoint,i);}}}else{i=V3Q;$[H3c](data,function(key,val){fn(val,key,i);i++;});}};Editor[H9V]=function(id){var c2i="repl";var N9V=c2i;N9V+=b0G;N9V+=d9Q;return id[N9V](/\./g,L4i);};Editor[M9V]=function(editor,conf,files,progressCallback,completeCallback){var s8i="ice";var F8i="_limitLe";var O8i="_limitLeft";var a2i="readAsDataURL";var s2i="onload";var d2i="<i>Uploading file</i>";var F2i="fileReadText";var B2i='A server error occurred while uploading the file';var s5V=U2G;s5V+=T0Q;var reader=new FileReader();var counter=V3Q;var ids=[];var generalError=B2i;editor[g9c](conf[m1c],T8c);if(typeof conf[H1G]===h5p.A9Q){var c9V=E2i;c9V+=O2i;conf[c9V](files,function(ids){var B9V=g0Q;B9V+=h0Q;B9V+=r7Q;B9V+=r7Q;completeCallback[B9V](editor,ids);});return;}progressCallback(conf,conf[F2i]||d2i);reader[s2i]=function(e){var Q8i="oa";var w2i='preUpload';var G2i="str";var x2i="for upload plug-in";var I2i="No Ajax option specified ";var n2i="jaxDa";var K2i="ajaxData";var X2i='action';var z2i="uploadF";var o2i="aja";var P2i="ja";var r2i="unc";var l2i="pload";var v2i="preSubmit.DTE_U";var j9V=T0Q;j9V+=a7Q;j9V+=M9Q;var u9V=v2i;u9V+=l2i;var a9V=G6c;a9V+=w5Q;a9V+=d9Q;var w9V=A7Q;w9V+=d9Q;w9V+=R2i;w9V+=M9Q;var n9V=R2c;n9V+=r2i;n9V+=M1G;var K9V=v9c;K9V+=z9G;K9V+=O0Q;var z9V=h0Q;z9V+=P2i;z9V+=R9Q;var R9V=o2i;R9V+=R9Q;var s9V=J0Q;s9V+=T0Q;s9V+=r7Q;s9V+=b2i;var d9V=C4G;d9V+=z7Q;d9V+=O7c;var F9V=z2i;F9V+=Q1G;var O9V=g4c;O9V+=v2G;O9V+=p2i;var E9V=h0Q;E9V+=T0Q;E9V+=z7Q;E9V+=O7c;var data=new FormData();var ajax;data[E9V](X2i,O9V);data[Y7c](F9V,conf[m1c]);data[d9V](s9V,files[counter]);if(conf[K2i]){var v9V=h0Q;v9V+=n2i;v9V+=j6c;conf[v9V](data);}if(conf[H1G]){var l9V=E2i;l9V+=O2i;ajax=conf[l9V];}else if($[Q5c](editor[D5Q][R9V])){var b9V=g4c;b9V+=W4c;var o9V=o2i;o9V+=R9Q;var P9V=g4c;P9V+=r7Q;P9V+=b2i;var r9V=h0Q;r9V+=S2i;r9V+=h0Q;r9V+=R9Q;ajax=editor[D5Q][r9V][P9V]?editor[D5Q][o9V][b9V]:editor[D5Q][H1G];}else if(typeof editor[D5Q][z9V]===g5c){var p9V=o2i;p9V+=R9Q;ajax=editor[D5Q][p9V];}if(!ajax){var X9V=I2i;X9V+=x2i;throw X9V;}if(typeof ajax===K9V){ajax={url:ajax};}if(typeof ajax[i1c]===n9V){var x9V=d9Q;x9V+=h0Q;x9V+=g0Q;x9V+=p4c;var I9V=G2i;I9V+=y5c;var S9V=X9Q;S9V+=h0Q;S9V+=M9Q;S9V+=h0Q;var d={};var ret=ajax[S9V](d);if(ret!==undefined&&typeof ret!==I9V){d=ret;}$[x9V](d,function(key,value){var G9V=h0Q;G9V+=c4G;G9V+=p5Q;G9V+=X9Q;data[G9V](key,value);});}var preRet=editor[w9V](w2i,[conf[a9V],files[counter],data]);if(preRet===x8c){if(counter<files[I8c]-H3Q){counter++;reader[a2i](files[counter]);}else{completeCallback[J0c](editor,ids);}return;}var submit=x8c;editor[B2G](u9V,function(){submit=w8c;return x8c;});$[H1G]($[Y1c]({},ajax,{type:j9V,data:data,dataType:d5G,contentType:x8c,processData:x8c,xhr:function(){var Z8i="onprogress";var e2i="oadend";var t2i="onl";var j2i="ajaxSettings";var u2i="xh";var e9V=g4c;e9V+=v2G;e9V+=h0Q;e9V+=X9Q;var t9V=u2i;t9V+=I5Q;var xhr=$[j2i][t9V]();if(xhr[e9V]){var Z5V=t2i;Z5V+=e2i;var k5V=L8i;k5V+=Q8i;k5V+=X9Q;var L5V=J0Q;L5V+=k8i;L5V+=h0Q;L5V+=X9Q;xhr[L5V][Z8i]=function(e){var W8i=':';var g8i="%";var q8i="toFixed";var U8i="total";var y8i="oade";var Y8i="lengthComputable";if(e[Y8i]){var Q5V=r7Q;Q5V+=y8i;Q5V+=X9Q;var percent=(e[Q5V]/e[U8i]*t3Q)[q8i](V3Q)+g8i;progressCallback(conf,files[I8c]===H3Q?percent:counter+W8i+files[I8c]+E1c+percent);}};xhr[k5V][Z5V]=function(e){var f8i='Processing';var m8i="processingText";progressCallback(conf,conf[m8i]||f8i);};}return xhr;},success:function(json){var M8i="RL";var H8i="readAs";var C8i="nam";var h8i="status";var J8i="E_Upload";var i8i="preSubmit.DT";var D8i="oadXhrSucce";var A8i="ieldErrors";var J5V=H0Q;J5V+=X9Q;var i5V=J0Q;i5V+=l2i;var D5V=g4c;D5V+=r7Q;D5V+=Q8i;D5V+=X9Q;var f5V=d9Q;f5V+=I5Q;f5V+=D4c;f5V+=I5Q;var g5V=r7Q;g5V+=I4c;g5V+=Z0c;var q5V=R2c;q5V+=A8i;var U5V=L8i;U5V+=D8i;U5V+=z3c;var y5V=A7Q;y5V+=d9Q;y5V+=c5G;y5V+=L7c;var Y5V=i8i;Y5V+=J8i;editor[I8G](Y5V);editor[y5V](U5V,[conf[m1c],json]);if(json[q5V]&&json[T8i][g5V]){var errors=json[T8i];for(var i=V3Q,ien=errors[I8c];i<ien;i++){var m5V=p5Q;m5V+=h0Q;m5V+=w5Q;m5V+=d9Q;var W5V=d9Q;W5V+=I5Q;W5V+=D4c;W5V+=I5Q;editor[W5V](errors[i][m5V],errors[i][h8i]);}}else if(json[f5V]){var A5V=A4c;A5V+=I5Q;A5V+=G5Q;editor[A5V](json[g9c]);}else if(!json[D5V]||!json[i5V][J5V]){var T5V=C8i;T5V+=d9Q;editor[g9c](conf[T5V],generalError);}else{var c5V=r7Q;c5V+=I4c;c5V+=n8c;c5V+=p4c;var M5V=H0Q;M5V+=X9Q;var N5V=J0Q;N5V+=k8i;N5V+=h0Q;N5V+=X9Q;var H5V=l4i;H5V+=V8i;var h5V=M0G;h5V+=D5Q;if(json[h5V]){var V5V=B9Q;V5V+=K8c;V5V+=D5Q;var C5V=k5c;C5V+=p4c;$[C5V](json[V5V],function(table,files){if(!Editor[s8c][table]){Editor[s8c][table]={};}$[Y1c](Editor[s8c][table],files);});}ids[H5V](json[N5V][M5V]);if(counter<files[c5V]-H3Q){var B5V=H8i;B5V+=N8i;B5V+=S0Q;B5V+=M8i;counter++;reader[B5V](files[counter]);}else{var E5V=g0Q;E5V+=P9G;E5V+=r7Q;completeCallback[E5V](editor,ids);if(submit){var O5V=D5Q;O5V+=J0Q;O5V+=X5Q;O5V+=c8i;editor[O5V]();}}}progressCallback(conf);},error:function(xhr){var E8i='uploadXhrError';var d5V=d9Q;d5V+=s0G;var F5V=B8i;F5V+=d9Q;F5V+=L7c;editor[F5V](E8i,[conf[m1c],xhr]);editor[d5V](conf[m1c],generalError);progressCallback(conf);}}));};files=$[s5V](files,function(val){return val;});if(conf[O8i]!==undefined){var R5V=r7Q;R5V+=I4c;R5V+=Z0c;var l5V=F8i;l5V+=G3G;var v5V=d8i;v5V+=s8i;files[v5V](conf[l5V],files[R5V]);}reader[a2i](files[V3Q]);};Editor[E3c][r5V]=function(init){var a6i='xhr.dt.dte';var G6i="nTable";var x6i="bodyContent";var I6i="formContent";var X6i="events";var o6i="taT";var P6i="UTTONS";var R6i='<div data-dte-e="form_error" class="';var l6i='</form>';var v6i='<div data-dte-e="form_content" class="';var s6i="tag";var F6i='<div data-dte-e="foot" class="';var O6i='<div data-dte-e="body" class="';var E6i="indicator";var M6i="domTable";var C6i="db";var h6i="Ur";var T6i="omTable";var J6i="Sources";var i6i="rces";var D6i="dataS";var A6i="acyA";var f6i="leg";var m6i="templa";var W6i="ses";var q6i="18n";var U6i="ta-dte-e=\"processing\" class=\"";var y6i="<div da";var Y6i="_content\" class=\"";var Z6i="<div data-dte-e=\"b";var Q6i="foote";var L6i="-dte-e=\"form\" class=";var e8i="<form dat";var t8i="data-dte-e=\"form_info\" cla";var j8i="v ";var u8i="d\" cla";var a8i="<div data-dte-e=\"hea";var G8i="\"><div cl";var S8i="<div data-dte-e=\"form_buttons\" class";var X8i="TableToo";var p8i="orm_content";var z8i="body_cont";var b8i="t.dte";var o8i="que";var P8i="uni";var r8i="iq";var R8i="_even";var l8i="Complete";var v8i="init";var k7V=v8i;k7V+=l8i;var Q7V=R8i;Q7V+=M9Q;var j0V=Q2c;j0V+=r8i;j0V+=J0Q;j0V+=d9Q;var u0V=c5Q;u0V+=p5Q;var w0V=P8i;w0V+=o8i;var G0V=v8i;G0V+=S5G;G0V+=X9Q;G0V+=b8i;var I0V=c7Q;I0V+=H7Q;I0V+=y5c;var S0V=z8i;S0V+=Y2c;var n0V=X5Q;n0V+=c5Q;n0V+=X9Q;n0V+=r0Q;var K0V=X5Q;K0V+=c5Q;K0V+=K7c;var X0V=R2c;X0V+=c5Q;X0V+=c5Q;X0V+=M9Q;var p0V=R2c;p0V+=c5Q;p0V+=I5Q;p0V+=w5Q;var z0V=R2c;z0V+=p8i;var b0V=X9Q;b0V+=c5Q;b0V+=w5Q;var c0V=X8i;c0V+=B2c;var M0V=p2c;M0V+=K8i;M0V+=n8i;var N0V=X5Q;N0V+=J0Q;N0V+=x4i;var H0V=S8i;H0V+=I8i;var V0V=R6c;V0V+=x8i;V0V+=j1G;V0V+=E6c;var C0V=g0Q;C0V+=B2G;C0V+=b4i;var h0V=G8i;h0V+=w8i;var T0V=p4c;T0V+=F8c;T0V+=c2c;T0V+=I5Q;var J0V=a8i;J0V+=u8i;J0V+=k3G;var i0V=a6c;i0V+=j8i;i0V+=t8i;i0V+=k3G;var D0V=d9Q;D0V+=s0G;var A0V=R2c;A0V+=c5Q;A0V+=I5Q;A0V+=w5Q;var f0V=R6c;f0V+=E6c;var m0V=R2c;m0V+=G5Q;m0V+=w5Q;var W0V=e8i;W0V+=h0Q;W0V+=L6i;W0V+=R6c;var g0V=j1G;g0V+=E6c;var q0V=Q6i;q0V+=I5Q;var U0V=Q3G;U0V+=g0Q;U0V+=k6i;var y0V=A6c;y0V+=M6c;var Y0V=R6c;Y0V+=N6c;Y0V+=E6c;var Z0V=j8G;Z0V+=d9Q;Z0V+=L7c;var k0V=X5Q;k0V+=c5Q;k0V+=X9Q;k0V+=r0Q;var Q0V=Z6i;Q0V+=e5Q;Q0V+=Y6i;var L0V=R6c;L0V+=E6c;var e5V=y6i;e5V+=U6i;var t5V=P7c;t5V+=h0Q;t5V+=T0Q;t5V+=s7c;var j5V=X9Q;j5V+=u8c;var u5V=H0Q;u5V+=q6i;var a5V=G4i;a5V+=h5p.W9Q;a5V+=p5Q;var w5V=w7Q;w5V+=g6i;w5V+=W6i;var G5V=m6i;G5V+=y7Q;var x5V=f6i;x5V+=A6i;x5V+=S2i;x5V+=O2i;var I5V=p4c;I5V+=M9Q;I5V+=w5Q;I5V+=r7Q;var S5V=D6i;S5V+=c5Q;S5V+=J0Q;S5V+=i6i;var n5V=p2c;n5V+=j6c;n5V+=J6i;var K5V=X9Q;K5V+=T6i;var X5V=E2i;X5V+=O2i;X5V+=h6i;X5V+=r7Q;var p5V=C6i;p5V+=V6i;var z5V=M9Q;z5V+=f3c;z5V+=d9Q;var b5V=H6i;b5V+=d9Q;b5V+=B2c;var o5V=c2c;o5V+=R2c;o5V+=h0Q;o5V+=P9Q;var P5V=J1c;P5V+=d9Q;P5V+=p5Q;P5V+=X9Q;init=$[P5V](w8c,{},Editor[o5V],init);this[D5Q]=$[Y1c](w8c,{},Editor[b5V][N6i],{table:init[M6i]||init[z5V],dbTable:init[p5V]||e1c,ajaxUrl:init[X5V],ajax:init[H1G],idSrc:init[c6i],dataSource:init[K5V]||init[x5c]?Editor[n5V][B6i]:Editor[S5V][I5V],formOptions:init[z1G],legacyAjax:init[x5V],template:init[G5V]?$(init[G5G])[o9c]():e1c});this[P3c]=$[Y1c](w8c,{},Editor[w5V]);this[a5V]=init[u5V];Editor[V0c][N6i][j5G]++;var that=this;var classes=this[P3c];this[j5V]={"wrapper":$(H3G+classes[t5V]+l1c+e5V+classes[j1c][E6i]+t1c+O6i+classes[L8G][B1c]+L0V+Q0V+classes[k0V][Z0V]+Y0V+y0V+F6i+classes[d6i][B1c]+l1c+U0V+classes[q0V][N7c]+b1c+a1c+g0V)[V3Q],"form":$(W0V+classes[m0V][s6i]+f0V+v6i+classes[A0V][N7c]+b1c+l6i)[V3Q],"formError":$(R6i+classes[B3G][D0V]+b1c)[V3Q],"formInfo":$(i0V+classes[B3G][n1c]+b1c)[V3Q],"header":$(J0V+classes[T0V][B1c]+h0V+classes[K6G][C0V]+V0V)[V3Q],"buttons":$(H0V+classes[B3G][N0V]+b1c)[V3Q]};if($[C8c][M0V][c0V]){var d0V=g0Q;d0V+=I5Q;d0V+=R6G;d0V+=d9Q;var F0V=H0Q;F0V+=U8c;F0V+=r6i;var O0V=t5Q;O0V+=P6i;var E0V=X9Q;E0V+=h0Q;E0V+=o6i;E0V+=l8c;var B0V=R2c;B0V+=p5Q;var ttButtons=$[B0V][E0V][b6i][O0V];var i18n=this[F0V];$[H3c]([d0V,g7G,y2i],function(i,val){var p6i='editor_';var z6i="uttonTe";var v0V=W2c;v0V+=n1G;v0V+=c5Q;v0V+=p5Q;var s0V=D5Q;s0V+=t5Q;s0V+=z6i;s0V+=z0Q;ttButtons[p6i+val][s0V]=i18n[val][v0V];});}$[H3c](init[X6i],function(evt,fn){var l0V=c5Q;l0V+=p5Q;that[l0V](evt,function(){var S6i="slic";var n6i="if";var K6i="pply";var o0V=h0Q;o0V+=K6i;var P0V=D5Q;P0V+=p4c;P0V+=n6i;P0V+=M9Q;var r0V=g0Q;r0V+=h0Q;r0V+=r7Q;r0V+=r7Q;var R0V=S6i;R0V+=d9Q;var args=Array[E3c][R0V][r0V](arguments);args[P0V]();fn[o0V](that,args);});});var dom=this[b0V];var wrapper=dom[B1c];dom[I6i]=_editor_el(z0V,dom[p0V])[V3Q];dom[d6i]=_editor_el(X0V,wrapper)[V3Q];dom[K0V]=_editor_el(n0V,wrapper)[V3Q];dom[x6i]=_editor_el(S0V,wrapper)[V3Q];dom[j1c]=_editor_el(I0V,wrapper)[V3Q];if(init[Z1G]){var x0V=w9Q;x0V+=X9Q;x0V+=D5Q;this[k9c](init[x0V]);}$(document)[B2G](G0V+this[D5Q][w0V],function(e,settings,json){var w6i="_edito";if(that[D5Q][x5c]&&settings[G6i]===$(that[D5Q][x5c])[B5c](V3Q)){var a0V=w6i;a0V+=I5Q;settings[a0V]=that;}})[u0V](a6i+this[D5Q][j0V],function(e,settings,json){var u6i="_optionsUpdate";var e0V=O0Q;e0V+=K4c;var t0V=j6c;t0V+=n8i;if(json&&that[D5Q][x5c]&&settings[G6i]===$(that[D5Q][t0V])[e0V](V3Q)){that[u6i](json);}});try{var L7V=X9Q;L7V+=j4c;L7V+=L5G;L7V+=E0c;this[D5Q][H0c]=Editor[G4c][init[L7V]][v8i](this);}catch(e){var j6i='Cannot find display controller ';throw j6i+init[G4c];}this[Q7V](k7V,[]);};Editor[E3c][Z7V]=function(){var Q1i="dCl";var L1i="class";var t6i="jo";var A7V=I5Q;A7V+=d9Q;A7V+=i2G;A7V+=d9Q;var W7V=g0Q;W7V+=I5Q;W7V+=d9Q;W7V+=k4c;var g7V=t6i;g7V+=P4c;var q7V=d9Q;q7V+=x3c;q7V+=M9Q;var U7V=b0G;U7V+=M1G;var y7V=h0Q;y7V+=e6i;y7V+=U0Q;var Y7V=L1i;Y7V+=b8c;var classesActions=this[Y7V][y7V];var action=this[D5Q][U7V];var wrapper=$(this[q3c][B1c]);wrapper[q9c]([classesActions[W5G],classesActions[q7V],classesActions[d5c]][g7V](E1c));if(action===W7V){var m7V=p2i;m7V+=Q1i;m7V+=y4c;wrapper[m7V](classesActions[W5G]);}else if(action===B1G){var f7V=k9c;f7V+=k1i;f7V+=h0Q;f7V+=z3c;wrapper[f7V](classesActions[B1G]);}else if(action===A7V){wrapper[r3c](classesActions[d5c]);}};Editor[D7V][Z1i]=function(data,success,error,submitParams){var p1i='?';var z1i="param";var b1i="dexOf";var o1i="deleteBody";var r1i="mplete";var R1i="ift";var l1i="comp";var v1i="complete";var s1i="url";var d1i="xOf";var F1i="inde";var O1i=/_id_/;var c1i="axUrl";var M1i=',';var N1i='idSrc';var H1i="ajaxUrl";var g1i="P";var y1i="LETE";var Y1i="DE";var j7V=h0Q;j7V+=S2i;j7V+=O2i;var x7V=Y1i;x7V+=y1i;var I7V=M9Q;I7V+=c9Q;var S7V=X9Q;S7V+=U1i;var z7V=X9Q;z7V+=C0Q;z7V+=h0Q;var b7V=q1i;b7V+=r7Q;var o7V=q1i;o7V+=r7Q;var M7V=h0Q;M7V+=S2i;M7V+=h0Q;M7V+=R9Q;var J7V=g1i;J7V+=h5G;J7V+=A0Q;J7V+=N0Q;var i7V=c7G;i7V+=B7G;i7V+=p5Q;var that=this;var action=this[D5Q][i7V];var thrown;var opts={type:J7V,dataType:d5G,data:e1c,error:[function(xhr,text,err){thrown=err;}],success:[],complete:[function(xhr,text){var V1i="tatu";var C1i="responseJSON";var h1i="onseJSON";var T1i="esp";var i1i="parseJS";var D1i='null';var A1i="responseText";var m1i="Objec";var W1i="isPlain";var e3Q=204;var H7V=e6G;H7V+=L5c;var V7V=W1i;V7V+=m1i;V7V+=M9Q;var T7V=v9c;T7V+=h0Q;T7V+=M9Q;T7V+=f1i;var json=e1c;if(xhr[T7V]===e3Q||xhr[A1i]===D1i){json={};}else{try{var C7V=i1i;C7V+=h5G;C7V+=J1i;var h7V=I5Q;h7V+=T1i;h7V+=h1i;json=xhr[h7V]?xhr[C1i]:$[C7V](xhr[A1i]);}catch(e){}}if($[V7V](json)||$[H7V](json)){var N7V=D5Q;N7V+=V1i;N7V+=D5Q;success(json,xhr[N7V]>=L9Q,xhr);}else{error(xhr,text,thrown);}}]};var a;var ajaxSrc=this[D5Q][M7V]||this[D5Q][H1i];var id=action===g7G||action===y2i?_pluck(this[D5Q][W1G],N1i):e1c;if($[H9G](id)){id=id[e7G](M1i);}if($[Q5c](ajaxSrc)&&ajaxSrc[action]){ajaxSrc=ajaxSrc[action];}if(typeof ajaxSrc===h5p.A9Q){var c7V=E2i;c7V+=c1i;var uri=e1c;var method=e1c;if(this[D5Q][c7V]){var url=this[D5Q][H1i];if(url[W5G]){uri=url[action];}if(uri[B1i](E1c)!==-H3Q){a=uri[E1i](E1c);method=a[V3Q];uri=a[H3Q];}uri=uri[W5c](O1i,id);}ajaxSrc(method,uri,data,success,error);return;}else if(typeof ajaxSrc===g5c){var B7V=F1i;B7V+=d1i;if(ajaxSrc[B7V](E1c)!==-H3Q){var F7V=J0Q;F7V+=I5Q;F7V+=r7Q;var O7V=M9Q;O7V+=c9Q;var E7V=D5Q;E7V+=T0Q;E7V+=r7Q;E7V+=f5Q;a=ajaxSrc[E7V](E1c);opts[O7V]=a[V3Q];opts[F7V]=a[H3Q];}else{opts[s1i]=ajaxSrc;}}else{var l7V=d9Q;l7V+=I5Q;l7V+=Q9c;var optsCopy=$[Y1c]({},ajaxSrc||{});if(optsCopy[v1i]){var v7V=l1i;v7V+=K8c;v7V+=y7Q;var s7V=J0Q;s7V+=p5Q;s7V+=V8i;s7V+=R1i;var d7V=N5c;d7V+=r1i;opts[d7V][s7V](optsCopy[v1i]);delete optsCopy[v7V];}if(optsCopy[l7V]){var P7V=A4c;P7V+=Q9c;var r7V=d9Q;r7V+=I5Q;r7V+=Q9c;var R7V=Q2c;R7V+=D5Q;R7V+=i1G;opts[g9c][R7V](optsCopy[r7V]);delete optsCopy[P7V];}opts=$[Y1c]({},opts,optsCopy);}opts[o7V]=opts[b7V][W5c](O1i,id);if(opts[z7V]){var n7V=J1c;n7V+=d9Q;n7V+=O7c;var K7V=X9Q;K7V+=h0Q;K7V+=M9Q;K7V+=h0Q;var X7V=P1i;X7V+=B2G;var p7V=p2c;p7V+=j6c;var isFn=typeof opts[p7V]===X7V;var newData=isFn?opts[i1c](data):opts[K7V];data=isFn&&newData?newData:$[n7V](w8c,data,newData);}opts[S7V]=data;if(opts[I7V]===x7V&&(opts[o1i]===undefined||opts[o1i]===w8c)){var u7V=X9Q;u7V+=h0Q;u7V+=M9Q;u7V+=h0Q;var a7V=H0Q;a7V+=p5Q;a7V+=b1i;var w7V=J0Q;w7V+=I5Q;w7V+=r7Q;var G7V=e6c;G7V+=h0Q;var params=$[z1i](opts[G7V]);opts[w7V]+=opts[s1i][a7V](p1i)===-H3Q?p1i+params:A5c+params;delete opts[u7V];}$[j7V](opts);};Editor[t7V][e7V]=function(target,style,time,callback){var X1i="stop";var L4O=R2c;L4O+=p5Q;if($[L4O][G5c]){target[X1i]()[G5c](style,time,callback);}else{var Q4O=g0Q;Q4O+=D5Q;Q4O+=D5Q;target[Q4O](style);if(typeof time===h5p.A9Q){time[J0c](target);}else if(callback){callback[J0c](target);}}};Editor[E3c][V5G]=function(){var S1i="formInfo";var n1i="onte";var K1i="bodyC";var Y4O=R2c;Y4O+=c5Q;Y4O+=I5Q;Y4O+=w5Q;var Z4O=K1i;Z4O+=n1i;Z4O+=L7c;var k4O=T0Q;k4O+=I5Q;k4O+=d9Q;k4O+=V4G;var dom=this[q3c];$(dom[B1c])[k4O](dom[K6G]);$(dom[d6i])[Y7c](dom[V0G])[Y7c](dom[Z7G]);$(dom[Z4O])[Y7c](dom[S1i])[Y7c](dom[Y4O]);};Editor[E3c][y4O]=function(){var t1i="_clo";var u1i="Opts";var w1i="nB";var G1i="_eve";var x1i="Blur";var I1i="bmi";var D4O=i2c;D4O+=J2c;var f4O=D7Q;f4O+=I1i;f4O+=M9Q;var m4O=R2c;m4O+=o5G;m4O+=l7Q;var W4O=Z0Q;W4O+=d9Q;W4O+=x1i;var g4O=G1i;g4O+=p5Q;g4O+=M9Q;var q4O=c5Q;q4O+=w1i;q4O+=r7Q;q4O+=q1i;var U4O=a1i;U4O+=M9Q;U4O+=u1i;var opts=this[D5Q][U4O];var onBlur=opts[q4O];if(this[g4O](W4O)===x8c){return;}if(typeof onBlur===m4O){onBlur(this);}else if(onBlur===f4O){var A4O=D7Q;A4O+=X5Q;A4O+=j1i;A4O+=M9Q;this[A4O]();}else if(onBlur===D4O){var i4O=t1i;i4O+=D5Q;i4O+=d9Q;this[i4O]();}};Editor[J4O][T4O]=function(){var c4O=d9Q;c4O+=s0G;var N4O=d9Q;N4O+=b0G;N4O+=p4c;var H4O=y2c;H4O+=w3c;var V4O=X9Q;V4O+=c5Q;V4O+=w5Q;var C4O=X9Q;C4O+=H0Q;C4O+=U7G;var h4O=K3G;h4O+=D5Q;h4O+=b8c;if(!this[D5Q]){return;}var errorClass=this[h4O][a9G][g9c];var fields=this[D5Q][Z1G];$(C4O+errorClass,this[V4O][B1c])[H4O](errorClass);$[N4O](fields,function(name,field){var M4O=T0G;M4O+=e1i;field[g9c](T8c)[M4O](T8c);});this[c4O](T8c)[E3G](T8c);};Editor[B4O][E4O]=function(submitComplete,mode){var Y3i="closeIc";var Z3i="closeCb";var k3i='preClose';var Q3i="oseIcb";var L3i="cus.editor-focus";var s4O=V9c;s4O+=L3i;var d4O=c5Q;d4O+=R2c;d4O+=R2c;var O4O=w7Q;O4O+=Q3i;if(this[i5G](k3i)===x8c){return;}if(this[D5Q][Z3i]){this[D5Q][Z3i](submitComplete,mode);this[D5Q][Z3i]=e1c;}if(this[D5Q][O4O]){var F4O=Y3i;F4O+=X5Q;this[D5Q][F4O]();this[D5Q][y3i]=e1c;}$(K3c)[d4O](s4O);this[D5Q][U3i]=x8c;this[i5G](q3i);};Editor[v4O][l4O]=function(fn){var g3i="eCb";var R4O=g0Q;R4O+=r7Q;R4O+=a7Q;R4O+=g3i;this[D5Q][R4O]=fn;};Editor[E3c][W0G]=function(arg1,arg2,arg3,arg4){var m3i="ole";var b4O=w5Q;b4O+=h0Q;b4O+=H0Q;b4O+=p5Q;var o4O=W3i;o4O+=X9Q;var r4O=X5Q;r4O+=c5Q;r4O+=m3i;r4O+=D7G;var that=this;var title;var buttons;var show;var opts;if($[Q5c](arg1)){opts=arg1;}else if(typeof arg1===r4O){show=arg1;opts=arg2;}else{title=arg1;buttons=arg2;show=arg3;opts=arg4;}if(show===undefined){show=w8c;}if(title){var P4O=Q0c;P4O+=f3i;that[P4O](title);}if(buttons){that[Z7G](buttons);}return{opts:$[o4O]({},this[D5Q][z1G][b4O],opts),maybeOpen:function(){if(show){that[z7G]();}}};};Editor[E3c][z4O]=function(name){var A3i="shi";var X4O=A3i;X4O+=R2c;X4O+=M9Q;var p4O=w5c;p4O+=D3i;var args=Array[E3c][p4O][J0c](arguments);args[X4O]();var fn=this[D5Q][i3i][name];if(fn){var K4O=C4G;K4O+=L5G;K4O+=r0Q;return fn[K4O](this,args);}};Editor[E3c][V1G]=function(includeFields){var O3i='displayOrder';var C3i="cludeFields";var h3i="includeFi";var T3i="mai";var J3i="childr";var q2O=h0Q;q2O+=g0Q;q2O+=Q0c;q2O+=B2G;var U2O=G4c;U2O+=f0Q;var u4O=d9Q;u4O+=h0Q;u4O+=g0Q;u4O+=p4c;var a4O=J3i;a4O+=I4c;var x4O=T3i;x4O+=p5Q;var I4O=w5Q;I4O+=c5Q;I4O+=X9Q;I4O+=d9Q;var S4O=p7Q;S4O+=l9Q;var n4O=B3G;n4O+=V9Q;n4O+=B2G;n4O+=b4i;var that=this;var formContent=$(this[q3c][n4O]);var fields=this[D5Q][S4O];var order=this[D5Q][J1G];var template=this[D5Q][G5G];var mode=this[D5Q][I4O]||x4O;if(includeFields){var G4O=h3i;G4O+=g5G;this[D5Q][G4O]=includeFields;}else{var w4O=P4c;w4O+=C3i;includeFields=this[D5Q][w4O];}formContent[a4O]()[o9c]();$[u4O](order,function(i,fieldOrName){var B3i='[data-editor-template="';var c3i='editor-field[name="';var N3i="fter";var H3i="kInArra";var V3i="_wea";var t4O=V3i;t4O+=H3i;t4O+=r0Q;var j4O=p5Q;j4O+=h0Q;j4O+=w5Q;j4O+=d9Q;var name=fieldOrName instanceof Editor[y1c]?fieldOrName[j4O]():fieldOrName;if(that[t4O](name,includeFields)!==-H3Q){var e4O=w5Q;e4O+=h0Q;e4O+=P4c;if(template&&mode===e4O){var y2O=p5Q;y2O+=g6c;y2O+=d9Q;var Y2O=h0Q;Y2O+=T0Q;Y2O+=z7Q;Y2O+=O7c;var Z2O=p5Q;Z2O+=c5Q;Z2O+=X9Q;Z2O+=d9Q;var k2O=h0Q;k2O+=N3i;var Q2O=R6c;Q2O+=M3i;var L2O=R2c;L2O+=P4c;L2O+=X9Q;template[L2O](c3i+name+Q2O)[k2O](fields[name][Z2O]());template[Y7G](B3i+name+O8c)[Y2O](fields[name][y2O]());}else{formContent[Y7c](fields[name][N5G]());}}});if(template&&mode===E3i){template[M3G](formContent);}this[i5G](O3i,[this[D5Q][U2O],this[D5Q][q2O],formContent]);};Editor[E3c][g2O]=function(items,editFields,type,formOptions,setupDone){var z3i='initEdit';var v3i="_actionClass";var s3i="itFiel";var d3i="lice";var v2O=X9Q;v2O+=h0Q;v2O+=M9Q;v2O+=h0Q;var s2O=p5Q;s2O+=g6c;s2O+=d9Q;var O2O=F3i;O2O+=p4c;var E2O=D5Q;E2O+=d3i;var h2O=V2c;h2O+=X9Q;h2O+=d9Q;var T2O=x4c;T2O+=W0c;var J2O=x3c;J2O+=Z5c;var i2O=R2c;i2O+=c5Q;i2O+=I5Q;i2O+=w5Q;var D2O=d9Q;D2O+=X9Q;D2O+=H0Q;D2O+=M9Q;var A2O=Q5G;A2O+=p5Q;var f2O=f0Q;f2O+=f5Q;f2O+=N8i;var m2O=f0Q;m2O+=s3i;m2O+=z4c;var W2O=R2c;W2O+=v9Q;W2O+=q5Q;W2O+=D5Q;var that=this;var fields=this[D5Q][W2O];var usedFields=[];var includeInOrder;var editData={};this[D5Q][m2O]=editFields;this[D5Q][f2O]=editData;this[D5Q][m5G]=items;this[D5Q][A2O]=D2O;this[q3c][i2O][Q8G][J2O]=T2O;this[D5Q][h2O]=type;this[v3i]();$[H3c](fields,function(name,field){field[m1G]();includeInOrder=x8c;editData[name]={};$[H3c](editFields,function(idSrc,edit){var P3i="displayF";var r3i="ayFields";var l3i="Fr";if(edit[Z1G][name]){var H2O=D5Q;H2O+=g0Q;H2O+=Q1c;H2O+=d9Q;var V2O=j4c;V2O+=f7Q;var C2O=T3c;C2O+=l3i;C2O+=u8c;C2O+=N8i;var val=field[C2O](edit[i1c]);editData[name][idSrc]=val===e1c?T8c:$[V2O](val)?val[O3c]():val;if(!formOptions||formOptions[H2O]===c0c){var N2O=R3i;N2O+=r3i;field[f1G](idSrc,val!==undefined?val:field[k1c]());if(!edit[N2O]||edit[n0G][name]){includeInOrder=w8c;}}else{var M2O=P3i;M2O+=H0Q;M2O+=s2c;M2O+=D5Q;if(!edit[n0G]||edit[M2O][name]){var B2O=X9Q;B2O+=d9Q;B2O+=R2c;var c2O=w5Q;c2O+=e5c;c2O+=o3i;field[c2O](idSrc,val!==undefined?val:field[B2O]());includeInOrder=w8c;}}}});if(field[J9c]()[I8c]!==V3Q&&includeInOrder){usedFields[X8c](name);}});var currOrder=this[J1G]()[E2O]();for(var i=currOrder[O2O]-H3Q;i>=V3Q;i--){var F2O=e9c;F2O+=L5c;if($[F2O](currOrder[i][b3i](),usedFields)===-H3Q){var d2O=d9c;d2O+=a8c;d2O+=D3i;currOrder[d2O](i,H3Q);}}this[V1G](currOrder);this[i5G](z3i,[_pluck(editFields,s2O)[V3Q],_pluck(editFields,v2O)[V3Q],items,type],function(){var p3i="initMulti";var R2O=p3i;R2O+=Z7Q;R2O+=x3c;R2O+=M9Q;var l2O=n7Q;l2O+=R2i;l2O+=M9Q;that[l2O](R2O,[editFields,items,type],function(){setupDone();});});};Editor[E3c][i5G]=function(trigger,args,promiseComplete){var e3i="resu";var t3i="result";var j3i="sult";var u3i="ggerHandle";var a3i="Ev";var w3i="lle";var G3i="nce";var x3i="Ca";var S3i="Event";var n3i="Of";var X3i="sul";if(!args){args=[];}if($[H9G](trigger)){var r2O=K8c;r2O+=p5Q;r2O+=Z0c;for(var i=V3Q,ien=trigger[r2O];i<ien;i++){this[i5G](trigger[i],args);}}else{var b2O=I5Q;b2O+=d9Q;b2O+=X3i;b2O+=M9Q;var o2O=T0Q;o2O+=I5Q;o2O+=d9Q;var P2O=K3i;P2O+=B9G;P2O+=n3i;var e=$[S3i](trigger);$(this)[I3i](e,args);if(trigger[P2O](o2O)===V3Q&&e[b2O]===x8c){var X2O=x3i;X2O+=G3i;X2O+=w3i;X2O+=X9Q;var p2O=a3i;p2O+=d9Q;p2O+=p5Q;p2O+=M9Q;var z2O=d9G;z2O+=H0Q;z2O+=u3i;z2O+=I5Q;$(this)[z2O]($[p2O](trigger+X2O),args);}if(promiseComplete){var K2O=y2c;K2O+=j3i;if(e[K2O]&&typeof e[t3i]===h5p.T9Q&&e[t3i][n5G]){var S2O=D9c;S2O+=d9Q;S2O+=p5Q;var n2O=e3i;n2O+=Y0c;e[n2O][S2O](promiseComplete);}else{promiseComplete();}}return e[t3i];}};Editor[E3c][b7G]=function(input){var Z9i="toLowerCase";var Q9i="subs";var L9i=/^on([A-Z])/;var x2O=I3G;x2O+=Z0c;var I2O=d8i;I2O+=H0Q;I2O+=M9Q;var name;var names=input[I2O](E1c);for(var i=V3Q,ien=names[x2O];i<ien;i++){var G2O=w5Q;G2O+=h0Q;G2O+=M9Q;G2O+=d8c;name=names[i];var onStyle=name[G2O](L9i);if(onStyle){var w2O=Q9i;w2O+=k9i;w2O+=m0Q;name=onStyle[H3Q][Z9i]()+name[w2O](M3Q);}names[i]=name;}return names[e7G](E1c);};Editor[a2O][Y9i]=function(node){var u2O=d9Q;u2O+=h0Q;u2O+=d8c;var foundField=e1c;$[u2O](this[D5Q][Z1G],function(name,field){var j2O=p5Q;j2O+=c5Q;j2O+=X9Q;j2O+=d9Q;if($(field[j2O]())[Y7G](node)[I8c]){foundField=field;}});return foundField;};Editor[t2O][e2O]=function(fieldNames){var y9i="ields";if(fieldNames===undefined){var L8O=R2c;L8O+=y9i;return this[L8O]();}else if(!$[H9G](fieldNames)){return[fieldNames];}return fieldNames;};Editor[E3c][b3G]=function(fieldsIn,focus){var m9i=/^jq:/;var W9i=".DTE ";var q9i='jq:';var Q8O=w5Q;Q8O+=h0Q;Q8O+=T0Q;var that=this;var field;var fields=$[Q8O](fieldsIn,function(fieldOrName){var k8O=w9Q;k8O+=z4c;return typeof fieldOrName===g5c?that[D5Q][k8O][fieldOrName]:fieldOrName;});if(typeof focus===U9i){field=fields[focus];}else if(focus){if(focus[B1i](q9i)===V3Q){var Z8O=g9i;Z8O+=W9i;field=$(Z8O+focus[W5c](m9i,T8c));}else{var Y8O=R2c;Y8O+=H0Q;Y8O+=d9Q;Y8O+=l9Q;field=this[D5Q][Y8O][focus];}}this[D5Q][f9i]=field;if(field){field[C9c]();}};Editor[y8O][V4i]=function(opts){var x9i="canReturnSubmit";var b9i='blur';var o9i="nBackgr";var P9i="blurOnBackground";var r9i="submitOnReturn";var R9i="urn";var l9i="onRe";var v9i='submit';var s9i="onBl";var d9i="tOnBlur";var F9i="closeOnComplete";var E9i=".dteIn";var c9i="closeOnC";var M9i="OnBlur";var H9i="bmitOnRetu";var C9i="editO";var h9i="tl";var T9i="func";var J9i="oolea";var i9i="yu";var D9i="cb";var A9i="closeI";var j8O=A9i;j8O+=D9i;var v8O=z2c;v8O+=d9Q;v8O+=i9i;v8O+=T0Q;var O8O=c5Q;O8O+=p5Q;var B8O=X5Q;B8O+=J9i;B8O+=p5Q;var M8O=D5Q;M8O+=M9Q;M8O+=I5Q;M8O+=y5c;var N8O=T9i;N8O+=M9Q;N8O+=H0Q;N8O+=B2G;var H8O=Q0c;H8O+=h9i;H8O+=d9Q;var V8O=S1G;V8O+=r7Q;V8O+=d9Q;var C8O=C9i;C8O+=T0Q;C8O+=V9i;var A8O=D7Q;A8O+=H9i;A8O+=N9i;var g8O=b5c;g8O+=M9i;var q8O=c9i;q8O+=u8c;q8O+=B9i;var U8O=E9i;U8O+=U2i;var that=this;var inlineCount=__inlineCounter++;var namespace=U8O+inlineCount;if(opts[q8O]!==undefined){opts[O9i]=opts[F9i]?q3i:n3c;}if(opts[g8O]!==undefined){var f8O=g0Q;f8O+=L5Q;f8O+=d9Q;var m8O=d4c;m8O+=H0Q;m8O+=d9i;var W8O=s9i;W8O+=q1i;opts[W8O]=opts[m8O]?v9i:f8O;}if(opts[A8O]!==undefined){var J8O=p5Q;J8O+=c5Q;J8O+=l0Q;var i8O=D7Q;i8O+=X5Q;i8O+=c8i;var D8O=l9i;D8O+=M9Q;D8O+=R9i;opts[D8O]=opts[r9i]?i8O:J8O;}if(opts[P9i]!==undefined){var h8O=p5Q;h8O+=c5Q;h8O+=p5Q;h8O+=d9Q;var T8O=c5Q;T8O+=o9i;T8O+=N8G;opts[T8O]=opts[P9i]?b9i:h8O;}this[D5Q][C8O]=opts;this[D5Q][z9i]=inlineCount;if(typeof opts[V8O]===g5c||typeof opts[H8O]===N8O){this[X1c](opts[X1c]);opts[X1c]=w8c;}if(typeof opts[E3G]===M8O||typeof opts[E3G]===h5p.A9Q){var c8O=w5Q;c8O+=t4i;this[E3G](opts[E3G]);opts[c8O]=w8c;}if(typeof opts[Z7G]!==B8O){var E8O=W2c;E8O+=N9G;E8O+=D5Q;this[E8O](opts[Z7G]);opts[Z7G]=w8c;}$(document)[O8O](p9i+namespace,function(e){var I9i="nc";var n9i="yCod";var d8O=x3c;d8O+=D5Q;d8O+=n2G;d8O+=X9i;var F8O=K9i;F8O+=n9i;F8O+=d9Q;if(e[F8O]===l3Q&&that[D5Q][d8O]){var el=$(document[S9i]);if(el){var s8O=d3c;s8O+=I9i;s8O+=M9Q;s8O+=l7Q;var field=that[Y9i](el);if(field&&typeof field[x9i]===s8O&&field[x9i](el)){e[o9G]();}}}});$(document)[B2G](v8O+namespace,function(e){var f5i="next";var W5i="ocus";var g5i="onEsc";var q5i="tDefault";var U5i="pre";var y5i="onReturn";var Z5i="Def";var k5i="prev";var Q5i="preventDefaul";var L5i="tur";var e9i="onRetu";var t9i="ReturnS";var j9i="can";var u9i="fun";var a9i="ctiveElement";var w9i="paren";var G9i=".DT";var w3Q=39;var G3Q=37;var x8O=A9c;x8O+=D9c;var I8O=G9i;I8O+=K5Q;var S8O=w9i;S8O+=V9i;var l8O=h0Q;l8O+=a9i;var el=$(document[l8O]);if(e[r9G]===l3Q&&that[D5Q][U3i]){var r8O=u9i;r8O+=e6i;r8O+=B2G;var R8O=j9i;R8O+=t9i;R8O+=u3G;R8O+=c8i;var field=that[Y9i](el);if(field&&typeof field[R8O]===r8O&&field[x9i](el)){var b8O=e9i;b8O+=N9i;var P8O=l9i;P8O+=L5i;P8O+=p5Q;if(opts[P8O]===v9i){var o8O=Q5i;o8O+=M9Q;e[o8O]();that[b5c]();}else if(typeof opts[b8O]===h5p.A9Q){var z8O=k5i;z8O+=Y2c;z8O+=Z5i;z8O+=Y5i;e[z8O]();opts[y5i](that,e);}}}else if(e[r9G]===X3Q){var n8O=D5Q;n8O+=u3G;n8O+=w5Q;n8O+=f5Q;var X8O=X5Q;X8O+=r7Q;X8O+=J0Q;X8O+=I5Q;var p8O=U5i;p8O+=R2i;p8O+=q5i;e[p8O]();if(typeof opts[g5i]===h5p.A9Q){opts[g5i](that,e);}else if(opts[g5i]===X8O){var K8O=X5Q;K8O+=r7Q;K8O+=q1i;that[K8O]();}else if(opts[g5i]===q3i){that[U7c]();}else if(opts[g5i]===n8O){that[b5c]();}}else if(el[S8O](I8O)[x8O]){if(e[r9G]===G3Q){var w8O=R2c;w8O+=W5i;var G8O=X5Q;G8O+=J0Q;G8O+=N9G;el[k5i](G8O)[w8O]();}else if(e[r9G]===w3Q){var u8O=K1G;u8O+=D5Q;var a8O=m5i;a8O+=B7Q;a8O+=p5Q;el[f5i](a8O)[u8O]();}}});this[D5Q][j8O]=function(){var D5i="wn";var A5i="keydo";var Q6O=z2c;Q6O+=d9Q;Q6O+=r0Q;Q6O+=g4c;var L6O=c5Q;L6O+=R2c;L6O+=R2c;var e8O=A5i;e8O+=D5i;var t8O=c5Q;t8O+=R2c;t8O+=R2c;$(document)[t8O](e8O+namespace);$(document)[L6O](Q6O+namespace);};return namespace;};Editor[E3c][k6O]=function(direction,action,data){var J5i='send';var i5i="legacyAja";var Z6O=i5i;Z6O+=R9Q;if(!this[D5Q][Z6O]||!data){return;}if(direction===J5i){var Y6O=a1i;Y6O+=M9Q;if(action===k2i||action===Y6O){var U6O=X9Q;U6O+=h0Q;U6O+=j6c;var y6O=d9Q;y6O+=b0G;y6O+=p4c;var id;$[y6O](data[U6O],function(rowId,values){var T5i='Editor: Multi-row editing is not supported by the legacy Ajax data format';if(id!==undefined){throw T5i;}id=rowId;});data[i1c]=data[i1c][id];if(action===g7G){data[f1c]=id;}}else{var q6O=p2c;q6O+=j6c;data[f1c]=$[y0G](data[i1c],function(values,id){return id;});delete data[q6O];}}else{var W6O=I5Q;W6O+=c5Q;W6O+=h7c;var g6O=X9Q;g6O+=U1i;if(!data[g6O]&&data[W6O]){data[i1c]=[data[x6G]];}else if(!data[i1c]){data[i1c]=[];}}};Editor[E3c][m6O]=function(json){var that=this;if(json[h5i]){var f6O=B9Q;f6O+=d9Q;f6O+=q5Q;f6O+=D5Q;$[H3c](this[D5Q][f6O],function(name,field){var V5i="pd";var C5i="upd";if(json[h5i][name]!==undefined){var D6O=C5i;D6O+=k4c;var A6O=B9Q;A6O+=P9c;A6O+=X9Q;var fieldInst=that[A6O](name);if(fieldInst&&fieldInst[D6O]){var J6O=Q1c;J6O+=C2c;var i6O=J0Q;i6O+=V5i;i6O+=C0Q;i6O+=d9Q;fieldInst[i6O](json[J6O][name]);}}});}};Editor[E3c][T6O]=function(el,msg){var N5i="fadeO";var H5i="nimat";var V6O=R2c;V6O+=o5G;V6O+=l7Q;var C6O=h0Q;C6O+=H5i;C6O+=d9Q;var h6O=R2c;h6O+=p5Q;var canAnimate=$[h6O][C6O]?w8c:x8c;if(typeof msg===V6O){msg=msg(this,new DataTable[I5c](this[D5Q][x5c]));}el=$(el);if(canAnimate){var H6O=v9c;H6O+=Q1c;el[H6O]();}if(!msg){if(this[D5Q][U3i]&&canAnimate){var N6O=N5i;N6O+=U2c;el[N6O](function(){var M6O=E8G;M6O+=w5Q;M6O+=r7Q;el[M6O](T8c);});}else{el[n5c](T8c)[Z3c](Y3c,n3c);}}else{var c6O=R3i;c6O+=h0Q;c6O+=X9i;if(this[D5Q][c6O]&&canAnimate){var B6O=R2c;B6O+=p2i;B6O+=d9Q;B6O+=M5i;el[n5c](msg)[B6O]();}else{var O6O=u5c;O6O+=D5Q;var E6O=p4c;E6O+=M9Q;E6O+=j5c;el[E6O](msg)[O6O](Y3c,U5c);}}};Editor[F6O][d6O]=function(){var E5i="multiInfoShown";var B5i="udeFie";var c5i="incl";var l6O=r7Q;l6O+=d9Q;l6O+=x3G;l6O+=p4c;var v6O=c5i;v6O+=B5i;v6O+=l9Q;var s6O=B9Q;s6O+=P9c;s6O+=X9Q;s6O+=D5Q;var fields=this[D5Q][s6O];var include=this[D5Q][v6O];var show=w8c;var state;if(!include){return;}for(var i=V3Q,ien=include[l6O];i<ien;i++){var field=fields[include[i]];var multiEditable=field[l5c]();if(field[E9c]()&&multiEditable&&show){state=w8c;show=x8c;}else if(field[E9c]()&&!multiEditable){state=w8c;}else{state=x8c;}fields[include[i]][E5i](state);}};Editor[R6O][r6O]=function(type){var b5i='focus.editor-focus';var P5i="tureFocus";var r5i="cap";var R5i="internal";var l5i="itor-";var v5i="submit.ed";var s5i="ternal";var d5i="ditor-in";var F5i="ubmit.e";var O5i="_multiI";var w6O=Q5G;w6O+=p5Q;var G6O=c5Q;G6O+=r9c;var x6O=O5i;x6O+=M5Q;x6O+=c5Q;var p6O=D5Q;p6O+=F5i;p6O+=d5i;p6O+=s5i;var z6O=c5Q;z6O+=p5Q;var b6O=v5i;b6O+=l5i;b6O+=R5i;var o6O=c5Q;o6O+=R2c;o6O+=R2c;var P6O=r5i;P6O+=P5i;var that=this;var focusCapture=this[D5Q][H0c][P6O];if(focusCapture===undefined){focusCapture=w8c;}$(this[q3c][B3G])[o6O](b6O)[z6O](p6O,function(e){var o5i="preventDef";var X6O=o5i;X6O+=Y5i;e[X6O]();});if(focusCapture&&(type===E3i||type===i3G)){var K6O=X5Q;K6O+=c5Q;K6O+=X9Q;K6O+=r0Q;$(K6O)[B2G](b5i,function(){var p5i='.DTE';var z5i="activeElem";var I6O=A9c;I6O+=D9c;var S6O=S5G;S6O+=o5Q;S6O+=F5Q;var n6O=z5i;n6O+=Y2c;if($(document[S9i])[C7G](p5i)[I8c]===V3Q&&$(document[n6O])[C7G](S6O)[I6O]===V3Q){if(that[D5Q][f9i]){that[D5Q][f9i][C9c]();}}});}this[x6O]();this[i5G](G6O,[type,this[D5Q][w6O]]);return w8c;};Editor[E3c][X5i]=function(type){var x5i="mode";var I5i='cancelOpen';var S5i="acti";var n5i="seIcb";var K5i="eOpen";var u6O=h0Q;u6O+=V2i;u6O+=l7Q;var a6O=Z0Q;a6O+=K5i;if(this[i5G](a6O,[type,this[D5Q][u6O]])===x8c){var e6O=i2c;e6O+=n5i;var t6O=P4c;t6O+=a8c;t6O+=l0Q;var j6O=S5i;j6O+=B2G;this[r3G]();this[i5G](I5i,[type,this[D5Q][j6O]]);if((this[D5Q][x5i]===t6O||this[D5Q][x5i]===i3G)&&this[D5Q][y3i]){this[D5Q][y3i]();}this[D5Q][e6O]=e1c;return x8c;}this[D5Q][U3i]=type;return w8c;};Editor[E3c][F4i]=function(processing){var e5i='processing';var t5i='div.DTE';var j5i="sin";var u5i="proce";var a5i="ctive";var w5i="ssing";var G5i="ev";var Y1O=A7Q;Y1O+=G5i;Y1O+=d9Q;Y1O+=L7c;var Z1O=c7Q;Z1O+=g0Q;Z1O+=d9Q;Z1O+=w5i;var k1O=X9Q;k1O+=c5Q;k1O+=w5Q;var Q1O=h0Q;Q1O+=a5i;var L1O=u5i;L1O+=D5Q;L1O+=j5i;L1O+=O0Q;var procClass=this[P3c][L1O][Q1O];$([t5i,this[k1O][B1c]])[D0c](procClass,processing);this[D5Q][Z1O]=processing;this[Y1O](e5i,[processing]);};Editor[E3c][L0i]=function(successCallback,errorCallback,formatdata,hide){var s0i="_proces";var d0i="mplet";var F0i="bmitCo";var E0i='all';var f0i="nged";var m0i="lIfCha";var W0i="dbTable";var g0i="editData";var q0i="oAp";var U0i="ataSource";var y0i="editF";var Z0i="preSu";var k0i="_aja";var Q0i="_submitTabl";var o1O=Q0i;o1O+=d9Q;var P1O=k0i;P1O+=R9Q;var r1O=H1G;r1O+=S0Q;r1O+=I5Q;r1O+=r7Q;var R1O=Z0i;R1O+=V9G;var l1O=n7Q;l1O+=c5G;l1O+=p5Q;l1O+=M9Q;var v1O=J1c;v1O+=I4c;v1O+=X9Q;var s1O=D5Q;s1O+=d9Q;s1O+=p5Q;s1O+=X9Q;var F1O=Y0i;F1O+=c5G;var g1O=y0i;g1O+=l2c;g1O+=z4c;var q1O=p7Q;q1O+=l9Q;var U1O=X9Q;U1O+=U0i;var y1O=q0i;y1O+=H0Q;var that=this;var i,iLen,eventRet,errorNodes;var changed=x8c,allData={},changedData={};var setBuilder=DataTable[J1c][y1O][c1c];var dataSource=this[D5Q][U1O];var fields=this[D5Q][q1O];var editCount=this[D5Q][z9i];var modifier=this[D5Q][m5G];var editFields=this[D5Q][g1O];var editData=this[D5Q][g0i];var opts=this[D5Q][w7G];var changedSubmit=opts[b5c];var submitParamsLocal;var action=this[D5Q][X6G];var submitParams={"action":action,"data":{}};if(this[D5Q][W0i]){var W1O=M9Q;W1O+=H2i;W1O+=r7Q;W1O+=d9Q;submitParams[W1O]=this[D5Q][W0i];}if(action===W5G||action===B1G){var V1O=P9G;V1O+=m0i;V1O+=f0i;var m1O=d9Q;m1O+=b0G;m1O+=p4c;$[m1O](editFields,function(idSrc,edit){var A0i="isEm";var C1O=A0i;C1O+=D0i;C1O+=i0i;var f1O=d9Q;f1O+=b0G;f1O+=p4c;var allRowData={};var changedRowData={};$[f1O](fields,function(name,field){var c0i="compare";var M0i='-many-count';var N0i=/\[.*$/;var H0i='[]';var V0i="omData";var C0i="lFr";var T0i="exO";var J0i="submi";var A1O=J0i;A1O+=M9Q;A1O+=P6G;A1O+=K8c;if(edit[Z1G][name]&&field[A1O]()){var J1O=H0Q;J1O+=O7c;J1O+=T0i;J1O+=R2c;var i1O=e6G;i1O+=h0i;i1O+=E0c;var multiGet=field[s7G]();var builder=setBuilder(name);if(multiGet[idSrc]===undefined){var D1O=b5G;D1O+=C0i;D1O+=V0i;var originalVal=field[D1O](edit[i1c]);builder(allRowData,originalVal);return;}var value=multiGet[idSrc];var manyBuilder=$[i1O](value)&&name[J1O](H0i)!==-H3Q?setBuilder(name[W5c](N0i,T8c)+M0i):e1c;builder(allRowData,value);if(manyBuilder){var T1O=A9c;T1O+=D9c;manyBuilder(allRowData,value[T1O]);}if(action===g7G&&(!editData[name]||!field[c0i](value,editData[name][idSrc]))){builder(changedRowData,value);changed=w8c;if(manyBuilder){var h1O=r7Q;h1O+=S3G;h1O+=D9c;manyBuilder(changedRowData,value[h1O]);}}}});if(!$[B0i](allRowData)){allData[idSrc]=allRowData;}if(!$[C1O](changedRowData)){changedData[idSrc]=changedRowData;}});if(action===k2i||changedSubmit===E0i||changedSubmit===V1O&&changed){var H1O=X9Q;H1O+=U1i;submitParams[H1O]=allData;}else if(changedSubmit===O0i&&changed){var N1O=p2c;N1O+=j6c;submitParams[N1O]=changedData;}else{var O1O=D7Q;O1O+=F0i;O1O+=d0i;O1O+=d9Q;var E1O=B8i;E1O+=d9Q;E1O+=L7c;var B1O=s0i;B1O+=O4i;var M1O=w7Q;M1O+=N1G;this[D5Q][X6G]=e1c;if(opts[O9i]===M1O&&(hide===undefined||hide)){this[o3G](x8c);}else if(typeof opts[O9i]===h5p.A9Q){opts[O9i](this);}if(successCallback){var c1O=u7G;c1O+=r7Q;successCallback[c1O](this);}this[B1O](x8c);this[E1O](O1O);return;}}else if(action===F1O){$[H3c](editFields,function(idSrc,edit){var d1O=X9Q;d1O+=h0Q;d1O+=M9Q;d1O+=h0Q;submitParams[d1O][idSrc]=edit[i1c];});}this[v0i](s1O,action,submitParams);submitParamsLocal=$[v1O](w8c,{},submitParams);if(formatdata){formatdata(submitParams);}if(this[l1O](R1O,[submitParams,action])===x8c){this[F4i](x8c);return;}var submitWire=this[D5Q][H1G]||this[D5Q][r1O]?this[P1O]:this[o1O];submitWire[J0c](this,submitParams,function(json,notGood,xhr){var l0i="_submitSuccess";var b1O=h0Q;b1O+=g0Q;b1O+=M9Q;b1O+=l7Q;that[l0i](json,notGood,submitParams,submitParamsLocal,that[D5Q][b1O],editCount,hide,successCallback,errorCallback,xhr);},function(xhr,err,thrown){var r0i="mitE";var R0i="_sub";var p1O=h0Q;p1O+=e6i;p1O+=B2G;var z1O=R0i;z1O+=r0i;z1O+=s0G;that[z1O](xhr,err,thrown,errorCallback,submitParams,that[D5Q][p1O]);},submitParams);};Editor[E3c][P0i]=function(data,success,error,submitParams){var X0i="taS";var p0i="difie";var z0i="ifier";var o0i="_fnSet";var K1O=o0i;K1O+=i0i;K1O+=N8i;K1O+=I3c;var X1O=d9Q;X1O+=R9Q;X1O+=M9Q;var that=this;var action=data[X6G];var out={data:[]};var idGet=DataTable[J1c][T1c][b0i](this[D5Q][c6i]);var idSet=DataTable[X1O][T1c][K1O](this[D5Q][c6i]);if(action!==y2i){var G1O=H6i;G1O+=z0i;var x1O=w5Q;x1O+=c5Q;x1O+=p0i;x1O+=I5Q;var I1O=R2c;I1O+=l2c;I1O+=X9Q;I1O+=D5Q;var S1O=A7Q;S1O+=p2c;S1O+=X0i;S1O+=g4i;var n1O=w5Q;n1O+=c5Q;n1O+=X9Q;n1O+=d9Q;var originalData=this[D5Q][n1O]===E3i?this[S1O](I1O,this[x1O]()):this[q1G](p1G,this[G1O]());$[H3c](data[i1c],function(key,vals){var S0i="_fnExtend";var n0i="dataTableExt";var K0i="ush";var a1O=T0Q;a1O+=K0i;var w1O=c5Q;w1O+=h5c;w1O+=T0Q;w1O+=H0Q;var toSave;var extender=$[C8c][n0i][w1O][S0i];if(action===g7G){var rowData=originalData[key][i1c];toSave=extender({},rowData,w8c);toSave=extender(toSave,vals,w8c);}else{toSave=extender({},vals,w8c);}var overrideId=idGet(toSave);if(action===k2i&&overrideId===undefined){idSet(toSave,+new Date()+T8c+key);}else{idSet(toSave,overrideId);}out[i1c][a1O](toSave);});}success(out);};Editor[E3c][u1O]=function(json,notGood,submitParams,submitParamsLocal,action,editCount,hide,successCallback,errorCallback,xhr){var R7i="nC";var l7i='commit';var v7i="ids";var s7i="Source";var F7i="preRe";var E7i="tRemove";var B7i="pos";var c7i="eE";var M7i="vent";var N7i="stEd";var H7i='preCreate';var C7i="postC";var h7i="setD";var T7i="aSourc";var i7i="ount";var A7i="itSucc";var e0i="br>";var t0i="ssful";var j0i="ucce";var u0i="Uns";var w0i='receive';var G0i="modi";var x0i="dErrors";var Y9O=n7Q;Y9O+=B6c;Y9O+=Y2c;var Z9O=I0i;Z9O+=E4i;Z9O+=O4i;var L3O=R2c;L3O+=l2c;L3O+=x0i;var e1O=A4c;e1O+=I5Q;e1O+=c5Q;e1O+=I5Q;var t1O=A4c;t1O+=Q9c;var j1O=G0i;j1O+=d7G;var that=this;var setData;var fields=this[D5Q][Z1G];var opts=this[D5Q][w7G];var modifier=this[D5Q][j1O];this[v0i](w0i,action,json);this[i5G](a0i,[json,submitParams,action,xhr]);if(!json[t1O]){json[g9c]=h5p.f9Q;}if(!json[T8i]){json[T8i]=[];}if(notGood||json[e1O]||json[L3O][I8c]){var V3O=b5c;V3O+=u0i;V3O+=j0i;V3O+=t0i;var C3O=B8i;C3O+=Y2c;var h3O=z6c;h3O+=e0i;var T3O=S2i;T3O+=c5Q;T3O+=H0Q;T3O+=p5Q;var J3O=d9Q;J3O+=I5Q;J3O+=D4c;J3O+=I5Q;var Q3O=d9Q;Q3O+=I5Q;Q3O+=D4c;Q3O+=I5Q;var globalError=[];if(json[Q3O]){var Z3O=d9Q;Z3O+=h0i;Z3O+=c5Q;Z3O+=I5Q;var k3O=T0Q;k3O+=J0Q;k3O+=V8i;globalError[k3O](json[Z3O]);}$[H3c](json[T8i],function(i,err){var m7i="pus";var W7i=":";var g7i="position";var q7i="Con";var U7i="onFieldError";var y7i="ocu";var Y7i="Error";var Z7i="tus";var k7i="sta";var Q7i=" field: ";var L7i="Unknown";var Y3O=p5Q;Y3O+=h0Q;Y3O+=x9Q;var field=fields[err[Y3O]];if(!field){var y3O=L7i;y3O+=Q7i;throw new Error(y3O+err[m1c]);}else if(field[U3i]()){var q3O=k7i;q3O+=Z7i;var U3O=R5G;U3O+=I5Q;field[U3O](err[q3O]||Y7i);if(i===V3Q){var g3O=R2c;g3O+=y7i;g3O+=D5Q;if(opts[U7i]===g3O){var m3O=L8G;m3O+=q7i;m3O+=b4i;var W3O=y9c;W3O+=w5Q;that[e7c]($(that[W3O][m3O],that[D5Q][B1c]),{scrollTop:$(field[N5G]())[g7i]()[n8G]},Q9Q);field[C9c]();}else if(typeof opts[U7i]===h5p.A9Q){opts[U7i](that,err);}}}else{var i3O=Z7Q;i3O+=h0i;i3O+=G5Q;var D3O=D5Q;D3O+=M9Q;D3O+=h0Q;D3O+=Z7i;var A3O=W7i;A3O+=R8c;var f3O=m7i;f3O+=p4c;globalError[f3O](field[m1c]()+A3O+(err[D3O]||i3O));}});this[J3O](globalError[T3O](h3O));this[C3O](V3O,[json]);if(errorCallback){var H3O=g0Q;H3O+=f7i;errorCallback[H3O](that,json);}}else{var k9O=T2c;k9O+=w5Q;k9O+=A7i;k9O+=Y5c;var u3O=d9Q;u3O+=D7i;u3O+=V9Q;u3O+=i7i;var c3O=a1i;c3O+=M9Q;var M3O=J7i;M3O+=y7Q;var N3O=X9Q;N3O+=C0Q;N3O+=h0Q;var store={};if(json[N3O]&&(action===M3O||action===c3O)){var p3O=g0Q;p3O+=u8c;p3O+=j1i;p3O+=M9Q;var z3O=g0G;z3O+=I7Q;var O3O=X9Q;O3O+=h0Q;O3O+=j6c;var E3O=T0Q;E3O+=I5Q;E3O+=d9Q;E3O+=T0Q;var B3O=q4i;B3O+=T7i;B3O+=d9Q;this[B3O](E3O,action,modifier,submitParamsLocal,json,store);for(var i=V3Q;i<json[O3O][I8c];i++){var r3O=a1i;r3O+=M9Q;var v3O=h7i;v3O+=U1i;var s3O=A7Q;s3O+=i4i;s3O+=p5Q;s3O+=M9Q;var d3O=H0Q;d3O+=X9Q;var F3O=X9Q;F3O+=h0Q;F3O+=M9Q;F3O+=h0Q;setData=json[F3O][i];var id=this[q1G](d3O,setData);this[s3O](v3O,[json,setData,action]);if(action===W5G){var R3O=C7i;R3O+=V7i;var l3O=A7Q;l3O+=P7G;this[l3O](H7i,[json,setData,id]);this[q1G](k2i,fields,setData,store);this[i5G]([k2i,R3O],[json,setData,id]);}else if(action===r3O){var b3O=T0Q;b3O+=c5Q;b3O+=N7i;b3O+=f5Q;var o3O=n7Q;o3O+=M7i;var P3O=T0Q;P3O+=I5Q;P3O+=c7i;P3O+=D7i;this[i5G](P3O,[json,setData,id]);this[q1G](g7G,modifier,fields,setData,store);this[o3O]([g7G,b3O],[json,setData,id]);}}this[z3O](p3O,action,modifier,json[i1c],store);}else if(action===d5c){var a3O=X9Q;a3O+=h0Q;a3O+=M9Q;a3O+=h0Q;var w3O=B7i;w3O+=E7i;var G3O=y2c;G3O+=V2c;G3O+=B6c;G3O+=d9Q;var x3O=B8i;x3O+=I4c;x3O+=M9Q;var I3O=O7i;I3O+=d9Q;var S3O=F7i;S3O+=d7i;var n3O=A7Q;n3O+=P7G;var K3O=T0Q;K3O+=I5Q;K3O+=d9Q;K3O+=T0Q;var X3O=q4i;X3O+=h0Q;X3O+=s7i;this[X3O](K3O,action,modifier,submitParamsLocal,json,store);this[n3O](S3O,[json,this[v7i]()]);this[q1G](I3O,modifier,fields,store);this[x3O]([G3O,w3O],[json,this[v7i]()]);this[q1G](l7i,action,modifier,json[a3O],store);}if(editCount===this[D5Q][u3O]){var L9O=P1i;L9O+=B2G;var e3O=c5Q;e3O+=R7i;e3O+=u8c;e3O+=B9i;var j3O=i2c;j3O+=D5Q;j3O+=d9Q;var action=this[D5Q][X6G];this[D5Q][X6G]=e1c;if(opts[O9i]===j3O&&(hide===undefined||hide)){var t3O=e6c;t3O+=h0Q;this[o3G](json[t3O]?w8c:x8c,action);}else if(typeof opts[e3O]===L9O){opts[O9i](this);}}if(successCallback){var Q9O=g0Q;Q9O+=f7i;successCallback[Q9O](that,json);}this[i5G](k9O,[json,setData,action]);}this[Z9O](x8c);this[Y9O](r7i,[json,setData,action]);};Editor[y9O][U9O]=function(xhr,err,thrown,errorCallback,submitParams,action){var o7i='submitError';var P7i="system";var W9O=B8i;W9O+=d9Q;W9O+=p5Q;W9O+=M9Q;var g9O=G4i;g9O+=h5p.W9Q;g9O+=p5Q;var q9O=R5G;q9O+=I5Q;this[i5G](a0i,[e1c,submitParams,action,xhr]);this[q9O](this[g9O][g9c][P7i]);this[F4i](x8c);if(errorCallback){errorCallback[J0c](this,xhr,err,thrown);}this[W9O]([o7i,r7i],[xhr,err,thrown,submitParams]);};Editor[E3c][P1G]=function(fn){var K7i="tings";var X7i="ture";var p7i="oFe";var z7i="Si";var b7i="bServer";var A9O=M9Q;A9O+=H2i;A9O+=r7Q;A9O+=d9Q;var f9O=p2c;f9O+=K8i;f9O+=n8i;var m9O=j6c;m9O+=x4c;m9O+=d9Q;var that=this;var dt=this[D5Q][m9O]?new $[C8c][f9O][I5c](this[D5Q][A9O]):e1c;var ssp=x8c;if(dt){var J9O=b7i;J9O+=z7i;J9O+=c2c;var i9O=p7i;i9O+=h0Q;i9O+=X7i;i9O+=D5Q;var D9O=E5c;D9O+=K7i;ssp=dt[D9O]()[V3Q][i9O][J9O];}if(this[D5Q][j1c]){var T9O=c5Q;T9O+=p5Q;T9O+=d9Q;this[T9O](r7i,function(){if(ssp){var C9O=X9Q;C9O+=s4G;C9O+=h7c;var h9O=B2G;h9O+=d9Q;dt[h9O](C9O,fn);}else{setTimeout(function(){fn();},d3Q);}});return w8c;}else if(this[G4c]()===I0G||this[G4c]()===i3G){this[k0c](q3i,function(){var V9O=T0Q;V9O+=I5Q;V9O+=E4i;V9O+=O4i;if(!that[D5Q][V9O]){setTimeout(function(){if(that[D5Q]){fn();}},d3Q);}else{that[k0c](r7i,function(e,json){var n7i='draw';if(ssp&&json){var H9O=c5Q;H9O+=p5Q;H9O+=d9Q;dt[H9O](n7i,fn);}else{setTimeout(function(){if(that[D5Q]){fn();}},d3Q);}});}})[P3G]();return w8c;}return x8c;};Editor[E3c][N9O]=function(name,arr){var M9O=K8c;M9O+=m0Q;M9O+=D9c;for(var i=V3Q,ien=arr[M9O];i<ien;i++){if(name==arr[i]){return i;}}return-H3Q;};Editor[c9O]={"table":e1c,"ajaxUrl":e1c,"fields":[],"display":B9O,"ajax":e1c,"idSrc":S7i,"events":{},"i18n":{"create":{"button":I7i,"title":x7i,"submit":E9O},"edit":{"button":O9O,"title":G7i,"submit":w7i},"remove":{"button":F9O,"title":d9O,"submit":a7i,"confirm":{"_":u7i,"1":s9O}},"error":{"system":v9O},multi:{title:j7i,info:t7i,restore:l9O,noMulti:R9O},datetime:{previous:r9O,next:P9O,months:[e7i,L4d,Q4d,o9O,b9O,z9O,p9O,X9O,k4d,Z4d,K9O,Y4d],weekdays:[y4d,U4d,q4d,g4d,n9O,S9O,I9O],amPm:[x9O,G9O],hours:w9O,minutes:W4d,seconds:a9O,unknown:L4i}},formOptions:{bubble:$[Y1c]({},Editor[V0c][z1G],{title:x8c,message:x8c,buttons:h9G,submit:O0i}),inline:$[Y1c]({},Editor[V0c][z1G],{buttons:x8c,submit:u9O}),main:$[Y1c]({},Editor[j9O][t9O])},legacyAjax:x8c};(function(){var m2d='keyless';var Q2d="rowIds";var w4d="drawType";var X4d="oA";var p4d="rc";var o4d="attach";var i4d="bServerSide";var A4d="oFeatu";var m4d="dra";var e0O=E8G;e0O+=w5Q;e0O+=r7Q;var e9O=i3i;e9O+=D5Q;var __dataSources=Editor[e9O]={};var __dtIsSsp=function(dt,editor){var D4d="ings";var f4d="Ty";var k5O=m4d;k5O+=h7c;k5O+=f4d;k5O+=z7Q;var Q5O=A4d;Q5O+=y2c;Q5O+=D5Q;var L5O=E5c;L5O+=M9Q;L5O+=D4d;return dt[L5O]()[V3Q][Q5O][i4d]&&editor[D5Q][w7G][k5O]!==n3c;};var __dtApi=function(table){var Z5O=N8i;Z5O+=V6i;return $(table)[Z5O]();};var __dtHighlight=function(node){node=$(node);setTimeout(function(){var T4d="Cla";var J4d="ghlight";var y5O=T2G;y5O+=J4d;var Y5O=k9c;Y5O+=T4d;Y5O+=z3c;node[Y5O](y5O);setTimeout(function(){var V4d='highlight';var C4d="dClass";var h4d="oHighlight";var k9Q=550;var q5O=p5Q;q5O+=h4d;var U5O=p2i;U5O+=C4d;node[U5O](q5O)[q9c](V4d);setTimeout(function(){var H4d='noHighlight';node[q9c](H4d);},k9Q);},Q9Q);},P3Q);};var __dtRowSelector=function(out,dt,identifier,fields,idFn){var g5O=I5Q;g5O+=v5G;g5O+=D5Q;dt[g5O](identifier)[N4d]()[H3c](function(idx){var c4d="ntifi";var M4d="Unable to find row ide";var R3Q=14;var m5O=p5Q;m5O+=c5Q;m5O+=c2c;var row=dt[x6G](idx);var data=row[i1c]();var idSrc=idFn(data);if(idSrc===undefined){var W5O=M4d;W5O+=c4d;W5O+=A4c;Editor[g9c](W5O,R3Q);}out[idSrc]={idSrc:idSrc,data:data,node:row[m5O](),fields:fields,type:c0c};});};var __dtFieldsFromIdx=function(dt,fields,idx){var v4d="ield name.";var s4d="tically determine field from source. Please specify the f";var d4d="Unable to automa";var F4d="mData";var O4d="mn";var E4d="aoColu";var B4d="Fie";var A5O=B1G;A5O+=B4d;A5O+=r7Q;A5O+=X9Q;var f5O=E4d;f5O+=O4d;f5O+=D5Q;var field;var col=dt[N6i]()[V3Q][f5O][idx];var dataSrc=col[A5O]!==undefined?col[y5G]:col[F4d];var resolvedFields={};var run=function(field,dataSrc){var D5O=p5Q;D5O+=h0Q;D5O+=w5Q;D5O+=d9Q;if(field[D5O]()===dataSrc){var i5O=p5Q;i5O+=v9G;i5O+=d9Q;resolvedFields[field[i5O]()]=field;}};$[H3c](fields,function(name,fieldInst){if($[H9G](dataSrc)){var J5O=K8c;J5O+=m0Q;J5O+=D9c;for(var i=V3Q;i<dataSrc[J5O];i++){run(fieldInst,dataSrc[i]);}}else{run(fieldInst,dataSrc);}});if($[B0i](resolvedFields)){var T5O=d4d;T5O+=s4d;T5O+=v4d;Editor[g9c](T5O,s3Q);}return resolvedFields;};var __dtCellSelector=function(out,dt,identifier,allFields,idFn,forceFields){var l4d="cel";var C5O=F8c;C5O+=g0Q;C5O+=p4c;var h5O=l4d;h5O+=r7Q;h5O+=D5Q;dt[h5O](identifier)[N4d]()[C5O](function(idx){var P4d="olumn";var R4d="displayFiel";var F5O=R4d;F5O+=z4c;var O5O=p5Q;O5O+=c5Q;O5O+=c2c;var E5O=T0Q;E5O+=J0Q;E5O+=D5Q;E5O+=p4c;var B5O=I5Q;B5O+=c5Q;B5O+=h7c;var c5O=N5G;c5O+=r4d;c5O+=d9Q;var M5O=g0Q;M5O+=P4d;var N5O=X9Q;N5O+=h0Q;N5O+=M9Q;N5O+=h0Q;var H5O=I5Q;H5O+=c5Q;H5O+=h7c;var V5O=l4d;V5O+=r7Q;var cell=dt[V5O](idx);var row=dt[x6G](idx[H5O]);var data=row[N5O]();var idSrc=idFn(data);var fields=forceFields||__dtFieldsFromIdx(dt,allFields,idx[M5O]);var isNode=typeof identifier===h5p.T9Q&&identifier[c5O]||identifier instanceof $;var prevDisplayFields,prevAttach;if(out[idSrc]){prevAttach=out[idSrc][o4d];prevDisplayFields=out[idSrc][n0G];}__dtRowSelector(out,dt,idx[B5O],allFields,idFn);out[idSrc][o4d]=prevAttach||[];out[idSrc][o4d][E5O](isNode?$(identifier)[B5c](V3Q):cell[O5O]());out[idSrc][n0G]=prevDisplayFields||{};$[Y1c](out[idSrc][F5O],fields);});};var __dtColumnSelector=function(out,dt,identifier,fields,idFn){var d5O=g0Q;d5O+=d9Q;d5O+=r7Q;d5O+=B2c;dt[d5O](e1c,identifier)[N4d]()[H3c](function(idx){__dtCellSelector(out,dt,idx,fields,idFn);});};var __dtjqId=function(id){var z4d='\\$1';var b4d="ring";var v5O=I5Q;v5O+=L3c;v5O+=X6c;v5O+=D3i;var s5O=v9c;s5O+=b4d;return typeof id===s5O?O0G+id[v5O](/(:|\.|\[|\]|,)/g,z4d):O0G+id;};__dataSources[B6i]={id:function(data){var K4d="pi";var r5O=f1c;r5O+=A0Q;r5O+=p4d;var R5O=X4d;R5O+=K4d;var l5O=B9G;l5O+=M9Q;var idFn=DataTable[l5O][R5O][b0i](this[D5Q][r5O]);return idFn(data);},individual:function(identifier,fieldNames){var I4d="ctDataFn";var S4d="_fnGetObje";var n4d="dS";var b5O=R2c;b5O+=l2c;b5O+=X9Q;b5O+=D5Q;var o5O=H0Q;o5O+=n4d;o5O+=I5Q;o5O+=g0Q;var P5O=S4d;P5O+=I4d;var idFn=DataTable[J1c][T1c][P5O](this[D5Q][o5O]);var dt=__dtApi(this[D5Q][x5c]);var fields=this[D5Q][b5O];var out={};var forceFields;var responsiveNode;if(fieldNames){var z5O=r7G;z5O+=h1G;if(!$[z5O](fieldNames)){fieldNames=[fieldNames];}forceFields={};$[H3c](fieldNames,function(i,name){forceFields[name]=fields[name];});}__dtCellSelector(out,dt,identifier,fields,idFn,forceFields);return out;},fields:function(identifier){var G4d="columns";var K5O=M9Q;K5O+=h0Q;K5O+=X5Q;K5O+=K8c;var X5O=H0Q;X5O+=X9Q;X5O+=A0Q;X5O+=p4d;var p5O=X4d;p5O+=T0Q;p5O+=H0Q;var idFn=DataTable[J1c][p5O][b0i](this[D5Q][X5O]);var dt=__dtApi(this[D5Q][K5O]);var fields=this[D5Q][Z1G];var out={};if($[Q5c](identifier)&&(identifier[x4d]!==undefined||identifier[G4d]!==undefined||identifier[J4c]!==undefined)){var n5O=x6G;n5O+=D5Q;if(identifier[n5O]!==undefined){var S5O=I5Q;S5O+=c5Q;S5O+=h7c;S5O+=D5Q;__dtRowSelector(out,dt,identifier[S5O],fields,idFn);}if(identifier[G4d]!==undefined){__dtColumnSelector(out,dt,identifier[G4d],fields,idFn);}if(identifier[J4c]!==undefined){__dtCellSelector(out,dt,identifier[J4c],fields,idFn);}}else{__dtRowSelector(out,dt,identifier,fields,idFn);}return out;},create:function(fields,data){var I5O=j6c;I5O+=x4c;I5O+=d9Q;var dt=__dtApi(this[D5Q][I5O]);if(!__dtIsSsp(dt,this)){var row=dt[x6G][k9c](data);__dtHighlight(row[N5G]());}},edit:function(identifier,fields,data,store){var L2d="leEx";var e4d="dataTab";var t4d="Ex";var j4d="_fn";var u4d="nA";var x5O=p5Q;x5O+=c5Q;x5O+=l0Q;var that=this;var dt=__dtApi(this[D5Q][x5c]);if(!__dtIsSsp(dt,this)||this[D5Q][w7G][w4d]===x5O){var q0O=R9c;q0O+=X9Q;q0O+=d9Q;var t5O=h0Q;t5O+=p5Q;t5O+=r0Q;var w5O=h0Q;w5O+=p5Q;w5O+=r0Q;var G5O=a4d;G5O+=h0Q;G5O+=n8i;var rowId=__dataSources[G5O][f1c][J0c](this,data);var row;try{row=dt[x6G](__dtjqId(rowId));}catch(e){row=dt;}if(!row[w5O]()){var a5O=I5Q;a5O+=c5Q;a5O+=h7c;row=dt[a5O](function(rowIdx,rowData,rowNode){var j5O=H0Q;j5O+=X9Q;var u5O=i1c;u5O+=b6G;u5O+=K8c;return rowId==__dataSources[u5O][j5O][J0c](that,rowData);});}if(row[t5O]()){var y0O=d9c;y0O+=r7Q;y0O+=t9Q;y0O+=d9Q;var Y0O=H0Q;Y0O+=u4d;Y0O+=h0i;Y0O+=E0c;var Z0O=X9Q;Z0O+=h0Q;Z0O+=M9Q;Z0O+=h0Q;var k0O=X9Q;k0O+=C0Q;k0O+=h0Q;var Q0O=j4d;Q0O+=t4d;Q0O+=y7Q;Q0O+=O7c;var L0O=X4d;L0O+=T0Q;L0O+=H0Q;var e5O=e4d;e5O+=L2d;e5O+=M9Q;var extender=$[C8c][e5O][L0O][Q0O];var toSave=extender({},row[k0O](),w8c);toSave=extender(toSave,data,w8c);row[Z0O](toSave);var idx=$[Y0O](rowId,store[Q2d]);store[Q2d][y0O](idx,H3Q);}else{var U0O=D4c;U0O+=h7c;row=dt[U0O][k9c](data);}__dtHighlight(row[q0O]());}},remove:function(identifier,fields,store){var Y2d="every";var Z2d="elled";var k2d="canc";var W0O=I3G;W0O+=n8c;W0O+=p4c;var g0O=k2d;g0O+=Z2d;var that=this;var dt=__dtApi(this[D5Q][x5c]);var cancelled=store[g0O];if(cancelled[W0O]===V3Q){var m0O=D4c;m0O+=h7c;m0O+=D5Q;dt[m0O](identifier)[d5c]();}else{var J0O=I5Q;J0O+=c5Q;J0O+=p5G;var f0O=I5Q;f0O+=c5Q;f0O+=h7c;f0O+=D5Q;var indexes=[];dt[f0O](identifier)[Y2d](function(){var y2d="index";var D0O=X9Q;D0O+=h0Q;D0O+=j6c;var A0O=g0Q;A0O+=f7i;var id=__dataSources[B6i][f1c][A0O](that,this[D0O]());if($[I9G](id,cancelled)===-H3Q){var i0O=T0Q;i0O+=J0Q;i0O+=V8i;indexes[i0O](this[y2d]());}});dt[J0O](indexes)[d5c]();}},prep:function(action,identifier,submit,json,store){var U2d="cancelled";var T0O=d9Q;T0O+=D7i;if(action===T0O){var h0O=e6c;h0O+=h0Q;var cancelled=json[U2d]||[];store[Q2d]=$[y0G](submit[h0O],function(val,key){var q2d="inAr";var V0O=q2d;V0O+=s4G;V0O+=r0Q;var C0O=p2c;C0O+=M9Q;C0O+=h0Q;return!$[B0i](submit[C0O][key])&&$[V0O](key,cancelled)===-H3Q?key:undefined;});}else if(action===y2i){store[U2d]=json[U2d]||[];}},commit:function(action,identifier,data,store){var W2d="wIds";var g2d="rowId";var l0O=p5Q;l0O+=c5Q;l0O+=p5Q;l0O+=d9Q;var v0O=f0Q;v0O+=f5Q;v0O+=E1G;v0O+=D5Q;var N0O=g2d;N0O+=D5Q;var H0O=M9Q;H0O+=H2i;H0O+=r7Q;H0O+=d9Q;var that=this;var dt=__dtApi(this[D5Q][H0O]);if(!__dtIsSsp(dt,this)&&action===g7G&&store[N0O][I8c]){var M0O=D4c;M0O+=W2d;var ids=store[M0O];var row;var compare=function(id){return function(rowIdx,rowData,rowNode){var B0O=c3c;B0O+=r7Q;B0O+=r7Q;var c0O=H0Q;c0O+=X9Q;return id==__dataSources[B6i][c0O][B0O](that,rowData);};};for(var i=V3Q,ien=ids[I8c];i<ien;i++){var s0O=A4d;s0O+=y2c;s0O+=D5Q;var d0O=h0Q;d0O+=p5Q;d0O+=r0Q;var O0O=h0Q;O0O+=p5Q;O0O+=r0Q;try{var E0O=D4c;E0O+=h7c;row=dt[E0O](__dtjqId(ids[i]));}catch(e){row=dt;}if(!row[O0O]()){var F0O=D4c;F0O+=h7c;row=dt[F0O](compare(ids[i]));}if(row[d0O]()&&!dt[N6i]()[V3Q][s0O][i4d]){row[d5c]();}}}var drawType=this[D5Q][v0O][w4d];if(drawType!==l0O){var R0O=m4d;R0O+=h7c;dt[R0O](drawType);}}};function __html_id(identifier){var C2d="of: ";var h2d="n element with `data-editor-id` or `id` ";var T2d="Could not find ";var i2d="d=";var D2d="tor-i";var A2d="[data-edi";var context=document;if(identifier!==m2d){var z0O=I3G;z0O+=n8c;z0O+=p4c;var o0O=K8c;o0O+=f2d;var P0O=R6c;P0O+=M3i;var r0O=A2d;r0O+=D2d;r0O+=i2d;r0O+=R6c;context=$(r0O+identifier+P0O);if(context[o0O]===V3Q){var b0O=D5Q;b0O+=J2d;context=typeof identifier===b0O?$(__dtjqId(identifier)):$(identifier);}if(context[z0O]===V3Q){var p0O=T2d;p0O+=h0Q;p0O+=h2d;p0O+=C2d;throw p0O+identifier;}}return context;}function __html_el(identifier,name){var V2d='[data-editor-field="';var context=__html_id(identifier);return $(V2d+name+O8c,context);}function __html_els(identifier,names){var X0O=r7Q;X0O+=H2d;X0O+=p4c;var out=$();for(var i=V3Q,ien=names[X0O];i<ien;i++){var K0O=h0Q;K0O+=X9Q;K0O+=X9Q;out=out[K0O](__html_el(identifier,names[i]));}return out;}function __html_get(identifier,dataSrc){var B2d="ue]";var c2d="r-val";var M2d="[data-edito";var N2d="data-editor-v";var x0O=E8G;x0O+=j5c;var I0O=N2d;I0O+=h0Q;I0O+=L6c;var S0O=h0Q;S0O+=n1G;S0O+=I5Q;var n0O=M2d;n0O+=c2d;n0O+=B2d;var el=__html_el(identifier,dataSrc);return el[E2d](n0O)[I8c]?el[S0O](I0O):el[x0O]();}function __html_set(identifier,fields,data){$[H3c](fields,function(name,field){var v2d="itor-value";var s2d="data-ed";var d2d='[data-editor-value]';var F2d="dataSrc";var O2d="ter";var val=field[h1c](data);if(val!==undefined){var G0O=B9Q;G0O+=r7Q;G0O+=O2d;var el=__html_el(identifier,field[F2d]());if(el[G0O](d2d)[I8c]){var w0O=s2d;w0O+=v2d;el[M2i](w0O,val);}else{var t0O=E8G;t0O+=j5c;var a0O=k5c;a0O+=p4c;el[a0O](function(){var P2d="removeChild";var r2d="hild";var R2d="stC";var l2d="childNodes";var u0O=I3G;u0O+=Z0c;while(this[l2d][u0O]){var j0O=B9Q;j0O+=I5Q;j0O+=R2d;j0O+=r2d;this[P2d](this[j0O]);}})[t0O](val);}}});}__dataSources[e0O]={id:function(data){var idFn=DataTable[J1c][T1c][b0i](this[D5Q][c6i]);return idFn(data);},initField:function(cfg){var o2d='[data-editor-label="';var L7O=X9Q;L7O+=h0Q;L7O+=M9Q;L7O+=h0Q;var label=$(o2d+(cfg[L7O]||cfg[m1c])+O8c);if(!cfg[Y6c]&&label[I8c]){var k7O=p4c;k7O+=b9c;k7O+=r7Q;var Q7O=S6c;Q7O+=d9Q;Q7O+=r7Q;cfg[Q7O]=label[k7O]();}},individual:function(identifier,fieldNames){var a2d="etermine field name from data ";var w2d="Cannot automatically d";var G2d="ey";var x2d='editor-id';var I2d='[data-editor-id]';var S2d="addBack";var n2d='data-editor-field';var K2d="dBack";var X2d="lf";var p2d="andSe";var z2d="nodeName";var b2d="sA";var f7O=c3c;f7O+=B3c;var W7O=H0Q;W7O+=b2d;W7O+=I5Q;W7O+=h1G;var attachEl;if(identifier instanceof $||identifier[z2d]){var q7O=p2c;q7O+=M9Q;q7O+=h0Q;var U7O=p2d;U7O+=X2d;var y7O=p2i;y7O+=K2d;var Y7O=R2c;Y7O+=p5Q;attachEl=identifier;if(!fieldNames){var Z7O=h0Q;Z7O+=M9Q;Z7O+=M9Q;Z7O+=I5Q;fieldNames=[$(identifier)[Z7O](n2d)];}var back=$[Y7O][S2d]?y7O:U7O;identifier=$(identifier)[C7G](I2d)[back]()[q7O](x2d);}if(!identifier){var g7O=z2c;g7O+=G2d;g7O+=K8c;g7O+=z3c;identifier=g7O;}if(fieldNames&&!$[W7O](fieldNames)){fieldNames=[fieldNames];}if(!fieldNames||fieldNames[I8c]===V3Q){var m7O=w2d;m7O+=a2d;m7O+=D5Q;m7O+=g4i;throw m7O;}var out=__dataSources[n5c][Z1G][f7O](this,identifier);var fields=this[D5Q][Z1G];var forceFields={};$[H3c](fieldNames,function(i,name){forceFields[name]=fields[name];});$[H3c](out,function(id,set){var t2d="typ";var j2d="ell";var u2d="splayFields";var i7O=x3c;i7O+=u2d;var D7O=g0Q;D7O+=j2d;var A7O=t2d;A7O+=d9Q;set[A7O]=D7O;set[o4d]=attachEl?$(attachEl):__html_els(identifier,fieldNames)[e2d]();set[Z1G]=fields;set[i7O]=forceFields;});return out;},fields:function(identifier){var J7O=p4c;J7O+=M9Q;J7O+=w5Q;J7O+=r7Q;var out={};var self=__dataSources[J7O];if($[H9G](identifier)){for(var i=V3Q,ien=identifier[I8c];i<ien;i++){var T7O=a9G;T7O+=D5Q;var res=self[T7O][J0c](this,identifier[i]);out[identifier[i]]=res[identifier[i]];}return out;}var data={};var fields=this[D5Q][Z1G];if(!identifier){identifier=m2d;}$[H3c](fields,function(name,field){var k8d="aSrc";var Q8d="oData";var L8d="valT";var C7O=L8d;C7O+=Q8d;var h7O=X9Q;h7O+=C0Q;h7O+=k8d;var val=__html_get(identifier,field[h7O]());field[C7O](data,val===e1c?undefined:val);});out[identifier]={idSrc:identifier,data:data,node:document,fields:fields,type:c0c};return out;},create:function(fields,data){if(data){var H7O=c3c;H7O+=B3c;var V7O=H0Q;V7O+=X9Q;var id=__dataSources[n5c][V7O][H7O](this,data);try{if(__html_id(id)[I8c]){__html_set(id,fields,data);}}catch(e){}}},edit:function(identifier,fields,data){var N7O=g0Q;N7O+=f7i;var id=__dataSources[n5c][f1c][N7O](this,data)||m2d;__html_set(id,fields,data);},remove:function(identifier,fields){__html_id(identifier)[d5c]();}};}());Editor[P3c]={"wrapper":o5Q,"processing":{"indicator":Z8d,"active":M7O},"header":{"wrapper":c7O,"content":B7O},"body":{"wrapper":E7O,"content":Y8d},"footer":{"wrapper":O7O,"content":y8d},"form":{"wrapper":F7O,"content":U8d,"tag":h5p.f9Q,"info":q8d,"error":d7O,"buttons":s7O,"button":v7O,"buttonInternal":l7O},"field":{"wrapper":R7O,"typePrefix":g8d,"namePrefix":r7O,"label":W8d,"input":m8d,"inputControl":P7O,"error":f8d,"msg-label":o7O,"msg-error":A8d,"msg-message":b7O,"msg-info":z7O,"multiValue":p7O,"multiInfo":X7O,"multiRestore":K7O,"multiNoEdit":D8d,"disabled":i3c,"processing":Z8d},"actions":{"create":i8d,"edit":n7O,"remove":S7O},"inline":{"wrapper":J8d,"liner":I7O,"buttons":T8d},"bubble":{"wrapper":h8d,"liner":x7O,"table":C8d,"close":G7O,"pointer":w7O,"bg":V8d}};(function(){var b6d="removeSingle";var o6d='selectedSingle';var E6d='buttons-remove';var c6d='rows';var i6d='buttons-edit';var m6d="formTitle";var U6d="formMe";var Y6d="formButtons";var k6d="i18";var G8d="editor_remove";var K8d="select_single";var X8d="editor_edit";var p8d="bel";var z8d="editor";var r8d="editor_create";var R8d="Too";var l8d="Ta";var v8d="TTONS";var s8d="BU";var d8d="ols";var F8d="TableTo";var O8d="tto";var E8d="buttons-crea";var B8d="selecte";var c8d="Single";var M8d="editS";var N8d="gle";var H8d="eSin";var F2x=O7i;F2x+=H8d;F2x+=N8d;var O2x=d9Q;O2x+=R9Q;O2x+=M9Q;O2x+=Z2c;var E2x=M8d;E2x+=y5c;E2x+=K8c;var B2x=d9Q;B2x+=X9Q;B2x+=H0Q;B2x+=M9Q;var c2x=B1G;c2x+=c8d;var U2x=B8d;U2x+=X9Q;var P4x=E8d;P4x+=M9Q;P4x+=d9Q;var v4x=W2c;v4x+=O8d;v4x+=D1G;var s4x=d9Q;s4x+=z0Q;var a7O=F8d;a7O+=d8d;if(DataTable[a7O]){var m4x=J2c;m4x+=r7Q;m4x+=d9Q;m4x+=V2i;var j7O=s8d;j7O+=v8d;var u7O=l8d;u7O+=n8i;u7O+=R8d;u7O+=B2c;var ttButtons=DataTable[u7O][j7O];var ttButtonBase={sButtonText:e1c,editor:e1c,formTitle:e1c};ttButtons[r8d]=$[Y1c](w8c,ttButtons[L4G],ttButtonBase,{formButtons:[{label:e1c,fn:function(e){this[b5c]();}}],fnClick:function(button,config){var b8d="uttons";var o8d="rmB";var P8d="abe";var k4x=M9Q;k4x+=O4c;k4x+=d9Q;var L4x=r7Q;L4x+=P8d;L4x+=r7Q;var e7O=V9c;e7O+=o8d;e7O+=b8d;var t7O=G4i;t7O+=h5p.W9Q;t7O+=p5Q;var editor=config[z8d];var i18nCreate=editor[t7O][W5G];var buttons=config[e7O];if(!buttons[V3Q][L4x]){var Q4x=X6c;Q4x+=p8d;buttons[V3Q][Q4x]=i18nCreate[b5c];}editor[W5G]({title:i18nCreate[k4x],buttons:buttons});}});ttButtons[X8d]=$[Y1c](w8c,ttButtons[K8d],ttButtonBase,{formButtons:[{label:e1c,fn:function(e){var Z4x=D7Q;Z4x+=i7Q;Z4x+=f5Q;this[Z4x]();}}],fnClick:function(button,config){var x8d="dIndexes";var I8d="electe";var S8d="nGetS";var n8d="formB";var W4x=d9Q;W4x+=X9Q;W4x+=f5Q;var g4x=r7Q;g4x+=h0Q;g4x+=p8d;var q4x=n8d;q4x+=U2c;q4x+=T9G;var U4x=d9Q;U4x+=X9Q;U4x+=f5Q;var y4x=r7Q;y4x+=S3G;y4x+=M9Q;y4x+=p4c;var Y4x=R2c;Y4x+=S8d;Y4x+=I8d;Y4x+=x8d;var selected=this[Y4x]();if(selected[y4x]!==H3Q){return;}var editor=config[z8d];var i18nEdit=editor[Z1c][U4x];var buttons=config[q4x];if(!buttons[V3Q][g4x]){buttons[V3Q][Y6c]=i18nEdit[b5c];}editor[W4x](selected[V3Q],{title:i18nEdit[X1c],buttons:buttons});}});ttButtons[G8d]=$[Y1c](w8c,ttButtons[m4x],ttButtonBase,{question:e1c,formButtons:[{label:e1c,fn:function(e){var f4x=T2c;f4x+=c8i;var that=this;this[f4x](function(json){var u8d="fnGetInstance";var a8d="dataTa";var w8d="SelectNon";var i4x=R2c;i4x+=p5Q;i4x+=w8d;i4x+=d9Q;var D4x=S9Q;D4x+=j6c;D4x+=N0Q;D4x+=l8c;var A4x=a8d;A4x+=n8i;var tt=$[C8c][A4x][b6i][u8d]($(that[D5Q][x5c])[D4x]()[x5c]()[N5G]());tt[i4x]();});}}],fnClick:function(button,config){var Z6d="fnGetSelectedIndexes";var Q6d="confi";var L6d="firm";var t8d="labe";var j8d="repla";var d4x=M9Q;d4x+=f5Q;d4x+=r7Q;d4x+=d9Q;var F4x=r7Q;F4x+=H2d;F4x+=p4c;var O4x=j8d;O4x+=D3i;var B4x=t8d;B4x+=r7Q;var c4x=a3c;c4x+=R2c;c4x+=e8d;c4x+=w5Q;var M4x=r7Q;M4x+=I4c;M4x+=n8c;M4x+=p4c;var N4x=g0Q;N4x+=B2G;N4x+=B9Q;N4x+=A8G;var H4x=a3c;H4x+=L6d;var V4x=Q6d;V4x+=A8G;var C4x=D5Q;C4x+=d9G;C4x+=H0Q;C4x+=m0Q;var h4x=g0Q;h4x+=B2G;h4x+=L6d;var T4x=k6d;T4x+=p5Q;var J4x=r7Q;J4x+=I4c;J4x+=n8c;J4x+=p4c;var rows=this[Z6d]();if(rows[J4x]===V3Q){return;}var editor=config[z8d];var i18nRemove=editor[T4x][d5c];var buttons=config[Y6d];var question=typeof i18nRemove[h4x]===C4x?i18nRemove[V4x]:i18nRemove[H4x][rows[I8c]]?i18nRemove[N4x][rows[M4x]]:i18nRemove[c4x][A7Q];if(!buttons[V3Q][B4x]){var E4x=D7Q;E4x+=i7Q;E4x+=H0Q;E4x+=M9Q;buttons[V3Q][Y6c]=i18nRemove[E4x];}editor[d5c](rows,{message:question[O4x](/%d/g,rows[F4x]),title:i18nRemove[d4x],buttons:buttons});}});}var _buttons=DataTable[s4x][v4x];$[Y1c](_buttons,{create:{text:function(dt,node,config){var y6d="s.c";var r4x=W2c;r4x+=n1G;r4x+=B2G;var R4x=d9Q;R4x+=x3c;R4x+=B7Q;R4x+=I5Q;var l4x=m5i;l4x+=H4i;l4x+=y6d;l4x+=V7i;return dt[Z1c](l4x,config[R4x][Z1c][W5G][r4x]);},className:P4x,editor:e1c,formButtons:{text:function(editor){var o4x=D5Q;o4x+=u3G;o4x+=j1i;o4x+=M9Q;return editor[Z1c][W5G][o4x];},action:function(e){this[b5c]();}},formMessage:e1c,formTitle:e1c,action:function(e,dt,node,config){var g6d="mButtons";var q6d="eOp";var I4x=M9Q;I4x+=H0Q;I4x+=M9Q;I4x+=K8c;var S4x=U6d;S4x+=z3c;S4x+=X9c;var n4x=J7i;n4x+=y7Q;var X4x=Z0Q;X4x+=q6d;X4x+=I4c;var p4x=c5Q;p4x+=p5Q;p4x+=d9Q;var z4x=V9c;z4x+=I5Q;z4x+=g6d;var b4x=f0Q;b4x+=H0Q;b4x+=M9Q;b4x+=G5Q;var that=this;var editor=config[b4x];var buttons=config[z4x];this[j1c](w8c);editor[p4x](X4x,function(){var W6d="process";var K4x=W6d;K4x+=P4c;K4x+=O0Q;that[K4x](x8c);})[n4x]({buttons:config[Y6d],message:config[S4x],title:config[m6d]||editor[Z1c][W5G][I4x]});}},edit:{extend:f6d,text:function(dt,node,config){var D6d='buttons.edit';var A6d="utto";var w4x=X5Q;w4x+=A6d;w4x+=p5Q;var G4x=f0Q;G4x+=P2c;var x4x=H0Q;x4x+=U8c;x4x+=h5p.W9Q;x4x+=p5Q;return dt[x4x](D6d,config[G4x][Z1c][B1G][w4x]);},className:i6d,editor:e1c,formButtons:{text:function(editor){var u4x=d9Q;u4x+=X9Q;u4x+=H0Q;u4x+=M9Q;var a4x=H0Q;a4x+=J6d;a4x+=p5Q;return editor[a4x][u4x][b5c];},action:function(e){var T6d="ubmit";var j4x=D5Q;j4x+=T6d;this[j4x]();}},formMessage:e1c,formTitle:e1c,action:function(e,dt,node,config){var M6d="xes";var N6d="lumn";var H6d="proc";var V6d="preOp";var C6d="Mes";var y2x=d9Q;y2x+=X9Q;y2x+=H0Q;y2x+=M9Q;var Y2x=R2c;Y2x+=G5Q;Y2x+=w5Q;Y2x+=h6d;var Z2x=B3G;Z2x+=C6d;Z2x+=e1i;var k2x=V6d;k2x+=I4c;var Q2x=c5Q;Q2x+=p5Q;Q2x+=d9Q;var L2x=H6d;L2x+=d9Q;L2x+=z3c;L2x+=y5c;var e4x=g0Q;e4x+=c5Q;e4x+=N6d;e4x+=D5Q;var t4x=H0Q;t4x+=p5Q;t4x+=c2c;t4x+=M6d;var that=this;var editor=config[z8d];var rows=dt[x4d]({selected:w8c})[t4x]();var columns=dt[e4x]({selected:w8c})[N4d]();var cells=dt[J4c]({selected:w8c})[N4d]();var items=columns[I8c]||cells[I8c]?{rows:rows,columns:columns,cells:cells}:rows;this[L2x](w8c);editor[Q2x](k2x,function(){that[j1c](x8c);})[B1G](items,{message:config[Z2x],buttons:config[Y6d],title:config[Y2x]||editor[Z1c][y2x][X1c]});}},remove:{extend:U2x,limitTo:[c6d],text:function(dt,node,config){var B6d='buttons.remove';var g2x=H0Q;g2x+=U8c;g2x+=h5p.W9Q;g2x+=p5Q;var q2x=G4i;q2x+=r6i;return dt[q2x](B6d,config[z8d][g2x][d5c][N0c]);},className:E6d,editor:e1c,formButtons:{text:function(editor){var m2x=T2c;m2x+=c8i;var W2x=k6d;W2x+=p5Q;return editor[W2x][d5c][m2x];},action:function(e){var f2x=D7Q;f2x+=X5Q;f2x+=c8i;this[f2x]();}},formMessage:function(editor,dt){var l6d="confirm";var v6d="dexe";var s6d="irm";var d6d="fir";var F6d="nfir";var O6d="eplace";var V2x=r7Q;V2x+=d9Q;V2x+=p5Q;V2x+=Z0c;var C2x=I5Q;C2x+=O6d;var h2x=g0Q;h2x+=c5Q;h2x+=F6d;h2x+=w5Q;var T2x=N5c;T2x+=p5Q;T2x+=d6d;T2x+=w5Q;var J2x=D5Q;J2x+=d9G;J2x+=y5c;var i2x=t7c;i2x+=s6d;var D2x=Y0i;D2x+=B6c;D2x+=d9Q;var A2x=H0Q;A2x+=p5Q;A2x+=v6d;A2x+=D5Q;var rows=dt[x4d]({selected:w8c})[A2x]();var i18n=editor[Z1c][D2x];var question=typeof i18n[i2x]===J2x?i18n[T2x]:i18n[l6d][rows[I8c]]?i18n[l6d][rows[I8c]]:i18n[h2x][A7Q];return question[C2x](/%d/g,rows[V2x]);},formTitle:e1c,action:function(e,dt,node,config){var P6d='preOpen';var r6d="ov";var R6d="ssage";var M2x=y2c;M2x+=d7i;var N2x=U6d;N2x+=R6d;var H2x=y2c;H2x+=w5Q;H2x+=r6d;H2x+=d9Q;var that=this;var editor=config[z8d];this[j1c](w8c);editor[k0c](P6d,function(){that[j1c](x8c);})[H2x](dt[x4d]({selected:w8c})[N4d](),{buttons:config[Y6d],message:config[N2x],title:config[m6d]||editor[Z1c][M2x][X1c]});}}});_buttons[c2x]=$[Y1c]({},_buttons[B2x]);_buttons[E2x][Y1c]=o6d;_buttons[b6d]=$[O2x]({},_buttons[d5c]);_buttons[F2x][Y1c]=o6d;}());Editor[d2x]={};Editor[z6d]=function(input,opts){var a1d="_constructor";var w1d="calendar";var x1d=/[haA]/;var I1d="match";var S1d=/[Hhm]|LT|LTS/;var n1d=/[YMD]|L(?!T)|l/;var X1d='-error';var z1d='-date';var b1d='-seconds"/>';var o1d='-calendar"/>';var P1d='<select class="';var r1d='<span/>';var R1d='<button>';var l1d='-iconRight">';var v1d='</button>';var s1d='-iconLeft">';var B1d="Editor datetime: Without momentjs only the format 'YYYY-MM-DD' can be used";var c1d='YYYY-MM-DD';var V1d="DateT";var T1d="div cl";var J1d="te\">";var i1d="-da";var D1d="-ti";var A1d="button>";var f1d="previo";var m1d="el\">";var W1d="month\"";var q1d="el\"";var U1d="-lab";var Y1d="-y";var Z1d="\">";var Q1d="-t";var L1d="\"/>";var e6d="hours";var t6d="inutes\"/>";var j6d="-m";var u6d="-error\"";var a6d="-tit";var G6d="-calen";var x6d="ime-";var I6d="editor-date";var S6d="matc";var n6d="ormat";var K6d="tc";var X6d="rma";var M8x=X9Q;M8x+=c5Q;M8x+=w5Q;var N8x=X9Q;N8x+=c5Q;N8x+=w5Q;var H8x=X9Q;H8x+=u8c;var V8x=d9Q;V8x+=I5Q;V8x+=Q9c;var C8x=y9c;C8x+=w5Q;var h8x=C4G;h8x+=r9c;h8x+=X9Q;var T8x=p6d;T8x+=d9Q;var J8x=X9Q;J8x+=c5Q;J8x+=w5Q;var i8x=C4G;i8x+=V4G;var D8x=y9c;D8x+=w5Q;var A8x=V9c;A8x+=X6d;A8x+=M9Q;var f8x=w5Q;f8x+=h0Q;f8x+=K6d;f8x+=p4c;var m8x=R2c;m8x+=n6d;var W8x=S6d;W8x+=p4c;var g8x=I6d;g8x+=x6d;var q8x=R2c;q8x+=P4c;q8x+=X9Q;var U8x=G6d;U8x+=X9Q;U8x+=w6d;var y8x=a6d;y8x+=K8c;var Y8x=R2c;Y8x+=K3i;var Z8x=R2c;Z8x+=H0Q;Z8x+=p5Q;Z8x+=X9Q;var k8x=u6d;k8x+=N6c;k8x+=E6c;var Q8x=j6d;Q8x+=t6d;var L8x=z9Q;L8x+=e6d;L8x+=L1d;var e2x=a6c;e2x+=y3G;e2x+=U3G;var t2x=Q1d;t2x+=k1d;t2x+=d9Q;t2x+=Z1d;var j2x=t1G;j2x+=z3c;j2x+=I8i;var u2x=Y1d;u2x+=y1d;u2x+=L1d;var a2x=U1d;a2x+=q1d;a2x+=E6c;var w2x=z6c;w2x+=g1d;w2x+=H0Q;w2x+=D6c;var G2x=z9Q;G2x+=W1d;G2x+=x8i;var x2x=U1d;x2x+=m1d;var I2x=p5Q;I2x+=d9Q;I2x+=R9Q;I2x+=M9Q;var S2x=z6c;S2x+=N6c;S2x+=g9i;S2x+=E6c;var n2x=f1d;n2x+=f1i;var K2x=z6c;K2x+=A1d;var X2x=D1d;X2x+=f3i;X2x+=R6c;X2x+=E6c;var p2x=P0c;p2x+=k6i;var z2x=i1d;z2x+=J1d;var b2x=z6c;b2x+=T1d;b2x+=w8i;var o2x=R6c;o2x+=E6c;var r2x=G4i;r2x+=h5p.W9Q;r2x+=p5Q;var R2x=h1d;R2x+=C1d;var l2x=r9Q;l2x+=J0Q;l2x+=r7Q;l2x+=V9i;var v2x=V1d;v2x+=H1d;var s2x=J1c;s2x+=d9Q;s2x+=O7c;this[g0Q]=$[s2x](w8c,{},Editor[v2x][l2x],opts);var classPrefix=this[g0Q][R2x];var i18n=this[g0Q][r2x];if(!window[N1d]&&this[g0Q][M1d]!==c1d){throw B1d;}var timeBlock=function(type){var E1d='-timeblock">';return H3G+classPrefix+E1d+a1c;};var gap=function(){var O1d="<span>:";var P2x=O1d;P2x+=A6c;P2x+=F1d;P2x+=d1d;return P2x;};var structure=$(H3G+classPrefix+o2x+b2x+classPrefix+z2x+p2x+classPrefix+X2x+H3G+classPrefix+s1d+K2x+i18n[n2x]+v1d+S2x+H3G+classPrefix+l1d+R1d+i18n[I2x]+v1d+a1c+H3G+classPrefix+x2x+r1d+P1d+classPrefix+G2x+w2x+H3G+classPrefix+a2x+r1d+P1d+classPrefix+u2x+a1c+a1c+H3G+classPrefix+o1d+a1c+j2x+classPrefix+t2x+e2x+classPrefix+L8x+H3G+classPrefix+Q8x+H3G+classPrefix+b1d+a1c+H3G+classPrefix+k8x+a1c);this[q3c]={container:structure,date:structure[Z8x](y7G+classPrefix+z1d),title:structure[Y8x](y7G+classPrefix+y8x),calendar:structure[Y7G](y7G+classPrefix+U8x),time:structure[q8x](y7G+classPrefix+p1d),error:structure[Y7G](y7G+classPrefix+X1d),input:$(input)};this[D5Q]={d:e1c,display:e1c,minutesRange:e1c,secondsRange:e1c,namespace:g8x+Editor[z6d][K1d]++,parts:{date:this[g0Q][M1d][W8x](n1d)!==e1c,time:this[g0Q][m8x][f8x](S1d)!==e1c,seconds:this[g0Q][A8x][B1i](h8c)!==-H3Q,hours12:this[g0Q][M1d][I1d](x1d)!==e1c}};this[D8x][R3c][i8x](this[J8x][G1d])[Y7c](this[q3c][T8x])[h8x](this[C8x][V8x]);this[H8x][G1d][Y7c](this[N8x][X1c])[Y7c](this[M8x][w1d]);this[a1d]();};$[c8x](Editor[B8x][E3c],{destroy:function(){var t1d="ontainer";var j1d="tetime";var u1d=".editor-da";var R8x=u1d;R8x+=j1d;var l8x=c5Q;l8x+=t3G;var v8x=H0Q;v8x+=p5Q;v8x+=l4i;v8x+=M9Q;var s8x=X9Q;s8x+=c5Q;s8x+=w5Q;var d8x=d9Q;d8x+=r4i;d8x+=X4c;var F8x=g0Q;F8x+=t1d;var O8x=X9Q;O8x+=c5Q;O8x+=w5Q;var E8x=A7Q;E8x+=l5G;E8x+=d9Q;this[E8x]();this[O8x][F8x][I8G]()[d8x]();this[s8x][v8x][l8x](R8x);},errorMsg:function(msg){var error=this[q3c][g9c];if(msg){error[n5c](msg);}else{error[e1d]();}},hide:function(){var r8x=m7c;r8x+=H0Q;r8x+=X9Q;r8x+=d9Q;this[r8x]();},max:function(date){var Z3d="xDate";var k3d="Tit";var Q3d="_options";var L3d="etCala";var b8x=f7c;b8x+=L3d;b8x+=O7c;b8x+=A4c;var o8x=Q3d;o8x+=k3d;o8x+=K8c;var P8x=U2G;P8x+=Z3d;this[g0Q][P8x]=date;this[o8x]();this[b8x]();},min:function(date){var U3d="lander";var y3d="tCa";var p8x=Y3d;p8x+=y3d;p8x+=U3d;var z8x=q3d;z8x+=g3d;this[g0Q][z8x]=date;this[W3d]();this[p8x]();},owns:function(node){var D3d="nts";var f3d="iner";var n8x=m3d;n8x+=f3d;var K8x=X9Q;K8x+=c5Q;K8x+=w5Q;var X8x=A3d;X8x+=y2c;X8x+=D3d;return $(node)[X8x]()[E2d](this[K8x][n8x])[I8c]>V3Q;},val:function(set,write){var s3d=/(\d{4})\-(\d{2})\-(\d{2})/;var d3d="tch";var F3d="toDate";var O3d="isValid";var B3d="orma";var c3d="ntLocal";var M3d="mome";var N3d="trict";var H3d="momentS";var T3d="ander";var J3d="etCa";var i3d="tTime";var Z6x=f7c;Z6x+=d9Q;Z6x+=i3d;var k6x=f7c;k6x+=J3d;k6x+=r7Q;k6x+=T3d;var Q6x=J2c;Q6x+=h3d;Q6x+=C3d;Q6x+=g3d;var L6x=a4c;L6x+=t4c;if(set===undefined){return this[D5Q][X9Q];}if(set instanceof Date){var S8x=V3d;S8x+=g0Q;this[D5Q][X9Q]=this[S8x](set);}else if(set===e1c||set===T8c){this[D5Q][X9Q]=e1c;}else if(typeof set===g5c){if(window[N1d]){var w8x=H3d;w8x+=N3d;var G8x=M3d;G8x+=c3d;G8x+=d9Q;var x8x=R2c;x8x+=B3d;x8x+=M9Q;var I8x=M3d;I8x+=L7c;var m=window[I8x][E3d](set,this[g0Q][x8x],this[g0Q][G8x],this[g0Q][w8x]);this[D5Q][X9Q]=m[O3d]()?m[F3d]():e1c;}else{var u8x=S0Q;u8x+=C3d;var a8x=U2G;a8x+=d3d;var match=set[a8x](s3d);this[D5Q][X9Q]=match?new Date(Date[u8x](match[H3Q],match[N3Q]-H3Q,match[M3Q])):e1c;}}if(write||write===undefined){if(this[D5Q][X9Q]){this[v3d]();}else{var t8x=B6c;t8x+=h0Q;t8x+=r7Q;var j8x=X9Q;j8x+=c5Q;j8x+=w5Q;this[j8x][r1c][t8x](set);}}if(!this[D5Q][X9Q]){var e8x=V3d;e8x+=g0Q;this[D5Q][X9Q]=this[e8x](new Date());}this[D5Q][L6x]=new Date(this[D5Q][X9Q][b3i]());this[D5Q][G4c][Q6x](H3Q);this[l3d]();this[k6x]();this[Z6x]();},_constructor:function(){var F9d="_setTime";var V9d="tT";var W9d="_correctMonth";var Z9d="hasC";var e3d='change';var a3d='focus.editor-datetime click.editor-datetime';var w3d='off';var G3d='span';var x3d="-s";var I3d="emov";var S3d="seconds";var n3d="non";var K3d="parts";var o3d="tocompl";var P3d="au";var r3d="time";var R3d="keyup.editor-d";var o6x=D5Q;o6x+=d9Q;o6x+=K8c;o6x+=V2i;var P6x=X9Q;P6x+=c5Q;P6x+=w5Q;var d6x=R3d;d6x+=k4c;d6x+=r3d;var F6x=c5Q;F6x+=p5Q;var H6x=P3d;H6x+=o3d;H6x+=k7Q;var V6x=C0Q;V6x+=M9Q;V6x+=I5Q;var C6x=b3d;C6x+=J0Q;C6x+=M9Q;var h6x=X9Q;h6x+=c5Q;h6x+=w5Q;var U6x=X9Q;U6x+=h0Q;U6x+=y7Q;var that=this;var classPrefix=this[g0Q][z3d];var onChange=function(){var p3d="onC";var y6x=P4c;y6x+=T0Q;y6x+=U2c;var Y6x=p3d;Y6x+=W0Q;Y6x+=X3d;that[g0Q][Y6x][J0c](that,that[q3c][r1c][T3c](),that[D5Q][X9Q],that[q3c][y6x]);};if(!this[D5Q][K3d][U6x]){var q6x=B0c;q6x+=T0Q;q6x+=t4c;this[q3c][G1d][Z3c](q6x,n3c);}if(!this[D5Q][K3d][r3d]){var m6x=n3d;m6x+=d9Q;var W6x=g0Q;W6x+=D5Q;W6x+=D5Q;var g6x=M9Q;g6x+=k1d;g6x+=d9Q;this[q3c][g6x][W6x](Y3c,m6x);}if(!this[D5Q][K3d][S3d]){var T6x=Q0c;T6x+=w5Q;T6x+=d9Q;var J6x=y9c;J6x+=w5Q;var i6x=I5Q;i6x+=I3d;i6x+=d9Q;var D6x=x3d;D6x+=N1c;D6x+=B2G;D6x+=z4c;var A6x=g9i;A6x+=S5G;var f6x=X9Q;f6x+=c5Q;f6x+=w5Q;this[f6x][r3d][c3G](A6x+classPrefix+D6x)[i6x]();this[J6x][T6x][c3G](G3d)[N4i](H3Q)[d5c]();}this[W3d]();this[h6x][C6x][V6x](H6x,w3d)[B2G](a3d,function(){var j3d="taine";var u3d=":disa";var O6x=f7c;O6x+=s9c;O6x+=h7c;var E6x=y9c;E6x+=w5Q;var B6x=u3d;B6x+=x4c;B6x+=f0Q;var c6x=P4c;c6x+=l4i;c6x+=M9Q;var M6x=p5c;M6x+=p2G;var N6x=a3c;N6x+=j3d;N6x+=I5Q;if(that[q3c][N6x][j4c](M6x)||that[q3c][c6x][j4c](B6x)){return;}that[T3c](that[E6x][r1c][T3c](),x8c);that[O6x]();})[F6x](d6x,function(){var t3d=':visible';var v6x=m3d;v6x+=P4c;v6x+=A4c;var s6x=X9Q;s6x+=c5Q;s6x+=w5Q;if(that[s6x][v6x][j4c](t3d)){var r6x=H0Q;r6x+=p5Q;r6x+=T0Q;r6x+=U2c;var R6x=X9Q;R6x+=c5Q;R6x+=w5Q;var l6x=B6c;l6x+=h0Q;l6x+=r7Q;that[l6x](that[R6x][r6x][T3c](),x8c);}});this[P6x][R3c][B2G](e3d,o6x,function(){var v9d="setSeco";var s9d="eOutput";var d9d="ri";var E9d="tpu";var B9d="teOu";var c9d="_wri";var M9d='-minutes';var N9d="setUTCHours";var H9d="hours12";var C9d='-ampm';var h9d='-hours';var T9d="llYe";var J9d="setUTCFu";var i9d="_setT";var D9d="nder";var A9d="ala";var f9d="tC";var m9d='-year';var g9d="_set";var q9d="alander";var U9d="_setC";var y9d='-month';var Y9d="sCl";var Q9d="-seco";var L9d="positio";var Q1x=A7Q;Q1x+=L9d;Q1x+=p5Q;var L1x=R2c;L1x+=c5Q;L1x+=g0Q;L1x+=f1i;var j6x=Q9d;j6x+=p5Q;j6x+=X9Q;j6x+=D5Q;var u6x=k9d;u6x+=y4c;var S6x=Z9d;S6x+=t9G;S6x+=D5Q;var p6x=W0Q;p6x+=Y9d;p6x+=h0Q;p6x+=z3c;var select=$(this);var val=select[T3c]();if(select[D3c](classPrefix+y9d)){var z6x=U9d;z6x+=q9d;var b6x=g9d;b6x+=h6d;that[W9d](that[D5Q][G4c],val);that[b6x]();that[z6x]();}else if(select[p6x](classPrefix+m9d)){var n6x=Y3d;n6x+=f9d;n6x+=A9d;n6x+=D9d;var K6x=i9d;K6x+=f5Q;K6x+=r7Q;K6x+=d9Q;var X6x=J9d;X6x+=T9d;X6x+=w6d;that[D5Q][G4c][X6x](val);that[K6x]();that[n6x]();}else if(select[S6x](classPrefix+h9d)||select[D3c](classPrefix+C9d)){var w6x=Y3d;w6x+=V9d;w6x+=H0Q;w6x+=x9Q;if(that[D5Q][K3d][H9d]){var G6x=T0Q;G6x+=w5Q;var x6x=b5G;x6x+=r7Q;var I6x=B9Q;I6x+=O7c;var hours=$(that[q3c][R3c])[I6x](y7G+classPrefix+h9d)[x6x]()*H3Q;var pm=$(that[q3c][R3c])[Y7G](y7G+classPrefix+C9d)[T3c]()===G6x;that[D5Q][X9Q][N9d](hours===v3Q&&!pm?V3Q:pm&&hours!==v3Q?hours+v3Q:hours);}else{that[D5Q][X9Q][N9d](val);}that[w6x]();that[v3d](w8c);onChange();}else if(select[D3c](classPrefix+M9d)){var a6x=c9d;a6x+=B9d;a6x+=E9d;a6x+=M9Q;that[D5Q][X9Q][O9d](val);that[F9d]();that[a6x](w8c);onChange();}else if(select[u6x](classPrefix+j6x)){var e6x=W7Q;e6x+=d9d;e6x+=M9Q;e6x+=s9d;var t6x=v9d;t6x+=l9d;that[D5Q][X9Q][t6x](val);that[F9d]();that[e6x](w8c);onChange();}that[q3c][r1c][L1x]();that[Q1x]();})[B2G](g3c,function(e){var r5d="setUTCFullYear";var R5d="setUTCDate";var l5d="ateToUtc";var v5d="yea";var s5d="CMonth";var F5d="mont";var O5d="TCDate";var E5d='setSeconds';var B5d='setUTCHours';var c5d="CHo";var M5d="getUT";var N5d="getUTCHours";var H5d="Hours";var C5d='am';var T5d="econdsRange";var D5d="minutesRang";var W5d='minutes';var g5d='unit';var q5d="UTCMinutes";var y5d="iteOut";var Y5d="_wr";var k5d="_setCalander";var L5d="setUTCMont";var e9d="tTitle";var t9d="foc";var u9d="ef";var a9d="conL";var w9d="-i";var G9d="ght";var x9d="-iconR";var I9d='button';var S9d='select';var n9d="parentNode";var K9d="rCas";var X9d="toLow";var p9d="rge";var z9d="tar";var b9d="odeNam";var o9d="werCase";var P9d="toLo";var r9d="agation";var R9d="stopPr";var W1x=R9d;W1x+=Q1c;W1x+=r9d;var g1x=P9d;g1x+=o9d;var q1x=p5Q;q1x+=b9d;q1x+=d9Q;var U1x=z9d;U1x+=B5c;var y1x=j6c;y1x+=p9d;y1x+=M9Q;var Y1x=d9c;Y1x+=h0Q;Y1x+=p5Q;var Z1x=X9d;Z1x+=d9Q;Z1x+=K9d;Z1x+=d9Q;var k1x=N5G;k1x+=r4d;k1x+=d9Q;var d=that[D5Q][X9Q];var nodeName=e[f4G][k1x][Z1x]();var target=nodeName===Y1x?e[y1x][n9d]:e[U1x];nodeName=target[q1x][g1x]();if(nodeName===S9d){return;}e[W1x]();if(nodeName===I9d){var M1x=I3G;M1x+=O0Q;M1x+=D9c;var C1x=x9d;C1x+=H0Q;C1x+=G9d;var A1x=w9d;A1x+=a9d;A1x+=u9d;A1x+=M9Q;var f1x=x3c;f1x+=m4c;f1x+=x4c;f1x+=f0Q;var m1x=O5c;m1x+=p5Q;m1x+=M9Q;var button=$(target);var parent=button[m1x]();if(parent[D3c](f1x)&&!parent[D3c](j9d)){button[P3G]();return;}if(parent[D3c](classPrefix+A1x)){var h1x=t9d;h1x+=J0Q;h1x+=D5Q;var T1x=X9Q;T1x+=c5Q;T1x+=w5Q;var J1x=Y3d;J1x+=e9d;var i1x=X9Q;i1x+=H0Q;i1x+=d8i;i1x+=E0c;var D1x=L5d;D1x+=p4c;that[D5Q][G4c][D1x](that[D5Q][i1x][Q5d]()-H3Q);that[J1x]();that[k5d]();that[T1x][r1c][h1x]();}else if(parent[D3c](classPrefix+C1x)){var N1x=V9c;N1x+=g0Q;N1x+=J0Q;N1x+=D5Q;var H1x=H0Q;H1x+=Z5d;H1x+=J0Q;H1x+=M9Q;var V1x=X9Q;V1x+=u8c;that[W9d](that[D5Q][G4c],that[D5Q][G4c][Q5d]()+H3Q);that[l3d]();that[k5d]();that[V1x][H1x][N1x]();}else if(button[C7G](y7G+classPrefix+p1d)[M1x]){var z1x=Y5d;z1x+=y5d;z1x+=U5d;var b1x=E5c;b1x+=q5d;var o1x=s9c;o1x+=J0Q;o1x+=I5Q;o1x+=D5Q;var r1x=T0Q;r1x+=w5Q;var E1x=X9Q;E1x+=C0Q;E1x+=h0Q;var B1x=b5G;B1x+=V7G;B1x+=d9Q;var c1x=X9Q;c1x+=h0Q;c1x+=j6c;var val=button[c1x](B1x);var unit=button[E1x](g5d);if(unit===W5d){var d1x=p4c;d1x+=g6i;d1x+=k1i;d1x+=y4c;var F1x=X9Q;F1x+=H0Q;F1x+=m5d;F1x+=X9Q;var O1x=Z9d;O1x+=f5d;if(parent[O1x](F1x)&&parent[d1x](j9d)){var s1x=A7Q;s1x+=J2c;s1x+=V9d;s1x+=H1d;that[D5Q][A5d]=val;that[s1x]();return;}else{var v1x=D5d;v1x+=d9Q;that[D5Q][v1x]=e1c;}}if(unit===i5d){if(parent[D3c](J5d)&&parent[D3c](j9d)){var l1x=D5Q;l1x+=T5d;that[D5Q][l1x]=val;that[F9d]();return;}else{that[D5Q][h5d]=e1c;}}if(val===C5d){var R1x=V5d;R1x+=H5d;if(d[R1x]()>=v3Q){val=d[N5d]()-v3Q;}else{return;}}else if(val===r1x){if(d[N5d]()<v3Q){var P1x=M5d;P1x+=c5d;P1x+=q1i;P1x+=D5Q;val=d[P1x]()+v3Q;}else{return;}}var set=unit===o1x?B5d:unit===W5d?b1x:E5d;d[set](val);that[F9d]();that[z1x](w8c);onChange();}else{var G1x=p6d;G1x+=d9Q;var x1x=T0Q;x1x+=w6d;x1x+=M9Q;x1x+=D5Q;var I1x=X9Q;I1x+=h0Q;I1x+=r0Q;var S1x=J2c;S1x+=h3d;S1x+=O5d;var n1x=F5d;n1x+=p4c;var K1x=d5d;K1x+=N0Q;K1x+=s5d;var X1x=v5d;X1x+=I5Q;if(!d){var p1x=A7Q;p1x+=X9Q;p1x+=l5d;d=that[p1x](new Date());}d[R5d](H3Q);d[r5d](button[i1c](X1x));d[K1x](button[i1c](n1x));d[S1x](button[i1c](I1x));that[v3d](w8c);if(!that[D5Q][x1x][G1x]){setTimeout(function(){that[P5d]();},d3Q);}else{that[k5d]();}onChange();}}else{var a1x=V9c;a1x+=g0Q;a1x+=f1i;var w1x=P4c;w1x+=l4i;w1x+=M9Q;that[q3c][w1x][a1x]();}});},_compareDates:function(a,b){var b5d="_dateToUtcString";var o5d="Str";var u1x=V3d;u1x+=g0Q;u1x+=o5d;u1x+=y5c;return this[u1x](a)===this[b5d](b);},_correctMonth:function(date,month){var w5d="setUTCMonth";var G5d="setUTCD";var x5d="Month";var I5d="sIn";var S5d="_day";var n5d="Year";var K5d="UTCFull";var p5d="CMont";var z5d="etUT";var L3x=D5Q;L3x+=z5d;L3x+=p5d;L3x+=p4c;var e1x=B5c;e1x+=X5d;e1x+=g3d;var t1x=O0Q;t1x+=K4c;t1x+=K5d;t1x+=n5d;var j1x=S5d;j1x+=I5d;j1x+=x5d;var days=this[j1x](date[t1x](),month);var correctDays=date[e1x]()>days;date[L3x](month);if(correctDays){var Q3x=G5d;Q3x+=h0Q;Q3x+=y7Q;date[Q3x](days);date[w5d](month);}},_daysInMonth:function(year,month){var I3Q=31;var S3Q=30;var n3Q=29;var K3Q=28;var isLeap=year%c3Q===V3Q&&(year%t3Q!==V3Q||year%L9Q===V3Q);var months=[I3Q,isLeap?n3Q:K3Q,I3Q,S3Q,I3Q,S3Q,I3Q,I3Q,S3Q,I3Q,S3Q,I3Q];return months[month];},_dateToUtc:function(s){var L0d="getMinutes";var e5d="getHours";var j5d="etMonth";var u5d="getD";var a5d="Se";var Y3x=B5c;Y3x+=a5d;Y3x+=N5c;Y3x+=l9d;var Z3x=u5d;Z3x+=h0Q;Z3x+=y7Q;var k3x=O0Q;k3x+=j5d;return new Date(Date[X5d](s[t5d](),s[k3x](),s[Z3x](),s[e5d](),s[L0d](),s[Y3x]()));},_dateToUtcString:function(d){var k0d="getUTCDate";var Q0d="getUTCFullYear";var U3x=A7Q;U3x+=T0Q;U3x+=h0Q;U3x+=X9Q;var y3x=K7G;y3x+=p2i;return d[Q0d]()+L4i+this[y3x](d[Q5d]()+H3Q)+L4i+this[U3x](d[k0d]());},_hide:function(){var q0d='click.';var y0d="ody_C";var Y0d="iv.DTE_B";var f3x=c5Q;f3x+=R2c;f3x+=R2c;var m3x=X5Q;m3x+=c5Q;m3x+=X9Q;m3x+=r0Q;var W3x=Z0d;W3x+=S5G;var g3x=X9Q;g3x+=Y0d;g3x+=y0d;g3x+=b8G;var q3x=X9Q;q3x+=c5Q;q3x+=w5Q;var namespace=this[D5Q][W2i];this[q3x][R3c][o9c]();$(window)[I8G](y7G+namespace);$(document)[I8G](U0d+namespace);$(g3x)[I8G](W3x+namespace);$(m3x)[f3x](q0d+namespace);},_hours24To12:function(val){return val===V3Q?v3Q:val>v3Q?val-v3Q:val;},_htmlDay:function(day){var o0d="day";var P0d='" data-day="';var r0d="month";var R0d="year";var s0d='" class="';var d0d="cte";var F0d="ele";var O0d='now';var E0d="today";var B0d='<td class="empty"></td>';var M0d="lectab";var N0d="disabl";var H0d="lecte";var V0d="d data-day";var C0d="<t";var h0d="oi";var T0d="on\" ";var J0d="butt";var i0d="ype=\"";var D0d="-day\" t";var A0d="-year=\"";var f0d="-month";var m0d="\" da";var g0d="</butto";var v3x=g0d;v3x+=p5Q;v3x+=E6c;var s3x=X9Q;s3x+=h0Q;s3x+=r0Q;var d3x=z6c;d3x+=W0d;var F3x=R6c;F3x+=E6c;var O3x=m0d;O3x+=j6c;O3x+=f0d;O3x+=I8i;var E3x=p2c;E3x+=j6c;E3x+=A0d;var B3x=D0d;B3x+=i0d;B3x+=J0d;B3x+=T0d;var c3x=S2i;c3x+=h0d;c3x+=p5Q;var M3x=p2c;M3x+=r0Q;var N3x=C0d;N3x+=V0d;N3x+=I8i;var C3x=J2c;C3x+=H0d;C3x+=X9Q;var J3x=N0d;J3x+=d9Q;J3x+=X9Q;var i3x=h1d;i3x+=C1d;var D3x=J2c;D3x+=M0d;D3x+=K8c;var A3x=c0d;A3x+=r0Q;if(day[A3x]){return B0d;}var classes=[D3x];var classPrefix=this[g0Q][i3x];if(day[J3x]){var T3x=T0Q;T3x+=J0Q;T3x+=V8i;classes[T3x](J5d);}if(day[E0d]){var h3x=T0Q;h3x+=J0Q;h3x+=D5Q;h3x+=p4c;classes[h3x](O0d);}if(day[C3x]){var H3x=D5Q;H3x+=F0d;H3x+=d0d;H3x+=X9Q;var V3x=T0Q;V3x+=f1i;V3x+=p4c;classes[V3x](H3x);}return N3x+day[M3x]+s0d+classes[c3x](E1c)+l1c+v0d+classPrefix+l0d+classPrefix+B3x+E3x+day[R0d]+O3x+day[r0d]+P0d+day[o0d]+F3x+d3x+day[s3x]+S1c+v3x+b0d;},_htmlMonth:function(year,month){var c7d='</table>';var N7d="_htmlMonthHead";var H7d='<thead>';var C7d='-iconRight';var h7d='-iconLeft';var T7d="um";var J7d=" week";var D7d="_htmlWeekOfYear";var f7d="tr>";var m7d="_compareDates";var W7d="_compareDate";var g7d="leDays";var q7d="TCDay";var U7d="htmlDay";var Y7d="setSeconds";var Z7d="our";var k7d="TCH";var Q7d="maxDate";var e0d="firstDay";var t0d="getUTCDay";var j0d="_daysInMonth";var u0d="Utc";var a0d="teTo";var w0d="firstD";var G0d="refix";var x0d="ssP";var I0d="-ta";var S0d="Number";var n0d="eek";var K0d="showW";var X0d="ead";var z0d="tbody";var o3Q=23;var U9x=z6c;U9x+=z0d;U9x+=E6c;var y9x=p0d;y9x+=p4c;y9x+=X0d;y9x+=E6c;var Y9x=R6c;Y9x+=E6c;var w3x=K0d;w3x+=n0d;w3x+=S0d;var G3x=I0d;G3x+=X5Q;G3x+=K8c;var x3x=e3c;x3x+=x0d;x3x+=G0d;var r3x=w0d;r3x+=E0c;var R3x=S0Q;R3x+=N0Q;R3x+=V9Q;var l3x=r7c;l3x+=h0Q;l3x+=a0d;l3x+=u0d;var now=this[l3x](new Date()),days=this[j0d](year,month),before=new Date(Date[R3x](year,month,H3Q))[t0d](),data=[],row=[];if(this[g0Q][r3x]>V3Q){before-=this[g0Q][e0d];if(before<V3Q){before+=O3Q;}}var cells=days+before,after=cells;while(after>O3Q){after-=O3Q;}cells+=O3Q-after;var minDate=this[g0Q][L7d];var maxDate=this[g0Q][Q7d];if(minDate){var P3x=d5d;P3x+=k7d;P3x+=Z7d;P3x+=D5Q;minDate[P3x](V3Q);minDate[O9d](V3Q);minDate[Y7d](V3Q);}if(maxDate){var o3x=E5c;o3x+=y7d;maxDate[o3x](o3Q);maxDate[O9d](u3Q);maxDate[Y7d](u3Q);}for(var i=V3Q,r=V3Q;i<cells;i++){var S3x=A7Q;S3x+=U7d;var n3x=T0Q;n3x+=J0Q;n3x+=D5Q;n3x+=p4c;var K3x=B5c;K3x+=S0Q;K3x+=q7d;var X3x=e6G;X3x+=I5Q;X3x+=h1G;var p3x=Q0G;p3x+=X5Q;p3x+=g7d;var z3x=W7d;z3x+=D5Q;var b3x=S0Q;b3x+=N0Q;b3x+=V9Q;var day=new Date(Date[b3x](year,month,H3Q+(i-before))),selected=this[D5Q][X9Q]?this[m7d](day,this[D5Q][X9Q]):x8c,today=this[z3x](day,now),empty=i<before||i>=days+before,disabled=minDate&&day<minDate||maxDate&&day>maxDate;var disableDays=this[g0Q][p3x];if($[X3x](disableDays)&&$[I9G](day[K3x](),disableDays)!==-H3Q){disabled=w8c;}else if(typeof disableDays===h5p.A9Q&&disableDays(day)===w8c){disabled=w8c;}var dayConfig={day:H3Q+(i-before),month:month,year:year,selected:selected,today:today,disabled:disabled,empty:empty};row[n3x](this[S3x](dayConfig));if(++r===O3Q){var I3x=z6c;I3x+=f7d;if(this[g0Q][A7d]){row[h0c](this[D7d](i-before,month,year));}data[X8c](I3x+row[e7G](T8c)+i7d);row=[];r=V3Q;}}var classPrefix=this[g0Q][x3x];var className=classPrefix+G3x;if(this[g0Q][w3x]){var a3x=J7d;a3x+=J1i;a3x+=T7d;a3x+=q5G;className+=a3x;}if(minDate){var j3x=X9Q;j3x+=H0Q;j3x+=d8i;j3x+=E0c;var u3x=R2c;u3x+=H0Q;u3x+=p5Q;u3x+=X9Q;var underMin=minDate>=new Date(Date[X5d](year,month,H3Q,V3Q,V3Q,V3Q));this[q3c][X1c][u3x](X4i+classPrefix+h7d)[Z3c](j3x,underMin?n3c:U5c);}if(maxDate){var Z9x=X5Q;Z9x+=e9G;var k9x=x3c;k9x+=V8G;k9x+=r0Q;var Q9x=g9i;Q9x+=S5G;var L9x=B9Q;L9x+=p5Q;L9x+=X9Q;var e3x=X9Q;e3x+=c5Q;e3x+=w5Q;var t3x=S0Q;t3x+=C3d;var overMax=maxDate<new Date(Date[t3x](year,month+H3Q,H3Q,V3Q,V3Q,V3Q));this[e3x][X1c][L9x](Q9x+classPrefix+C7d)[Z3c](k9x,overMax?n3c:Z9x);}return V7d+className+Y9x+H7d+this[N7d]()+y9x+U9x+data[e7G](T8c)+M7d+c7d;},_htmlMonthHead:function(){var s7d='<th>';var d7d="/th";var F7d='<th></th>';var B7d="irstDay";var f9x=S2i;f9x+=c5Q;f9x+=H0Q;f9x+=p5Q;var g9x=H0Q;g9x+=J6d;g9x+=p5Q;var q9x=R2c;q9x+=B7d;var a=[];var firstDay=this[g0Q][q9x];var i18n=this[g0Q][g9x];var dayName=function(day){var O7d="days";var E7d="we";var W9x=E7d;W9x+=d9Q;W9x+=z2c;W9x+=O7d;day+=firstDay;while(day>=O3Q){day-=O3Q;}return i18n[W9x][day];};if(this[g0Q][A7d]){a[X8c](F7d);}for(var i=V3Q;i<O3Q;i++){var m9x=z6c;m9x+=d7d;m9x+=E6c;a[X8c](s7d+dayName(i)+m9x);}return a[f9x](T8c);},_htmlWeekOfYear:function(d,m,y){var z7d='<td class="';var b7d="ceil";var o7d="Dat";var P7d="etD";var r7d="tD";var R7d="k\">";var l7d="-wee";var v7d="td";var U9Q=86400000;var T9x=A6c;T9x+=v7d;T9x+=E6c;var J9x=l7d;J9x+=R7d;var i9x=O0Q;i9x+=d9Q;i9x+=r7d;i9x+=E0c;var D9x=O0Q;D9x+=P7d;D9x+=C0Q;D9x+=d9Q;var A9x=D5Q;A9x+=K4c;A9x+=o7d;A9x+=d9Q;var date=new Date(y,m,d,V3Q,V3Q,V3Q,V3Q);date[A9x](date[D9x]()+c3Q-(date[i9x]()||O3Q));var oneJan=new Date(y,V3Q,H3Q);var weekNum=Math[b7d](((date-oneJan)/U9Q+H3Q)/O3Q);return z7d+this[g0Q][z3d]+J9x+weekNum+T9x;},_options:function(selector,values,labels){var S7d='</option>';var n7d='<option value="';var K7d="ect.";var p7d="ssPref";var M9x=K8c;M9x+=f2d;var N9x=d9Q;N9x+=w5Q;N9x+=J9G;N9x+=r0Q;var H9x=e3c;H9x+=p7d;H9x+=X7d;var V9x=D5Q;V9x+=P9c;V9x+=K7d;var C9x=R2c;C9x+=H0Q;C9x+=O7c;var h9x=X9Q;h9x+=c5Q;h9x+=w5Q;if(!labels){labels=values;}var select=this[h9x][R3c][C9x](V9x+this[g0Q][H9x]+L4i+selector);select[N9x]();for(var i=V3Q,ien=values[M9x];i<ien;i++){var B9x=R6c;B9x+=E6c;var c9x=o7c;c9x+=p5Q;c9x+=X9Q;select[c9x](n7d+values[i]+B9x+labels[i]+S7d);}},_optionSet:function(selector,val){var w7d="parent";var G7d='select.';var x7d="dren";var I7d="know";var s9x=Q2c;s9x+=I7d;s9x+=p5Q;var d9x=M9Q;d9x+=d9Q;d9x+=z0Q;var F9x=p4c;F9x+=M9Q;F9x+=j5c;var O9x=F1d;O9x+=p5Q;var E9x=i6G;E9x+=x7d;var select=this[q3c][R3c][Y7G](G7d+this[g0Q][z3d]+L4i+selector);var span=select[w7d]()[E9x](O9x);select[T3c](val);var selected=select[Y7G](a7d);span[F9x](selected[I8c]!==V3Q?selected[d9x]():this[g0Q][Z1c][s9x]);},_optionsTime:function(unit,count,val,allowed,range){var c4p='</th></tr></thead>';var M4p='<thead><tr><th colspan="';var N4p="floor";var H4p='</tbody></thead><table class="';var V4p='<tr>';var C4p="\"><tbod";var h4p="space";var T4p="-no";var J4p="amPm";var i4p="<tr";var D4p="r>";var A4p="/tr>";var k4p='-table';var Q4p="fix";var L4p="classP";var e7d="assPref";var j7d="y>";var u7d="<tbod";var E3Q=6;var j9x=p0d;j9x+=h0Q;j9x+=n8i;j9x+=E6c;var u9x=u7d;u9x+=j7d;var a9x=R6c;a9x+=E6c;var w9x=d9Q;w9x+=t7d;w9x+=r0Q;var R9x=w7Q;R9x+=e7d;R9x+=X7d;var l9x=K7G;l9x+=p2i;var v9x=L4p;v9x+=I5Q;v9x+=d9Q;v9x+=Q4p;var classPrefix=this[g0Q][v9x];var container=this[q3c][R3c][Y7G](X4i+classPrefix+L4i+unit);var i,j;var render=count===v3Q?function(i){return i;}:this[l9x];var classPrefix=this[g0Q][R9x];var className=classPrefix+k4p;var i18n=this[g0Q][Z1c];if(!container[I8c]){return;}var a=T8c;var span=d3Q;var button=function(value,label,className){var f4p='<span>';var m4p='" data-value="';var W4p='-day" type="button" data-unit="';var g4p='<td class="selectable ';var q4p="isabled";var U4p=" d";var y4p='pm';var Y4p="ton>";var Z4p="</but";var z9x=Z4p;z9x+=Y4p;var b9x=R6c;b9x+=E6c;var o9x=R6c;o9x+=E6c;var r9x=h0Q;r9x+=w5Q;if(count===v3Q&&val>=v3Q&&typeof value===U9i){value+=v3Q;}var selected=val===value||value===r9x&&val<v3Q||value===y4p&&val>=v3Q?f6d:T8c;if(allowed&&$[I9G](value,allowed)===-H3Q){var P9x=U4p;P9x+=q4p;selected+=P9x;}if(className){selected+=E1c+className;}return g4p+selected+o9x+v0d+classPrefix+l0d+classPrefix+W4p+unit+m4p+value+b9x+f4p+label+S1c+z9x+b0d;};if(count===v3Q){var S9x=z6c;S9x+=A4p;var n9x=T0Q;n9x+=w5Q;var K9x=z6c;K9x+=M9Q;K9x+=D4p;var X9x=h0Q;X9x+=w5Q;var p9x=i4p;p9x+=E6c;a+=p9x;for(i=H3Q;i<=E3Q;i++){a+=button(i,render(i));}a+=button(X9x,i18n[J4p][V3Q]);a+=i7d;a+=K9x;for(i=O3Q;i<=v3Q;i++){a+=button(i,render(i));}a+=button(n9x,i18n[J4p][H3Q]);a+=S9x;span=O3Q;}else if(count===b3Q){var c=V3Q;for(j=V3Q;j<c3Q;j++){var I9x=z6c;I9x+=M9Q;I9x+=I5Q;I9x+=E6c;a+=I9x;for(i=V3Q;i<E3Q;i++){a+=button(c,render(c));c++;}a+=i7d;}span=E3Q;}else{var G9x=T4p;G9x+=h4p;G9x+=C4p;G9x+=j7d;var x9x=A6c;x9x+=d9G;x9x+=E6c;a+=V4p;for(j=V3Q;j<j3Q;j+=d3Q){a+=button(j,render(j),j9d);}a+=x9x;a+=H4p+className+E1c+className+G9x;var start=range!==e1c?range:Math[N4p](val/d3Q)*d3Q;a+=V4p;for(j=start+H3Q;j<start+d3Q;j++){a+=button(j,render(j));}a+=i7d;span=E3Q;}container[w9x]()[Y7c](V7d+className+l1c+M4p+span+a9x+i18n[unit]+c4p+u9x+a+M7d+j9x);},_optionsTitle:function(){var P4p="yearRange";var r4p="axDa";var R4p="ullYe";var l4p="etF";var v4p="lY";var s4p="yearR";var d4p="lYe";var F4p="Ful";var O4p="nths";var E4p="_o";var B4p="ye";var U5x=B4p;U5x+=w6d;var y5x=E4p;y5x+=J9G;y5x+=l7Q;y5x+=D5Q;var Y5x=V2c;Y5x+=O4p;var Z5x=A7Q;Z5x+=h5i;var k5x=B5c;k5x+=F4p;k5x+=d4p;k5x+=w6d;var Q5x=s4p;Q5x+=h0Q;Q5x+=X3d;var L5x=B5c;L5x+=F4p;L5x+=v4p;L5x+=y1d;var e9x=O0Q;e9x+=l4p;e9x+=R4p;e9x+=w6d;var t9x=w5Q;t9x+=r4p;t9x+=M9Q;t9x+=d9Q;var i18n=this[g0Q][Z1c];var min=this[g0Q][L7d];var max=this[g0Q][t9x];var minYear=min?min[e9x]():e1c;var maxYear=max?max[L5x]():e1c;var i=minYear!==e1c?minYear:new Date()[t5d]()-this[g0Q][Q5x];var j=maxYear!==e1c?maxYear:new Date()[k5x]()+this[g0Q][P4p];this[Z5x](o4p,this[b4p](V3Q,s3Q),i18n[Y5x]);this[y5x](U5x,this[b4p](i,j));},_pad:function(i){var z4p='0';return i<d3Q?z4p+i:i;},_position:function(){var n4p="scrollTop";var K4p="ffse";var X4p="erWidth";var p4p="widt";var h5x=p4p;h5x+=p4c;var i5x=M9Q;i5x+=c5Q;i5x+=T0Q;var D5x=F4G;D5x+=X4p;var A5x=g0Q;A5x+=z3c;var f5x=X9Q;f5x+=c5Q;f5x+=w5Q;var m5x=a3c;m5x+=j6c;m5x+=P4c;m5x+=A4c;var W5x=X9Q;W5x+=u8c;var g5x=c5Q;g5x+=K4p;g5x+=M9Q;var q5x=P4c;q5x+=U5d;var offset=this[q3c][q5x][g5x]();var container=this[W5x][m5x];var inputHeight=this[f5x][r1c][V6G]();container[A5x]({top:offset[n8G]+inputHeight,left:offset[q9G]})[M3G](K3c);var calHeight=container[V6G]();var calWidth=container[D5x]();var scrollTop=$(window)[n4p]();if(offset[i5x]+inputHeight+calHeight-scrollTop>$(window)[C6G]()){var T5x=M9Q;T5x+=c5Q;T5x+=T0Q;var J5x=g0Q;J5x+=z3c;var newTop=offset[n8G]-calHeight;container[J5x](T5x,newTop<V3Q?V3Q:newTop);}if(calWidth+offset[q9G]>$(window)[h5x]()){var C5x=h7c;C5x+=Y9G;var newLeft=$(window)[C5x]()-calWidth;container[Z3c](D9G,newLeft<V3Q?V3Q:newLeft);}},_range:function(start,end,inc){var a=[];if(!inc){inc=H3Q;}for(var i=start;i<=end;i+=inc){var V5x=T0Q;V5x+=J0Q;V5x+=D5Q;V5x+=p4c;a[V5x](i);}return a;},_setCalander:function(){var G4p="dar";var x4p="_html";var I4p="TCFullY";var S4p="getU";if(this[D5Q][G4c]){var c5x=S4p;c5x+=I4p;c5x+=y1d;var M5x=x4p;M5x+=R0Q;M5x+=B2G;M5x+=D9c;var N5x=d9Q;N5x+=t7d;N5x+=r0Q;var H5x=u7G;H5x+=I4c;H5x+=G4p;this[q3c][H5x][N5x]()[Y7c](this[M5x](this[D5Q][G4c][c5x](),this[D5Q][G4c][Q5d]()));}},_setTitle:function(){var t4p="_optionSet";var j4p="getUTCMont";var u4p="_opti";var s5x=B5c;s5x+=S0Q;s5x+=w4p;s5x+=a4p;var d5x=B0c;d5x+=T0Q;d5x+=X6c;d5x+=r0Q;var F5x=r0Q;F5x+=d9Q;F5x+=h0Q;F5x+=I5Q;var O5x=u4p;O5x+=B2G;O5x+=o3i;var E5x=j4p;E5x+=p4c;var B5x=B0c;B5x+=T0Q;B5x+=r7Q;B5x+=E0c;this[t4p](o4p,this[D5Q][B5x][E5x]());this[O5x](F5x,this[D5Q][d5x][s5x]());},_setTime:function(){var A2p='hours';var f2p="_optionsTime";var q2p="rs12";var U2p="rsAvailabl";var y2p="hou";var Y2p="nsTi";var Z2p="_optio";var k2p="utes";var Q2p="getUTCMi";var L2p="minut";var e4p="etSeco";var S5x=O0Q;S5x+=e4p;S5x+=O7c;S5x+=D5Q;var n5x=A7Q;n5x+=h5i;n5x+=N0Q;n5x+=H1d;var K5x=L2p;K5x+=b8c;var X5x=Q2p;X5x+=p5Q;X5x+=k2p;var p5x=q3d;p5x+=J0Q;p5x+=M9Q;p5x+=b8c;var z5x=Z2p;z5x+=Y2p;z5x+=x9Q;var b5x=y2p;b5x+=U2p;b5x+=d9Q;var o5x=y2p;o5x+=q2p;var P5x=A3d;P5x+=I5Q;P5x+=M9Q;P5x+=D5Q;var v5x=B5c;v5x+=y7d;var that=this;var d=this[D5Q][X9Q];var hours=d?d[v5x]():V3Q;var allowed=function(prop){var m2p="ailab";var W2p="Av";var g2p="vail";var r5x=M5i;r5x+=W6c;r5x+=x9Q;r5x+=L7c;var R5x=h5c;R5x+=g2p;R5x+=f3c;R5x+=d9Q;var l5x=W2p;l5x+=m2p;l5x+=r7Q;l5x+=d9Q;return that[g0Q][prop+l5x]?that[g0Q][prop+R5x]:that[b4p](V3Q,u3Q,that[g0Q][prop+r5x]);};this[f2p](A2p,this[D5Q][P5x][o5x]?v3Q:b3Q,hours,this[g0Q][b5x]);this[z5x](p5x,j3Q,d?d[X5x]():V3Q,allowed(K5x),this[D5Q][A5d]);this[n5x](i5d,j3Q,d?d[S5x]():V3Q,allowed(i5d),this[D5Q][h5d]);},_show:function(){var V2p="_position";var C2p="l.";var h2p="crol";var T2p="z";var J2p=" res";var i2p="Body_Content";var D2p="div.DTE";var t5x=c5Q;t5x+=p5Q;var u5x=Z0d;u5x+=S5G;var a5x=D2p;a5x+=A7Q;a5x+=i2p;var G5x=J2p;G5x+=H0Q;G5x+=T2p;G5x+=R3G;var x5x=D5Q;x5x+=h2p;x5x+=C2p;var I5x=m1c;I5x+=F1d;I5x+=g0Q;I5x+=d9Q;var that=this;var namespace=this[D5Q][I5x];this[V2p]();$(window)[B2G](x5x+namespace+G5x+namespace,function(){var N2p="sition";var H2p="po";var w5x=A7Q;w5x+=H2p;w5x+=N2p;that[w5x]();});$(a5x)[B2G](u5x+namespace,function(){var M2p="_posit";var j5x=M2p;j5x+=l7Q;that[j5x]();});$(document)[t5x](U0d+namespace,function(e){var B2p="keyCo";var c2p="eyCode";var F3Q=9;var L0x=z2c;L0x+=c2p;var e5x=B2p;e5x+=c2c;if(e[r9G]===F3Q||e[e5x]===X3Q||e[L0x]===l3Q){that[P5d]();}});setTimeout(function(){var E2p="bod";var Z0x=e4G;Z0x+=g0Q;Z0x+=z2c;Z0x+=S5G;var k0x=c5Q;k0x+=p5Q;var Q0x=E2p;Q0x+=r0Q;$(Q0x)[k0x](Z0x+namespace,function(e){var O2p="ntaine";var W0x=b3d;W0x+=J0Q;W0x+=M9Q;var g0x=r7Q;g0x+=S3G;g0x+=M9Q;g0x+=p4c;var q0x=N5c;q0x+=O2p;q0x+=I5Q;var U0x=X9Q;U0x+=c5Q;U0x+=w5Q;var y0x=B9Q;y0x+=r7Q;y0x+=y7Q;y0x+=I5Q;var Y0x=T0Q;Y0x+=w6d;Y0x+=I4c;Y0x+=V9i;var parents=$(e[f4G])[Y0x]();if(!parents[y0x](that[U0x][q0x])[g0x]&&e[f4G]!==that[q3c][W0x][V3Q]){that[P5d]();}});},d3Q);},_writeOutput:function(focus){var l2p="_pad";var v2p="momentStrict";var s2p="momentLocale";var d2p="nth";var F2p="Mo";var i0x=b5G;i0x+=r7Q;var D0x=V5d;D0x+=g3d;var A0x=V5d;A0x+=F2p;A0x+=d2p;var f0x=O5Q;f0x+=h3d;f0x+=w4p;f0x+=a4p;var m0x=w5Q;m0x+=u8c;m0x+=d9Q;m0x+=L7c;var date=this[D5Q][X9Q];var out=window[N1d]?window[m0x][E3d](date,undefined,this[g0Q][s2p],this[g0Q][v2p])[M1d](this[g0Q][M1d]):date[f0x]()+L4i+this[l2p](date[A0x]()+H3Q)+L4i+this[l2p](date[D0x]());this[q3c][r1c][i0x](out);if(focus){var T0x=V9c;T0x+=T4i;var J0x=H0Q;J0x+=p5Q;J0x+=T0Q;J0x+=U2c;this[q3c][J0x][T0x]();}}});Editor[h0x][K1d]=V3Q;Editor[z6d][C0x]={classPrefix:R2p,disableDays:e1c,firstDay:H3Q,format:V0x,hoursAvailable:e1c,i18n:Editor[H0x][Z1c][r2p],maxDate:e1c,minDate:e1c,minutesAvailable:e1c,minutesIncrement:H3Q,momentStrict:w8c,momentLocale:P2p,onChange:function(){},secondsAvailable:e1c,secondsIncrement:H3Q,showWeekNumber:x8c,yearRange:d3Q};(function(){var V9p="uploadMany";var A9p='div.rendered';var w3p="_picker";var o3p="epicker";var s3p="tepicker";var E3p="icker";var N3p="datepicker";var i3p="cker";var U3p='input:checked';var t1p=" /";var I1p="inpu";var S1p="_addOptions";var X1p="checked";var c1p='input:last';var M1p='<label for="';var H1p='_';var V1p='<input id="';var C1p='<div>';var i1p="checkbox";var D1p="_inp";var y1p="separator";var Y1p="multiple";var u6p='change.dte';var w6p="Id";var X6p="_ad";var b6p="_editor_val";var O6p="npu";var c6p="feId";var M6p="textarea";var H6p="nput";var V6p='<input/>';var C6p='text';var T6p="<in";var J6p="tend";var A6p="_val";var f6p="hidden";var m6p="_i";var W6p="prop";var g6p="_in";var U6p="disab";var y6p="_inpu";var Y6p="fieldType";var L6p="dC";var B8p="_enabled";var Y8p=" />";var L8p="fin";var w2p="_input";var K2p="eldT";var X2p="eadon";var p2p="word";var z2p="pass";var b2p="ect";var o2p="sel";var p6Q=J1c;p6Q+=I4c;p6Q+=X9Q;var z6Q=g4c;z6Q+=v2G;z6Q+=p2i;var E8Q=d9Q;E8Q+=R9Q;E8Q+=M9Q;E8Q+=Z2c;var B8Q=X9Q;B8Q+=h0Q;B8Q+=M9Q;B8Q+=d9Q;var R2Q=B9G;R2Q+=y7Q;R2Q+=p5Q;R2Q+=X9Q;var l2Q=I5Q;l2Q+=p2i;l2Q+=B7G;var t4Q=W3i;t4Q+=X9Q;var U4Q=o2p;U4Q+=b2p;var Q4Q=W3i;Q4Q+=X9Q;var u7x=d9Q;u7x+=R9Q;u7x+=y7Q;u7x+=O7c;var a7x=z2p;a7x+=p2p;var K7x=M9Q;K7x+=d9Q;K7x+=R9Q;K7x+=M9Q;var R7x=R1G;R7x+=O7c;var l7x=I5Q;l7x+=X2p;l7x+=s0Q;var M7x=w5Q;M7x+=g6c;M7x+=H2c;var N0x=B9Q;N0x+=K2p;N0x+=g2c;N0x+=b8c;var fieldTypes=Editor[N0x];function _buttonText(conf,text){var G2p="uploadText";var x2p="e...";var I2p="e fi";var S2p="Choos";var n2p="div.upload bu";var c0x=n2p;c0x+=N9G;if(text===e1c||text===undefined){var M0x=S2p;M0x+=I2p;M0x+=r7Q;M0x+=x2p;text=conf[G2p]||M0x;}conf[w2p][Y7G](c0x)[n5c](text);}function _commonUpload(editor,conf,dropCallback,multiple){var e8p="oDrop";var t8p="endere";var j8p="iv.r";var I8p='dragover';var n8p='dragleave dragexit';var K8p='over';var P8p='div.drop';var r8p=" span";var R8p="div.dro";var l8p="agDropT";var v8p="dr";var s8p=" file here to upload";var d8p="Drag and drop a";var F8p="dro";var O8p="dragDrop";var E8p="FileReader";var c8p='<div class="rendered"/>';var M8p='<div class="cell">';var N8p='<div class="cell limitHide">';var H8p='<div class="row second">';var V8p='<div class="cell clearValue">';var C8p='/>';var h8p='<div class="cell upload limitHide">';var T8p='<div class="row">';var J8p='<div class="editor_upload">';var i8p="nInte";var D8p="butto";var A8p="v class=\"eu_table\"";var f8p=" class=";var m8p="<bu";var W8p="\" ";var g8p="le\" ";var q8p="<input type=\"fi";var U8p="ipl";var y8p="ult";var Z8p="ass=\"drop\"><span/></div>";var k8p="<div cl";var Q8p="/div";var e2p="learValue button";var t2p="v.c";var j2p="e]";var u2p="=fil";var a2p="put[type";var h7x=d8c;h7x+=D7G;h7x+=O0Q;h7x+=d9Q;var T7x=c5Q;T7x+=p5Q;var J7x=P4c;J7x+=a2p;J7x+=u2p;J7x+=j2p;var i7x=B9Q;i7x+=p5Q;i7x+=X9Q;var A7x=w7Q;A7x+=t9Q;A7x+=z2c;var f7x=c5Q;f7x+=p5Q;var m7x=X9Q;m7x+=H0Q;m7x+=t2p;m7x+=e2p;var W7x=L8p;W7x+=X9Q;var z0x=z6c;z0x+=g1d;z0x+=r0c;var b0x=z6c;b0x+=Q8p;b0x+=E6c;var o0x=l0c;o0x+=D6c;var P0x=z6c;P0x+=g1d;P0x+=E2G;P0x+=E6c;var r0x=k8p;r0x+=Z8p;var R0x=z6c;R0x+=N6c;R0x+=M6c;var l0x=R6c;l0x+=Y8p;var v0x=A6c;v0x+=X9Q;v0x+=H0Q;v0x+=D6c;var s0x=w5Q;s0x+=y8p;s0x+=U8p;s0x+=d9Q;var d0x=q8p;d0x+=g8p;var F0x=W8p;F0x+=N6c;F0x+=E6c;var O0x=m8p;O0x+=N9G;O0x+=f8p;O0x+=R6c;var E0x=a6c;E0x+=A8p;E0x+=E6c;var B0x=D8p;B0x+=i8p;B0x+=N9i;B0x+=P9G;var btnClass=editor[P3c][B3G][B0x];var container=$(J8p+E0x+T8p+h8p+O0x+btnClass+F0x+d0x+(multiple?s0x:T8c)+C8p+v0x+V8p+v0d+btnClass+l0x+a1c+R0x+H8p+N8p+r0x+P0x+M8p+c8p+o0x+b0x+a1c+z0x);conf[w2p]=container;conf[B8p]=w8c;_buttonText(conf);if(window[E8p]&&conf[O8p]!==x8c){var k7x=w7Q;k7x+=N1G;var L7x=c5Q;L7x+=r9c;var t0x=c5Q;t0x+=p5Q;var u0x=c5Q;u0x+=p5Q;var I0x=F8p;I0x+=T0Q;var S0x=R2c;S0x+=H0Q;S0x+=O7c;var n0x=d8p;n0x+=s8p;var K0x=v8p;K0x+=l8p;K0x+=J1c;var X0x=R8p;X0x+=T0Q;X0x+=r8p;var p0x=R2c;p0x+=H0Q;p0x+=p5Q;p0x+=X9Q;container[p0x](X0x)[L4G](conf[K0x]||n0x);var dragDrop=container[S0x](P8p);dragDrop[B2G](I0x,function(e){var X8p="upload";var p8p="originalEve";var z8p="sfer";var b8p="ran";var o8p="ena";var x0x=A7Q;x0x+=o8p;x0x+=G3c;if(conf[x0x]){var a0x=d5c;a0x+=Z9c;var w0x=a4d;w0x+=b8p;w0x+=z8p;var G0x=p8p;G0x+=L7c;Editor[X8p](editor,conf,e[G0x][w0x][s8c],_buttonText,dropCallback);dragDrop[a0x](K8p);}return x8c;})[u0x](n8p,function(e){var S8p="_enab";var j0x=S8p;j0x+=r7Q;j0x+=d9Q;j0x+=X9Q;if(conf[j0x]){dragDrop[q9c](K8p);}return x8c;})[t0x](I8p,function(e){var x8p="ddClass";if(conf[B8p]){var e0x=h0Q;e0x+=x8p;dragDrop[e0x](K8p);}return x8c;});editor[B2G](L7x,function(){var G8p='dragover.DTE_Upload drop.DTE_Upload';var Q7x=c5Q;Q7x+=p5Q;$(K3c)[Q7x](G8p,function(e){return x8c;});})[B2G](k7x,function(){var u8p=".DTE_Uploa";var a8p=".DTE_Upload drop";var w8p="dragover";var Z7x=w8p;Z7x+=a8p;Z7x+=u8p;Z7x+=X9Q;$(K3c)[I8G](Z7x);});}else{var g7x=X9Q;g7x+=j8p;g7x+=t8p;g7x+=X9Q;var q7x=B9Q;q7x+=p5Q;q7x+=X9Q;var U7x=h0Q;U7x+=u0c;var y7x=p5Q;y7x+=e8p;var Y7x=p2i;Y7x+=L6p;Y7x+=f5d;container[Y7x](y7x);container[U7x](container[q7x](g7x));}container[W7x](m7x)[f7x](A7x,function(){var D7x=J0Q;D7x+=k8i;D7x+=p2i;Editor[U1c][D7x][E5c][J0c](editor,conf,T8c);});container[i7x](J7x)[T7x](h7x,function(){var C7x=g4c;C7x+=W4c;Editor[C7x](editor,conf,this[s8c],_buttonText,function(ids){var Q6p='input[type=file]';var H7x=B9Q;H7x+=O7c;var V7x=c3c;V7x+=B3c;dropCallback[V7x](editor,ids);container[H7x](Q6p)[T3c](T8c);});});return container;}function _triggerChange(input){setTimeout(function(){var Z6p="trigger";var k6p="cha";var N7x=k6p;N7x+=X3d;input[Z6p](N7x,{editor:w8c,editorSet:w8c});},V3Q);}var baseFieldType=$[Y1c](w8c,{},Editor[M7x][Y6p],{get:function(conf){var B7x=B6c;B7x+=P9G;var c7x=y6p;c7x+=M9Q;return conf[c7x][B7x]();},set:function(conf,val){var E7x=B6c;E7x+=h0Q;E7x+=r7Q;conf[w2p][E7x](val);_triggerChange(conf[w2p]);},enable:function(conf){var q6p="led";var F7x=U6p;F7x+=q6p;var O7x=g6p;O7x+=T0Q;O7x+=J0Q;O7x+=M9Q;conf[O7x][W6p](F7x,x8c);},disable:function(conf){var s7x=T0Q;s7x+=D4c;s7x+=T0Q;var d7x=m6p;d7x+=Z5d;d7x+=U2c;conf[d7x][s7x](J5d,w8c);},canReturnSubmit:function(conf,node){return w8c;}});fieldTypes[f6p]={create:function(conf){conf[A6p]=conf[V5Q];return e1c;},get:function(conf){var v7x=A7Q;v7x+=T3c;return conf[v7x];},set:function(conf,val){conf[A6p]=val;}};fieldTypes[l7x]=$[R7x](w8c,{},baseFieldType,{create:function(conf){var h6p="put/";var i6p="donly";var D6p="rea";var X7x=A7Q;X7x+=H0Q;X7x+=p5Q;X7x+=U5d;var p7x=h0Q;p7x+=M9Q;p7x+=M9Q;p7x+=I5Q;var z7x=D6p;z7x+=i6p;var b7x=B9G;b7x+=J6p;var o7x=C0Q;o7x+=d9G;var P7x=T6p;P7x+=h6p;P7x+=E6c;var r7x=g6p;r7x+=U5d;conf[r7x]=$(P7x)[o7x]($[b7x]({id:Editor[s1c](conf[f1c]),type:C6p,readonly:z7x},conf[p7x]||{}));return conf[X7x][V3Q];}});fieldTypes[K7x]=$[Y1c](w8c,{},baseFieldType,{create:function(conf){var w7x=g6p;w7x+=T0Q;w7x+=J0Q;w7x+=M9Q;var G7x=h0Q;G7x+=n1G;G7x+=I5Q;var x7x=M9Q;x7x+=B9G;x7x+=M9Q;var I7x=B9G;I7x+=M9Q;I7x+=d9Q;I7x+=O7c;var S7x=z0G;S7x+=I5Q;var n7x=A7Q;n7x+=P4c;n7x+=T0Q;n7x+=U2c;conf[n7x]=$(V6p)[S7x]($[I7x]({id:Editor[s1c](conf[f1c]),type:x7x},conf[G7x]||{}));return conf[w7x][V3Q];}});fieldTypes[a7x]=$[u7x](w8c,{},baseFieldType,{create:function(conf){var N6p='password';var L4Q=H0Q;L4Q+=X9Q;var e7x=d9Q;e7x+=G9Q;var t7x=h0Q;t7x+=n1G;t7x+=I5Q;var j7x=A7Q;j7x+=H0Q;j7x+=H6p;conf[j7x]=$(V6p)[t7x]($[e7x]({id:Editor[s1c](conf[L4Q]),type:N6p},conf[M2i]||{}));return conf[w2p][V3Q];}});fieldTypes[M6p]=$[Q4Q](w8c,{},baseFieldType,{create:function(conf){var B6p="<textarea/";var y4Q=m4c;y4Q+=c6p;var Y4Q=d9Q;Y4Q+=R9Q;Y4Q+=y7Q;Y4Q+=O7c;var Z4Q=B6p;Z4Q+=E6c;var k4Q=g6p;k4Q+=T0Q;k4Q+=J0Q;k4Q+=M9Q;conf[k4Q]=$(Z4Q)[M2i]($[Y4Q]({id:Editor[y4Q](conf[f1c])},conf[M2i]||{}));return conf[w2p][V3Q];},canReturnSubmit:function(conf,node){return x8c;}});fieldTypes[U4Q]=$[Y1c](w8c,{},baseFieldType,{_addOptions:function(conf,opts,append){var o6p="onsPair";var P6p="placeholderDisabled";var r6p="placeholderValue";var R6p="aceholderValue";var l6p="placehol";var v6p="eholderDisabled";var s6p="idd";var d6p="_v";var F6p="placeholder";var E6p="opti";var g4Q=E6p;g4Q+=U0Q;var q4Q=m6p;q4Q+=O6p;q4Q+=M9Q;var elOpts=conf[q4Q][V3Q][g4Q];var countOffset=V3Q;if(!append){elOpts[I8c]=V3Q;if(conf[F6p]!==undefined){var D4Q=S4i;D4Q+=d6p;D4Q+=P9G;var A4Q=p4c;A4Q+=s6p;A4Q+=d9Q;A4Q+=p5Q;var f4Q=n2G;f4Q+=g0Q;f4Q+=v6p;var m4Q=l6p;m4Q+=X9Q;m4Q+=A4c;var W4Q=L5G;W4Q+=R6p;var placeholderValue=conf[W4Q]!==undefined?conf[r6p]:T8c;countOffset+=H3Q;elOpts[V3Q]=new Option(conf[m4Q],placeholderValue);var disabled=conf[f4Q]!==undefined?conf[P6p]:w8c;elOpts[V3Q][A4Q]=disabled;elOpts[V3Q][i3c]=disabled;elOpts[V3Q][D4Q]=placeholderValue;}}else{var i4Q=K8c;i4Q+=p5Q;i4Q+=n8c;i4Q+=p4c;countOffset=elOpts[i4Q];}if(opts){var T4Q=E6p;T4Q+=o6p;var J4Q=T0Q;J4Q+=h0Q;J4Q+=e8d;J4Q+=D5Q;Editor[J4Q](opts,conf[T4Q],function(val,label,i,attr){var option=new Option(label,val);option[b6p]=val;if(attr){var h4Q=h0Q;h4Q+=M9Q;h4Q+=M9Q;h4Q+=I5Q;$(option)[h4Q](attr);}elOpts[i+countOffset]=option;});}},create:function(conf){var a6p="<select";var G6p="afe";var x6p="ple";var I6p="ttr";var S6p="lec";var n6p="ption";var K6p="dO";var p6p="Op";var z6p="ip";var s4Q=y6p;s4Q+=M9Q;var d4Q=z6p;d4Q+=p6p;d4Q+=V9i;var F4Q=Q1c;F4Q+=E7G;F4Q+=p5Q;F4Q+=D5Q;var O4Q=X6p;O4Q+=K6p;O4Q+=n6p;O4Q+=D5Q;var E4Q=D5Q;E4Q+=d9Q;E4Q+=S6p;E4Q+=M9Q;var M4Q=h0Q;M4Q+=I6p;var N4Q=r6c;N4Q+=x6p;var H4Q=D5Q;H4Q+=G6p;H4Q+=w6p;var V4Q=h0Q;V4Q+=M9Q;V4Q+=d9G;var C4Q=a6p;C4Q+=x8i;conf[w2p]=$(C4Q)[V4Q]($[Y1c]({id:Editor[H4Q](conf[f1c]),multiple:conf[N4Q]===w8c},conf[M4Q]||{}))[B2G](u6p,function(e,d){var t6p="_lastSet";var j6p="selec";var c4Q=B1G;c4Q+=c5Q;c4Q+=I5Q;if(!d||!d[c4Q]){var B4Q=j6p;B4Q+=M9Q;conf[t6p]=fieldTypes[B4Q][B5c](conf);}});fieldTypes[E4Q][O4Q](conf,conf[F4Q]||conf[d4Q]);return conf[s4Q][V3Q];},update:function(conf,options,append){var k1p="select";var Q1p="ions";var L1p="dOpt";var e6p="tSe";var R4Q=A7Q;R4Q+=t9G;R4Q+=e6p;R4Q+=M9Q;var l4Q=X6p;l4Q+=L1p;l4Q+=Q1p;var v4Q=D5Q;v4Q+=P9c;v4Q+=d9Q;v4Q+=V2i;fieldTypes[v4Q][l4Q](conf,options,append);var lastSet=conf[R4Q];if(lastSet!==undefined){fieldTypes[k1p][E5c](conf,lastSet,w8c);}_triggerChange(conf[w2p]);},get:function(conf){var b4Q=r7Q;b4Q+=d9Q;b4Q+=m0Q;b4Q+=D9c;var P4Q=R2c;P4Q+=H0Q;P4Q+=p5Q;P4Q+=X9Q;var r4Q=A7Q;r4Q+=r1c;var val=conf[r4Q][P4Q](a7d)[y0G](function(){var Z1p="_editor_v";var o4Q=Z1p;o4Q+=P9G;return this[o4Q];})[e2d]();if(conf[Y1p]){return conf[y1p]?val[e7G](conf[y1p]):val;}return val[b4Q]?val[V3Q]:e1c;},set:function(conf,val,localUpdate){var A1p="selected";var m1p='option';var W1p="epar";var g1p="last";var q1p="iple";var U1p="laceholder";var w4Q=K8c;w4Q+=p5Q;w4Q+=Z0c;var G4Q=T0Q;G4Q+=U1p;var I4Q=d9Q;I4Q+=h0Q;I4Q+=g0Q;I4Q+=p4c;var S4Q=A7Q;S4Q+=P4c;S4Q+=U5d;var n4Q=K8c;n4Q+=f2d;var p4Q=O6c;p4Q+=q1p;if(!localUpdate){var z4Q=A7Q;z4Q+=g1p;z4Q+=o3i;conf[z4Q]=val;}if(conf[p4Q]&&conf[y1p]&&!$[H9G](val)){var K4Q=D5Q;K4Q+=W1p;K4Q+=C0Q;K4Q+=G5Q;var X4Q=D5Q;X4Q+=J2d;val=typeof val===X4Q?val[E1i](conf[K4Q]):[];}else if(!$[H9G](val)){val=[val];}var i,len=val[n4Q],found,allFound=x8c;var options=conf[S4Q][Y7G](m1p);conf[w2p][Y7G](m1p)[I4Q](function(){var f1p="ditor_";found=x8c;for(i=V3Q;i<len;i++){var x4Q=n7Q;x4Q+=f1p;x4Q+=B6c;x4Q+=P9G;if(this[x4Q]==val[i]){found=w8c;allFound=w8c;break;}}this[A1p]=found;});if(conf[G4Q]&&!allFound&&!conf[Y1p]&&options[w4Q]){options[V3Q][A1p]=w8c;}if(!localUpdate){var a4Q=D1p;a4Q+=U2c;_triggerChange(conf[a4Q]);}return allFound;},destroy:function(conf){var j4Q=c5Q;j4Q+=R2c;j4Q+=R2c;var u4Q=D1p;u4Q+=U2c;conf[u4Q][j4Q](u6p);}});fieldTypes[i1p]=$[t4Q](w8c,{},baseFieldType,{_addOptions:function(conf,opts,append){var h1p="air";var T1p="optionsP";var J1p="emp";var val,label;var jqInput=conf[w2p];var offset=V3Q;if(!append){var e4Q=J1p;e4Q+=X4c;jqInput[e4Q]();}else{var L2Q=I3G;L2Q+=O0Q;L2Q+=D9c;offset=$(T9c,jqInput)[L2Q];}if(opts){var Q2Q=T1p;Q2Q+=h1p;Editor[J2i](opts,conf[Q2Q],function(val,label,i,attr){var N1p='" type="checkbox" />';var y2Q=T3c;y2Q+=J0Q;y2Q+=d9Q;var Y2Q=R6c;Y2Q+=E6c;var Z2Q=m4c;Z2Q+=R2c;Z2Q+=d9Q;Z2Q+=w6p;var k2Q=X7c;k2Q+=d9Q;k2Q+=O7c;jqInput[k2Q](C1p+V1p+Editor[s1c](conf[f1c])+H1p+(i+offset)+N1p+M1p+Editor[Z2Q](conf[f1c])+H1p+(i+offset)+Y2Q+label+R1c+a1c);$(c1p,jqInput)[M2i](y2Q,val)[V3Q][b6p]=val;if(attr){$(c1p,jqInput)[M2i](attr);}});}},create:function(conf){var F1p="ipOpts";var O1p="iv /";var E1p="pti";var B1p="_addO";var W2Q=g6p;W2Q+=U5d;var g2Q=Q1c;g2Q+=C2c;var q2Q=B1p;q2Q+=E1p;q2Q+=B2G;q2Q+=D5Q;var U2Q=d6c;U2Q+=O1p;U2Q+=E6c;conf[w2p]=$(U2Q);fieldTypes[i1p][q2Q](conf,conf[g2Q]||conf[F1p]);return conf[W2Q][V3Q];},get:function(conf){var o1p="unselectedValue";var r1p="hecked";var R1p="input:c";var l1p="ctedValue";var v1p="unsele";var s1p="arat";var d1p="sep";var T2Q=d1p;T2Q+=s1p;T2Q+=G5Q;var i2Q=v1p;i2Q+=l1p;var A2Q=r7Q;A2Q+=I4c;A2Q+=O0Q;A2Q+=D9c;var f2Q=R1p;f2Q+=r1p;var m2Q=R2c;m2Q+=K3i;var out=[];var selected=conf[w2p][m2Q](f2Q);if(selected[A2Q]){selected[H3c](function(){var P1p="_va";var D2Q=m0G;D2Q+=G5Q;D2Q+=P1p;D2Q+=r7Q;out[X8c](this[D2Q]);});}else if(conf[i2Q]!==undefined){var J2Q=T0Q;J2Q+=J0Q;J2Q+=V8i;out[J2Q](conf[o1p]);}return conf[T2Q]===undefined||conf[y1p]===e1c?out:out[e7G](conf[y1p]);},set:function(conf,val){var p1p='|';var z1p="Ar";var b1p="isArra";var c2Q=d9Q;c2Q+=h0Q;c2Q+=g0Q;c2Q+=p4c;var M2Q=K8c;M2Q+=p5Q;M2Q+=O0Q;M2Q+=D9c;var N2Q=b1p;N2Q+=r0Q;var V2Q=j4c;V2Q+=z1p;V2Q+=h1G;var C2Q=H0Q;C2Q+=p5Q;C2Q+=U5d;var h2Q=R2c;h2Q+=H0Q;h2Q+=p5Q;h2Q+=X9Q;var jqInputs=conf[w2p][h2Q](C2Q);if(!$[V2Q](val)&&typeof val===g5c){var H2Q=d9c;H2Q+=r7Q;H2Q+=f5Q;val=val[H2Q](conf[y1p]||p1p);}else if(!$[N2Q](val)){val=[val];}var i,len=val[M2Q],found;jqInputs[c2Q](function(){found=x8c;for(i=V3Q;i<len;i++){if(this[b6p]==val[i]){found=w8c;break;}}this[X1p]=found;});_triggerChange(jqInputs);},enable:function(conf){var B2Q=x3c;B2Q+=m5d;B2Q+=X9Q;conf[w2p][Y7G](T9c)[W6p](B2Q,x8c);},disable:function(conf){var d2Q=B0c;d2Q+=h0Q;d2Q+=x4c;d2Q+=f0Q;var F2Q=H0Q;F2Q+=p5Q;F2Q+=l4i;F2Q+=M9Q;var O2Q=R2c;O2Q+=P4c;O2Q+=X9Q;var E2Q=A7Q;E2Q+=P4c;E2Q+=T0Q;E2Q+=U2c;conf[E2Q][O2Q](F2Q)[W6p](d2Q,w8c);},update:function(conf,options,append){var n1p="kb";var K1p="chec";var v2Q=D5Q;v2Q+=d9Q;v2Q+=M9Q;var s2Q=K1p;s2Q+=n1p;s2Q+=x4G;var checkbox=fieldTypes[s2Q];var currVal=checkbox[B5c](conf);checkbox[S1p](conf,options,append);checkbox[v2Q](conf,currVal);}});fieldTypes[l2Q]=$[R2Q](w8c,{},baseFieldType,{_addOptions:function(conf,opts,append){var w1p="ai";var G1p="sPair";var x1p="ptio";var r2Q=A7Q;r2Q+=H0Q;r2Q+=O6p;r2Q+=M9Q;var val,label;var jqInput=conf[r2Q];var offset=V3Q;if(!append){var P2Q=i9G;P2Q+=D0i;jqInput[P2Q]();}else{var b2Q=r7Q;b2Q+=d9Q;b2Q+=p5Q;b2Q+=Z0c;var o2Q=I1p;o2Q+=M9Q;offset=$(o2Q,jqInput)[b2Q];}if(opts){var p2Q=c5Q;p2Q+=x1p;p2Q+=p5Q;p2Q+=G1p;var z2Q=T0Q;z2Q+=w1p;z2Q+=I5Q;z2Q+=D5Q;Editor[z2Q](opts,conf[p2Q],function(val,label,i,attr){var Q3p="me=\"";var L3p="dio\" na";var e1p=" type=\"ra";var j1p="eId";var u1p="saf";var a1p="or_";var a2Q=m0G;a2Q+=a1p;a2Q+=T3c;var w2Q=b5G;w2Q+=L6c;var G2Q=R6c;G2Q+=E6c;var x2Q=H0Q;x2Q+=X9Q;var I2Q=u1p;I2Q+=j1p;var S2Q=R6c;S2Q+=t1p;S2Q+=E6c;var n2Q=p5Q;n2Q+=h0Q;n2Q+=x9Q;var K2Q=R6c;K2Q+=e1p;K2Q+=L3p;K2Q+=Q3p;var X2Q=H0Q;X2Q+=X9Q;jqInput[Y7c](C1p+V1p+Editor[s1c](conf[X2Q])+H1p+(i+offset)+K2Q+conf[n2Q]+S2Q+M1p+Editor[I2Q](conf[x2Q])+H1p+(i+offset)+G2Q+label+R1c+a1c);$(c1p,jqInput)[M2i](w2Q,val)[V3Q][a2Q]=val;if(attr){var u2Q=z0G;u2Q+=I5Q;$(c1p,jqInput)[u2Q](attr);}});}},create:function(conf){var Y3p="dio";var Z3p="_addOpti";var k3p="pOpts";var Z8Q=Q1c;Z8Q+=I4c;var k8Q=c5Q;k8Q+=p5Q;var Q8Q=H0Q;Q8Q+=k3p;var L8Q=Z3p;L8Q+=U0Q;var e2Q=s4G;e2Q+=Y3p;var t2Q=a6c;t2Q+=B6c;t2Q+=t1p;t2Q+=E6c;var j2Q=A7Q;j2Q+=I1p;j2Q+=M9Q;conf[j2Q]=$(t2Q);fieldTypes[e2Q][L8Q](conf,conf[h5i]||conf[Q8Q]);this[k8Q](Z8Q,function(){var y8Q=R2c;y8Q+=H0Q;y8Q+=O7c;var Y8Q=A7Q;Y8Q+=b3d;Y8Q+=U2c;conf[Y8Q][y8Q](T9c)[H3c](function(){var y3p="Checked";var U8Q=K7G;U8Q+=y2c;U8Q+=y3p;if(this[U8Q]){var q8Q=d8c;q8Q+=d9Q;q8Q+=C8G;q8Q+=f0Q;this[q8Q]=w8c;}});});return conf[w2p][V3Q];},get:function(conf){var g8Q=K8c;g8Q+=p5Q;g8Q+=n8c;g8Q+=p4c;var el=conf[w2p][Y7G](U3p);return el[g8Q]?el[V3Q][b6p]:undefined;},set:function(conf,val){var D8Q=R2c;D8Q+=K3i;var A8Q=m6p;A8Q+=Z5d;A8Q+=J0Q;A8Q+=M9Q;var W8Q=d9Q;W8Q+=h0Q;W8Q+=g0Q;W8Q+=p4c;var that=this;conf[w2p][Y7G](T9c)[W8Q](function(){var W3p="_preChecked";var g3p="ked";var q3p="eCheck";var m8Q=I0i;m8Q+=q3p;m8Q+=d9Q;m8Q+=X9Q;this[m8Q]=x8c;if(this[b6p]==val){var f8Q=d8c;f8Q+=N1c;f8Q+=g3p;this[f8Q]=w8c;this[W3p]=w8c;}else{this[X1p]=x8c;this[W3p]=x8c;}});_triggerChange(conf[A8Q][D8Q](U3p));},enable:function(conf){var i8Q=B0c;i8Q+=f3c;i8Q+=d9Q;i8Q+=X9Q;conf[w2p][Y7G](T9c)[W6p](i8Q,x8c);},disable:function(conf){conf[w2p][Y7G](T9c)[W6p](J5d,w8c);},update:function(conf,options,append){var A3p="radio";var f3p="[";var m3p="alue";var c8Q=B6c;c8Q+=m3p;var M8Q=h0Q;M8Q+=n1G;M8Q+=I5Q;var N8Q=d9Q;N8Q+=x1G;var H8Q=F3i;H8Q+=p4c;var V8Q=R6c;V8Q+=M3i;var C8Q=f3p;C8Q+=b5G;C8Q+=L6c;C8Q+=I8i;var h8Q=D5Q;h8Q+=d9Q;h8Q+=M9Q;var T8Q=H0Q;T8Q+=H6p;var J8Q=R2c;J8Q+=H0Q;J8Q+=p5Q;J8Q+=X9Q;var radio=fieldTypes[A3p];var currVal=radio[B5c](conf);radio[S1p](conf,options,append);var inputs=conf[w2p][J8Q](T8Q);radio[h8Q](conf,inputs[E2d](C8Q+currVal+V8Q)[H8Q]?currVal:inputs[N8Q](V3Q)[M8Q](c8Q));}});fieldTypes[B8Q]=$[E8Q](w8c,{},baseFieldType,{create:function(conf){var l3p='date';var v3p='type';var M3p="RFC_2822";var H3p="mat";var V3p="dateF";var C3p='jqueryui';var h3p="rmat";var T3p="teFo";var J3p="put /";var D3p="datepi";var I8Q=A7Q;I8Q+=P4c;I8Q+=T0Q;I8Q+=U2c;var d8Q=D3p;d8Q+=i3p;var F8Q=h0Q;F8Q+=M9Q;F8Q+=d9G;var O8Q=T6p;O8Q+=J3p;O8Q+=E6c;conf[w2p]=$(O8Q)[F8Q]($[Y1c]({id:Editor[s1c](conf[f1c]),type:C6p},conf[M2i]));if($[d8Q]){var v8Q=p2c;v8Q+=T3p;v8Q+=h3p;var s8Q=m6p;s8Q+=p5Q;s8Q+=l4i;s8Q+=M9Q;conf[s8Q][r3c](C3p);if(!conf[v8Q]){var l8Q=V3p;l8Q+=c5Q;l8Q+=I5Q;l8Q+=H3p;conf[l8Q]=$[N3p][M3p];}setTimeout(function(){var d3p="xten";var F3p="Imag";var O3p="-div";var B3p="atep";var c3p="#ui-d";var K8Q=p5Q;K8Q+=c5Q;K8Q+=l0Q;var X8Q=x3c;X8Q+=Z5c;var p8Q=c3p;p8Q+=B3p;p8Q+=E3p;p8Q+=O3p;var z8Q=Q1c;z8Q+=V9i;var b8Q=X9Q;b8Q+=k4c;b8Q+=F3p;b8Q+=d9Q;var o8Q=V3p;o8Q+=c5Q;o8Q+=I5Q;o8Q+=H3p;var P8Q=d9Q;P8Q+=d3p;P8Q+=X9Q;var r8Q=p2c;r8Q+=s3p;var R8Q=g6p;R8Q+=T0Q;R8Q+=U2c;$(conf[R8Q])[r8Q]($[P8Q]({dateFormat:conf[o8Q],buttonImage:conf[b8Q],buttonImageOnly:w8c,onSelect:function(){conf[w2p][C9c]()[g8G]();}},conf[z8Q]));$(p8Q)[Z3c](X8Q,K8Q);},d3Q);}else{var S8Q=h0Q;S8Q+=M9Q;S8Q+=M9Q;S8Q+=I5Q;var n8Q=m6p;n8Q+=O6p;n8Q+=M9Q;conf[n8Q][S8Q](v3p,l3p);}return conf[I8Q][V3Q];},set:function(conf,val){var z3p="change";var b3p="setDate";var P3p="epi";var r3p="atepicker";var R3p="hasD";var a8Q=R3p;a8Q+=r3p;var w8Q=k9d;w8Q+=y4c;var G8Q=A7Q;G8Q+=H0Q;G8Q+=Z5d;G8Q+=U2c;var x8Q=p2c;x8Q+=M9Q;x8Q+=P3p;x8Q+=i3p;if($[x8Q]&&conf[G8Q][w8Q](a8Q)){var u8Q=e6c;u8Q+=o3p;conf[w2p][u8Q](b3p,val)[z3p]();}else{$(conf[w2p])[T3c](val);}},enable:function(conf){var p3p="tepi";if($[N3p]){var t8Q=p2c;t8Q+=p3p;t8Q+=i3p;var j8Q=A7Q;j8Q+=b3d;j8Q+=U2c;conf[j8Q][t8Q](h0G);}else{var e8Q=Z0Q;e8Q+=Q1c;$(conf[w2p])[e8Q](J5d,x8c);}},disable:function(conf){var L6Q=X9Q;L6Q+=h0Q;L6Q+=s3p;if($[L6Q]){var k6Q=x3c;k6Q+=m5d;var Q6Q=e6c;Q6Q+=o3p;conf[w2p][Q6Q](k6Q);}else{var y6Q=U6p;y6Q+=K8c;y6Q+=X9Q;var Y6Q=T0Q;Y6Q+=I5Q;Y6Q+=Q1c;var Z6Q=m6p;Z6Q+=p5Q;Z6Q+=T0Q;Z6Q+=U2c;$(conf[Z6Q])[Y6Q](y6Q,w8c);}},owns:function(conf,node){var n3p='div.ui-datepicker';var K3p="r-header";var X3p="div.ui-datepicke";var g6Q=X3p;g6Q+=K3p;var q6Q=A3d;q6Q+=I5Q;q6Q+=Y2c;q6Q+=D5Q;var U6Q=I3G;U6Q+=Z0c;return $(node)[C7G](n3p)[U6Q]||$(node)[q6Q](g6Q)[I8c]?w8c:x8c;}});fieldTypes[r2p]=$[Y1c](w8c,{},baseFieldType,{create:function(conf){var u3p="eydow";var G3p="<input";var x3p="for";var I3p="yIn";var S3p="oseFn";var d6Q=j7Q;d6Q+=S3p;var E6Q=K9i;E6Q+=I3p;E6Q+=l4i;E6Q+=M9Q;var M6Q=A7Q;M6Q+=k0G;M6Q+=d9Q;M6Q+=I3c;var N6Q=c5Q;N6Q+=T0Q;N6Q+=V9i;var V6Q=H0Q;V6Q+=J6d;V6Q+=p5Q;var C6Q=x3p;C6Q+=w5Q;C6Q+=h0Q;C6Q+=M9Q;var h6Q=B9G;h6Q+=J6p;var T6Q=A7Q;T6Q+=H0Q;T6Q+=O6p;T6Q+=M9Q;var J6Q=C0Q;J6Q+=d9G;var i6Q=M9Q;i6Q+=d9Q;i6Q+=R9Q;i6Q+=M9Q;var D6Q=H0Q;D6Q+=X9Q;var A6Q=m4c;A6Q+=c6p;var f6Q=d9Q;f6Q+=R9Q;f6Q+=y7Q;f6Q+=O7c;var m6Q=G3p;m6Q+=Y8p;var W6Q=A7Q;W6Q+=I1p;W6Q+=M9Q;conf[W6Q]=$(m6Q)[M2i]($[f6Q](w8c,{id:Editor[A6Q](conf[D6Q]),type:i6Q},conf[J6Q]));conf[w3p]=new Editor[z6d](conf[T6Q],$[h6Q]({format:conf[C6Q],i18n:this[V6Q][r2p],onChange:function(){var H6Q=A7Q;H6Q+=H0Q;H6Q+=Z5d;H6Q+=U2c;_triggerChange(conf[H6Q]);}},conf[N6Q]));conf[M6Q]=function(){var a3p="pic";var B6Q=p4c;B6Q+=H0Q;B6Q+=X9Q;B6Q+=d9Q;var c6Q=A7Q;c6Q+=a3p;c6Q+=z2c;c6Q+=A4c;conf[c6Q][B6Q]();};if(conf[E6Q]===x8c){var O6Q=z2c;O6Q+=u3p;O6Q+=p5Q;conf[w2p][B2G](O6Q,function(e){var t3p="efault";var j3p="eventD";var F6Q=T0Q;F6Q+=I5Q;F6Q+=j3p;F6Q+=t3p;e[F6Q]();});}this[B2G](q3i,conf[d6Q]);return conf[w2p][V3Q];},set:function(conf,val){var v6Q=A7Q;v6Q+=I1p;v6Q+=M9Q;var s6Q=K7G;s6Q+=E3p;conf[s6Q][T3c](val);_triggerChange(conf[v6Q]);},owns:function(conf,node){var e3p="owns";return conf[w3p][e3p](node);},errorMessage:function(conf,msg){var L9p="errorMsg";conf[w3p][L9p](msg);},destroy:function(conf){var Z9p="_closeF";var k9p="ker";var Q9p="roy";var o6Q=a5G;o6Q+=Q9p;var P6Q=K7G;P6Q+=H0Q;P6Q+=g0Q;P6Q+=k9p;var r6Q=c5Q;r6Q+=R2c;r6Q+=R2c;var R6Q=y6p;R6Q+=M9Q;var l6Q=Z9p;l6Q+=p5Q;this[I8G](q3i,conf[l6Q]);conf[R6Q][r6Q](p9i);conf[P6Q][o6Q]();},minDate:function(conf,min){var b6Q=w5Q;b6Q+=H0Q;b6Q+=p5Q;conf[w3p][b6Q](min);},maxDate:function(conf,max){var Y9p="max";conf[w3p][Y9p](max);}});fieldTypes[z6Q]=$[p6Q](w8c,{},baseFieldType,{create:function(conf){var editor=this;var container=_commonUpload(editor,conf,function(val){var q9p='postUpload';var U9p="ldTypes";var y9p="loa";var I6Q=G6c;I6Q+=x9Q;var S6Q=A7Q;S6Q+=d9Q;S6Q+=R2i;S6Q+=M9Q;var n6Q=u7G;n6Q+=r7Q;var K6Q=g4c;K6Q+=y9p;K6Q+=X9Q;var X6Q=p7Q;X6Q+=U9p;Editor[X6Q][K6Q][E5c][n6Q](editor,conf,val[V3Q]);editor[S6Q](q9p,[conf[I6Q],val[V3Q]]);});return container;},get:function(conf){return conf[A6p];},set:function(conf,val){var C9p="noC";var h9p="rText";var T9p="emoveCla";var J9p="noCle";var i9p='No file';var D9p="noFileText";var f9p="clearValue b";var m9p="arText";var W9p="cle";var g9p=".ed";var U1Q=L8i;U1Q+=b2i;U1Q+=g9p;U1Q+=P2c;var y1Q=H0Q;y1Q+=Z5d;y1Q+=J0Q;y1Q+=M9Q;var L1Q=W9p;L1Q+=m9p;var e6Q=l4G;e6Q+=f9p;e6Q+=s3G;var t6Q=R2c;t6Q+=P4c;t6Q+=X9Q;var G6Q=b3c;G6Q+=r0Q;var x6Q=g6p;x6Q+=U5d;conf[A6p]=val;var container=conf[x6Q];if(conf[G6Q]){var a6Q=A7Q;a6Q+=b5G;a6Q+=r7Q;var w6Q=R2c;w6Q+=H0Q;w6Q+=O7c;var rendered=container[w6Q](A9p);if(conf[a6Q]){var u6Q=p4c;u6Q+=M9Q;u6Q+=w5Q;u6Q+=r7Q;rendered[u6Q](conf[G4c](conf[A6p]));}else{var j6Q=z6c;j6Q+=d9c;j6Q+=h0Q;j6Q+=d1d;rendered[e1d]()[Y7c](j6Q+(conf[D9p]||i9p)+S1c);}}var button=container[t6Q](e6Q);if(val&&conf[L1Q]){var Z1Q=J9p;Z1Q+=w6d;var k1Q=I5Q;k1Q+=T9p;k1Q+=D5Q;k1Q+=D5Q;var Q1Q=g0Q;Q1Q+=r7Q;Q1Q+=F8c;Q1Q+=h9p;button[n5c](conf[Q1Q]);container[k1Q](Z1Q);}else{var Y1Q=C9p;Y1Q+=r7Q;Y1Q+=y1d;container[r3c](Y1Q);}conf[w2p][Y7G](y1Q)[I3i](U1Q,[conf[A6p]]);},enable:function(conf){var W1Q=P4c;W1Q+=U5d;var g1Q=R2c;g1Q+=H0Q;g1Q+=p5Q;g1Q+=X9Q;var q1Q=D1p;q1Q+=J0Q;q1Q+=M9Q;conf[q1Q][g1Q](W1Q)[W6p](J5d,x8c);conf[B8p]=w8c;},disable:function(conf){var A1Q=x3c;A1Q+=D5Q;A1Q+=l8c;A1Q+=X9Q;var f1Q=Z0Q;f1Q+=c5Q;f1Q+=T0Q;var m1Q=A7Q;m1Q+=H0Q;m1Q+=Z5d;m1Q+=U2c;conf[m1Q][Y7G](T9c)[f1Q](A1Q,w8c);conf[B8p]=x8c;},canReturnSubmit:function(conf,node){return x8c;}});fieldTypes[V9p]=$[Y1c](w8c,{},baseFieldType,{_showHide:function(conf){var B9p="limit";var c9p="itHi";var M9p="iv.lim";var N9p="L";var H9p="_limit";var N1Q=A7Q;N1Q+=b5G;N1Q+=r7Q;var H1Q=r7Q;H1Q+=H0Q;H1Q+=j1i;H1Q+=M9Q;var V1Q=H9p;V1Q+=N9p;V1Q+=d9Q;V1Q+=G3G;var C1Q=x4c;C1Q+=W0c;var h1Q=p5Q;h1Q+=k0c;var T1Q=g0Q;T1Q+=D5Q;T1Q+=D5Q;var J1Q=X9Q;J1Q+=M9p;J1Q+=c9p;J1Q+=c2c;var i1Q=R2c;i1Q+=H0Q;i1Q+=p5Q;i1Q+=X9Q;var D1Q=A7Q;D1Q+=R3c;if(!conf[B9p]){return;}conf[D1Q][i1Q](J1Q)[T1Q](Y3c,conf[A6p][I8c]>=conf[B9p]?h1Q:C1Q);conf[V1Q]=conf[H1Q]-conf[N1Q][I8c];},create:function(conf){var l9p='button.remove';var E9p="ul";var z1Q=A7Q;z1Q+=g0Q;z1Q+=F5c;z1Q+=U9c;var v1Q=g0Q;v1Q+=a8c;v1Q+=C8G;var s1Q=w5Q;s1Q+=E9p;s1Q+=M9Q;s1Q+=H0Q;var d1Q=p2i;d1Q+=L6p;d1Q+=f5d;var editor=this;var container=_commonUpload(editor,conf,function(val){var v9p="concat";var s9p="eldType";var d9p="Many";var F9p="ploa";var O9p="post";var F1Q=p5Q;F1Q+=h0Q;F1Q+=x9Q;var O1Q=O9p;O1Q+=S0Q;O1Q+=F9p;O1Q+=X9Q;var E1Q=c3c;E1Q+=B3c;var B1Q=L8i;B1Q+=b2i;B1Q+=d9p;var c1Q=B9Q;c1Q+=s9p;c1Q+=D5Q;var M1Q=A7Q;M1Q+=b5G;M1Q+=r7Q;conf[A6p]=conf[M1Q][v9p](val);Editor[c1Q][B1Q][E5c][E1Q](editor,conf,conf[A6p]);editor[i5G](O1Q,[conf[F1Q],conf[A6p]]);},w8c);container[d1Q](s1Q)[B2G](v1Q,l9p,function(e){var P9p="stopPropagation";var r9p="ypes";var R9p="fieldT";var b1Q=A7Q;b1Q+=B6c;b1Q+=h0Q;b1Q+=r7Q;var o1Q=g0Q;o1Q+=P9G;o1Q+=r7Q;var P1Q=R9p;P1Q+=r9p;var r1Q=A7Q;r1Q+=b5G;r1Q+=r7Q;var R1Q=H0Q;R1Q+=X9Q;R1Q+=R9Q;var l1Q=X9Q;l1Q+=C0Q;l1Q+=h0Q;e[P9p]();var idx=$(this)[l1Q](R1Q);conf[r1Q][C1G](idx,H3Q);Editor[P1Q][V9p][E5c][o1Q](editor,conf,conf[b1Q]);});conf[z1Q]=container;return container;},get:function(conf){return conf[A6p];},set:function(conf,val){var k5p='upload.editor';var Q5p="_showHide";var L5p='No files';var e9p="<s";var t9p="leText";var j9p="noF";var X9p='<ul/>';var p9p='Upload collections must have an array as a value';var z9p="adMany";var b9p="Handle";var o9p="gger";var k3Q=A7Q;k3Q+=B6c;k3Q+=h0Q;k3Q+=r7Q;var Q3Q=k9i;Q3Q+=o9p;Q3Q+=b9p;Q3Q+=I5Q;var L3Q=H0Q;L3Q+=H6p;var e1Q=B9Q;e1Q+=p5Q;e1Q+=X9Q;var t1Q=L8i;t1Q+=c5Q;t1Q+=z9p;var X1Q=g6p;X1Q+=U5d;var p1Q=A7Q;p1Q+=b5G;p1Q+=r7Q;if(!val){val=[];}if(!$[H9G](val)){throw p9p;}conf[p1Q]=val;var that=this;var container=conf[X1Q];if(conf[G4c]){var n1Q=c0d;n1Q+=r0Q;var K1Q=L8p;K1Q+=X9Q;var rendered=container[K1Q](A9p)[n1Q]();if(val[I8c]){var S1Q=F8c;S1Q+=d8c;var list=$(X9p)[M3G](rendered);$[S1Q](val,function(i,file){var u9p=' <button class="';var a9p='<li>';var w9p="asses";var G9p="ove\" data-idx=\"";var x9p=" re";var I9p="es;</button";var S9p="\">&";var n9p="i>";var K9p="/l";var w1Q=z6c;w1Q+=K9p;w1Q+=n9p;var G1Q=S9p;G1Q+=p6d;G1Q+=I9p;G1Q+=E6c;var x1Q=x9p;x1Q+=w5Q;x1Q+=G9p;var I1Q=g0Q;I1Q+=r7Q;I1Q+=w9p;list[Y7c](a9p+conf[G4c](file,i)+u9p+that[I1Q][B3G][N0c]+x1Q+i+G1Q+w1Q);});}else{var j1Q=z6c;j1Q+=N6c;j1Q+=W0d;var u1Q=j9p;u1Q+=H0Q;u1Q+=t9p;var a1Q=e9p;a1Q+=T0Q;a1Q+=D7G;a1Q+=E6c;rendered[Y7c](a1Q+(conf[u1Q]||L5p)+j1Q);}}Editor[U1c][t1Q][Q5p](conf);conf[w2p][e1Q](L3Q)[Q3Q](k5p,[conf[k3Q]]);},enable:function(conf){var y3Q=Q0G;y3Q+=x4c;y3Q+=f0Q;var Y3Q=H0Q;Y3Q+=O6p;Y3Q+=M9Q;var Z3Q=R2c;Z3Q+=H0Q;Z3Q+=O7c;conf[w2p][Z3Q](Y3Q)[W6p](y3Q,x8c);conf[B8p]=w8c;},disable:function(conf){var g3Q=Z0Q;g3Q+=c5Q;g3Q+=T0Q;var q3Q=H0Q;q3Q+=Z5d;q3Q+=J0Q;q3Q+=M9Q;var U3Q=R2c;U3Q+=H0Q;U3Q+=p5Q;U3Q+=X9Q;conf[w2p][U3Q](q3Q)[g3Q](J5d,w8c);conf[B8p]=x8c;},canReturnSubmit:function(conf,node){return x8c;}});}());if(DataTable[W3Q][Z5p]){var A3Q=B1G;A3Q+=Y5p;A3Q+=l2c;A3Q+=z4c;var f3Q=d9Q;f3Q+=R9Q;f3Q+=M9Q;var m3Q=R2c;m3Q+=y5p;m3Q+=D5Q;$[Y1c](Editor[m3Q],DataTable[f3Q][A3Q]);}DataTable[J1c][D3Q]=Editor[i3Q];Editor[J3Q]={};Editor[T3Q][h3Q]=U5p;Editor[q5p]=C3Q;return Editor;}));

/*! AutoFill 2.3.3
 * Â©2008-2018 SpryMedia Ltd - datatables.net/license
 */

/**
 * @summary     AutoFill
 * @description Add Excel like click and drag auto-fill options to DataTables
 * @version     2.3.3
 * @file        dataTables.autoFill.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     www.sprymedia.co.uk/contact
 * @copyright   Copyright 2010-2018 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license/mit
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */
(function( factory ){
	if ( typeof define === 'function' && define.amd ) {
		// AMD
		define( ['jquery', 'datatables.net'], function ( $ ) {
			return factory( $, window, document );
		} );
	}
	else if ( typeof exports === 'object' ) {
		// CommonJS
		module.exports = function (root, $) {
			if ( ! root ) {
				root = window;
			}

			if ( ! $ || ! $.fn.dataTable ) {
				$ = require('datatables.net')(root, $).$;
			}

			return factory( $, root, root.document );
		};
	}
	else {
		// Browser
		factory( jQuery, window, document );
	}
}(function( $, window, document, undefined ) {
'use strict';
var DataTable = $.fn.dataTable;


var _instance = 0;

/** 
 * AutoFill provides Excel like auto-fill features for a DataTable
 *
 * @class AutoFill
 * @constructor
 * @param {object} oTD DataTables settings object
 * @param {object} oConfig Configuration object for AutoFill
 */
var AutoFill = function( dt, opts )
{
	if ( ! DataTable.versionCheck || ! DataTable.versionCheck( '1.10.8' ) ) {
		throw( "Warning: AutoFill requires DataTables 1.10.8 or greater");
	}

	// User and defaults configuration object
	this.c = $.extend( true, {},
		DataTable.defaults.autoFill,
		AutoFill.defaults,
		opts
	);

	/**
	 * @namespace Settings object which contains customisable information for AutoFill instance
	 */
	this.s = {
		/** @type {DataTable.Api} DataTables' API instance */
		dt: new DataTable.Api( dt ),

		/** @type {String} Unique namespace for events attached to the document */
		namespace: '.autoFill'+(_instance++),

		/** @type {Object} Cached dimension information for use in the mouse move event handler */
		scroll: {},

		/** @type {integer} Interval object used for smooth scrolling */
		scrollInterval: null,

		handle: {
			height: 0,
			width: 0
		},

		/**
		 * Enabled setting
		 * @type {Boolean}
		 */
		enabled: false
	};


	/**
	 * @namespace Common and useful DOM elements for the class instance
	 */
	this.dom = {
		/** @type {jQuery} AutoFill handle */
		handle: $('<div class="dt-autofill-handle"/>'),

		/**
		 * @type {Object} Selected cells outline - Need to use 4 elements,
		 *   otherwise the mouse over if you back into the selected rectangle
		 *   will be over that element, rather than the cells!
		 */
		select: {
			top:    $('<div class="dt-autofill-select top"/>'),
			right:  $('<div class="dt-autofill-select right"/>'),
			bottom: $('<div class="dt-autofill-select bottom"/>'),
			left:   $('<div class="dt-autofill-select left"/>')
		},

		/** @type {jQuery} Fill type chooser background */
		background: $('<div class="dt-autofill-background"/>'),

		/** @type {jQuery} Fill type chooser */
		list: $('<div class="dt-autofill-list">'+this.s.dt.i18n('autoFill.info', '')+'<ul/></div>'),

		/** @type {jQuery} DataTables scrolling container */
		dtScroll: null,

		/** @type {jQuery} Offset parent element */
		offsetParent: null
	};


	/* Constructor logic */
	this._constructor();
};



$.extend( AutoFill.prototype, {
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Public methods (exposed via the DataTables API below)
	 */
	enabled: function ()
	{
		return this.s.enabled;
	},


	enable: function ( flag )
	{
		var that = this;

		if ( flag === false ) {
			return this.disable();
		}

		this.s.enabled = true;

		this._focusListener();

		this.dom.handle.on( 'mousedown', function (e) {
			that._mousedown( e );
			return false;
		} );

		return this;
	},

	disable: function ()
	{
		this.s.enabled = false;

		this._focusListenerRemove();

		return this;
	},


	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Constructor
	 */

	/**
	 * Initialise the RowReorder instance
	 *
	 * @private
	 */
	_constructor: function ()
	{
		var that = this;
		var dt = this.s.dt;
		var dtScroll = $('div.dataTables_scrollBody', this.s.dt.table().container());

		// Make the instance accessible to the API
		dt.settings()[0].autoFill = this;

		if ( dtScroll.length ) {
			this.dom.dtScroll = dtScroll;

			// Need to scroll container to be the offset parent
			if ( dtScroll.css('position') === 'static' ) {
				dtScroll.css( 'position', 'relative' );
			}
		}

		if ( this.c.enable !== false ) {
			this.enable();
		}

		dt.on( 'destroy.autoFill', function () {
			that._focusListenerRemove();
		} );
	},


	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Private methods
	 */

	/**
	 * Display the AutoFill drag handle by appending it to a table cell. This
	 * is the opposite of the _detach method.
	 *
	 * @param  {node} node TD/TH cell to insert the handle into
	 * @private
	 */
	_attach: function ( node )
	{
		var dt = this.s.dt;
		var idx = dt.cell( node ).index();
		var handle = this.dom.handle;
		var handleDim = this.s.handle;

		if ( ! idx || dt.columns( this.c.columns ).indexes().indexOf( idx.column ) === -1 ) {
			this._detach();
			return;
		}

		if ( ! this.dom.offsetParent ) {
			// We attach to the table's offset parent
			this.dom.offsetParent = $( dt.table().node() ).offsetParent();
		}

		if ( ! handleDim.height || ! handleDim.width ) {
			// Append to document so we can get its size. Not expecting it to
			// change during the life time of the page
			handle.appendTo( 'body' );
			handleDim.height = handle.outerHeight();
			handleDim.width = handle.outerWidth();
		}

		// Might need to go through multiple offset parents
		var offset = this._getPosition( node, this.dom.offsetParent );

		this.dom.attachedTo = node;
		handle
			.css( {
				top: offset.top + node.offsetHeight - handleDim.height,
				left: offset.left + node.offsetWidth - handleDim.width
			} )
			.appendTo( this.dom.offsetParent );
	},


	/**
	 * Determine can the fill type should be. This can be automatic, or ask the
	 * end user.
	 *
	 * @param {array} cells Information about the selected cells from the key
	 *     up function
	 * @private
	 */
	_actionSelector: function ( cells )
	{
		var that = this;
		var dt = this.s.dt;
		var actions = AutoFill.actions;
		var available = [];

		// "Ask" each plug-in if it wants to handle this data
		$.each( actions, function ( key, action ) {
			if ( action.available( dt, cells ) ) {
				available.push( key );
			}
		} );

		if ( available.length === 1 && this.c.alwaysAsk === false ) {
			// Only one action available - enact it immediately
			var result = actions[ available[0] ].execute( dt, cells );
			this._update( result, cells );
		}
		else {
			// Multiple actions available - ask the end user what they want to do
			var list = this.dom.list.children('ul').empty();

			// Add a cancel option
			available.push( 'cancel' );

			$.each( available, function ( i, name ) {
				list.append( $('<li/>')
					.append(
						'<div class="dt-autofill-question">'+
							actions[ name ].option( dt, cells )+
						'<div>'
					)
					.append( $('<div class="dt-autofill-button">' )
						.append( $('<button class="'+AutoFill.classes.btn+'">'+dt.i18n('autoFill.button', '&gt;')+'</button>')
							.on( 'click', function () {
								var result = actions[ name ].execute(
									dt, cells, $(this).closest('li')
								);
								that._update( result, cells );

								that.dom.background.remove();
								that.dom.list.remove();
							} )
						)
					)
				);
			} );

			this.dom.background.appendTo( 'body' );
			this.dom.list.appendTo( 'body' );

			this.dom.list.css( 'margin-top', this.dom.list.outerHeight()/2 * -1 );
		}
	},


	/**
	 * Remove the AutoFill handle from the document
	 *
	 * @private
	 */
	_detach: function ()
	{
		this.dom.attachedTo = null;
		this.dom.handle.detach();
	},


	/**
	 * Draw the selection outline by calculating the range between the start
	 * and end cells, then placing the highlighting elements to draw a rectangle
	 *
	 * @param  {node}   target End cell
	 * @param  {object} e      Originating event
	 * @private
	 */
	_drawSelection: function ( target, e )
	{
		// Calculate boundary for start cell to this one
		var dt = this.s.dt;
		var start = this.s.start;
		var startCell = $(this.dom.start);
		var end = {
			row: this.c.vertical ?
				dt.rows( { page: 'current' } ).nodes().indexOf( target.parentNode ) :
				start.row,
			column: this.c.horizontal ?
				$(target).index() :
				start.column
		};
		var colIndx = dt.column.index( 'toData', end.column );
		var endRow =  dt.row( ':eq('+end.row+')', { page: 'current' } ); // Workaround for M581
		var endCell = $( dt.cell( endRow.index(), colIndx ).node() );

		// Be sure that is a DataTables controlled cell
		if ( ! dt.cell( endCell ).any() ) {
			return;
		}

		// if target is not in the columns available - do nothing
		if ( dt.columns( this.c.columns ).indexes().indexOf( colIndx ) === -1 ) {
			return;
		}

		this.s.end = end;

		var top, bottom, left, right, height, width;

		top    = start.row    < end.row    ? startCell : endCell;
		bottom = start.row    < end.row    ? endCell   : startCell;
		left   = start.column < end.column ? startCell : endCell;
		right  = start.column < end.column ? endCell   : startCell;

		top    = this._getPosition( top.get(0) ).top;
		left   = this._getPosition( left.get(0) ).left;
		height = this._getPosition( bottom.get(0) ).top + bottom.outerHeight() - top;
		width  = this._getPosition( right.get(0) ).left + right.outerWidth() - left;

		var select = this.dom.select;
		select.top.css( {
			top: top,
			left: left,
			width: width
		} );

		select.left.css( {
			top: top,
			left: left,
			height: height
		} );

		select.bottom.css( {
			top: top + height,
			left: left,
			width: width
		} );

		select.right.css( {
			top: top,
			left: left + width,
			height: height
		} );
	},


	/**
	 * Use the Editor API to perform an update based on the new data for the
	 * cells
	 *
	 * @param {array} cells Information about the selected cells from the key
	 *     up function
	 * @private
	 */
	_editor: function ( cells )
	{
		var dt = this.s.dt;
		var editor = this.c.editor;

		if ( ! editor ) {
			return;
		}

		// Build the object structure for Editor's multi-row editing
		var idValues = {};
		var nodes = [];
		var fields = editor.fields();

		for ( var i=0, ien=cells.length ; i<ien ; i++ ) {
			for ( var j=0, jen=cells[i].length ; j<jen ; j++ ) {
				var cell = cells[i][j];

				// Determine the field name for the cell being edited
				var col = dt.settings()[0].aoColumns[ cell.index.column ];
				var fieldName = col.editField;

				if ( fieldName === undefined ) {
					var dataSrc = col.mData;

					// dataSrc is the `field.data` property, but we need to set
					// using the field name, so we need to translate from the
					// data to the name
					for ( var k=0, ken=fields.length ; k<ken ; k++ ) {
						var field = editor.field( fields[k] );

						if ( field.dataSrc() === dataSrc ) {
							fieldName = field.name();
							break;
						}
					}
				}

				if ( ! fieldName ) {
					throw 'Could not automatically determine field data. '+
						'Please see https://datatables.net/tn/11';
				}

				if ( ! idValues[ fieldName ] ) {
					idValues[ fieldName ] = {};
				}

				var id = dt.row( cell.index.row ).id();
				idValues[ fieldName ][ id ] = cell.set;

				// Keep a list of cells so we can activate the bubble editing
				// with them
				nodes.push( cell.index );
			}
		}

		// Perform the edit using bubble editing as it allows us to specify
		// the cells to be edited, rather than using full rows
		editor
			.bubble( nodes, false )
			.multiSet( idValues )
			.submit();
	},


	/**
	 * Emit an event on the DataTable for listeners
	 *
	 * @param  {string} name Event name
	 * @param  {array} args Event arguments
	 * @private
	 */
	_emitEvent: function ( name, args )
	{
		this.s.dt.iterator( 'table', function ( ctx, i ) {
			$(ctx.nTable).triggerHandler( name+'.dt', args );
		} );
	},


	/**
	 * Attach suitable listeners (based on the configuration) that will attach
	 * and detach the AutoFill handle in the document.
	 *
	 * @private
	 */
	_focusListener: function ()
	{
		var that = this;
		var dt = this.s.dt;
		var namespace = this.s.namespace;
		var focus = this.c.focus !== null ?
			this.c.focus :
			dt.init().keys || dt.settings()[0].keytable ?
				'focus' :
				'hover';

		// All event listeners attached here are removed in the `destroy`
		// callback in the constructor
		if ( focus === 'focus' ) {
			dt
				.on( 'key-focus.autoFill', function ( e, dt, cell ) {
					that._attach( cell.node() );
				} )
				.on( 'key-blur.autoFill', function ( e, dt, cell ) {
					that._detach();
				} );
		}
		else if ( focus === 'click' ) {
			$(dt.table().body()).on( 'click'+namespace, 'td, th', function (e) {
				that._attach( this );
			} );

			$(document.body).on( 'click'+namespace, function (e) {
				if ( ! $(e.target).parents().filter( dt.table().body() ).length ) {
					that._detach();
				}
			} );
		}
		else {
			$(dt.table().body())
				.on( 'mouseenter'+namespace, 'td, th', function (e) {
					that._attach( this );
				} )
				.on( 'mouseleave'+namespace, function (e) {
					if ( $(e.relatedTarget).hasClass('dt-autofill-handle') ) {
						return;
					}

					that._detach();
				} );
		}
	},


	_focusListenerRemove: function ()
	{
		var dt = this.s.dt;

		dt.off( '.autoFill' );
		$(dt.table().body()).off( this.s.namespace );
		$(document.body).off( this.s.namespace );
	},


	/**
	 * Get the position of a node, relative to another, including any scrolling
	 * offsets.
	 * @param  {Node}   node         Node to get the position of
	 * @param  {jQuery} targetParent Node to use as the parent
	 * @return {object}              Offset calculation
	 * @private
	 */
	_getPosition: function ( node, targetParent )
	{
		var
			currNode = node,
			currOffsetParent,
			top = 0,
			left = 0;

		if ( ! targetParent ) {
			targetParent = $( $( this.s.dt.table().node() )[0].offsetParent );
		}

		do {
			// Don't use jQuery().position() the behaviour changes between 1.x and 3.x for
			// tables
			var positionTop = currNode.offsetTop;
			var positionLeft = currNode.offsetLeft;

			// jQuery doesn't give a `table` as the offset parent oddly, so use DOM directly
			currOffsetParent = $( currNode.offsetParent );

			top += positionTop + currOffsetParent.scrollTop();
			left += positionLeft + currOffsetParent.scrollLeft();

			top += parseInt( currOffsetParent.css('margin-top') ) * 1;
			top += parseInt( currOffsetParent.css('border-top-width') ) * 1;

			// Emergency fall back. Shouldn't happen, but just in case!
			if ( currNode.nodeName.toLowerCase() === 'body' ) {
				break;
			}

			currNode = currOffsetParent.get(0); // for next loop
		}
		while ( currOffsetParent.get(0) !== targetParent.get(0) )

		return {
			top: top,
			left: left
		};
	},


	/**
	 * Start mouse drag - selects the start cell
	 *
	 * @param  {object} e Mouse down event
	 * @private
	 */
	_mousedown: function ( e )
	{
		var that = this;
		var dt = this.s.dt;

		this.dom.start = this.dom.attachedTo;
		this.s.start = {
			row: dt.rows( { page: 'current' } ).nodes().indexOf( $(this.dom.start).parent()[0] ),
			column: $(this.dom.start).index()
		};

		$(document.body)
			.on( 'mousemove.autoFill', function (e) {
				that._mousemove( e );
			} )
			.on( 'mouseup.autoFill', function (e) {
				that._mouseup( e );
			} );

		var select = this.dom.select;
		var offsetParent = $( dt.table().node() ).offsetParent();
		select.top.appendTo( offsetParent );
		select.left.appendTo( offsetParent );
		select.right.appendTo( offsetParent );
		select.bottom.appendTo( offsetParent );

		this._drawSelection( this.dom.start, e );

		this.dom.handle.css( 'display', 'none' );

		// Cache scrolling information so mouse move doesn't need to read.
		// This assumes that the window and DT scroller will not change size
		// during an AutoFill drag, which I think is a fair assumption
		var scrollWrapper = this.dom.dtScroll;
		this.s.scroll = {
			windowHeight: $(window).height(),
			windowWidth:  $(window).width(),
			dtTop:        scrollWrapper ? scrollWrapper.offset().top : null,
			dtLeft:       scrollWrapper ? scrollWrapper.offset().left : null,
			dtHeight:     scrollWrapper ? scrollWrapper.outerHeight() : null,
			dtWidth:      scrollWrapper ? scrollWrapper.outerWidth() : null
		};
	},


	/**
	 * Mouse drag - selects the end cell and update the selection display for
	 * the end user
	 *
	 * @param  {object} e Mouse move event
	 * @private
	 */
	_mousemove: function ( e )
	{	
		var that = this;
		var dt = this.s.dt;
		var name = e.target.nodeName.toLowerCase();
		if ( name !== 'td' && name !== 'th' ) {
			return;
		}

		this._drawSelection( e.target, e );
		this._shiftScroll( e );
	},


	/**
	 * End mouse drag - perform the update actions
	 *
	 * @param  {object} e Mouse up event
	 * @private
	 */
	_mouseup: function ( e )
	{
		$(document.body).off( '.autoFill' );

		var that = this;
		var dt = this.s.dt;
		var select = this.dom.select;
		select.top.remove();
		select.left.remove();
		select.right.remove();
		select.bottom.remove();

		this.dom.handle.css( 'display', 'block' );

		// Display complete - now do something useful with the selection!
		var start = this.s.start;
		var end = this.s.end;

		// Haven't selected multiple cells, so nothing to do
		if ( start.row === end.row && start.column === end.column ) {
			return;
		}

		var startDt = dt.cell( ':eq('+start.row+')', start.column+':visible', {page:'current'} );

		// If Editor is active inside this cell (inline editing) we need to wait for Editor to
		// submit and then we can loop back and trigger the fill.
		if ( $('div.DTE', startDt.node()).length ) {
			var editor = dt.editor();

			editor
				.on( 'submitSuccess.dtaf close.dtaf', function () {
					editor.off( '.dtaf');

					setTimeout( function () {
						that._mouseup( e );
					}, 100 );
				} )
				.on( 'submitComplete.dtaf preSubmitCancelled.dtaf close.dtaf', function () {
					editor.off( '.dtaf');
				} );

			// Make the current input submit
			editor.submit();

			return;
		}

		// Build a matrix representation of the selected rows
		var rows       = this._range( start.row, end.row );
		var columns    = this._range( start.column, end.column );
		var selected   = [];
		var dtSettings = dt.settings()[0];
		var dtColumns  = dtSettings.aoColumns;

		// Can't use Array.prototype.map as IE8 doesn't support it
		// Can't use $.map as jQuery flattens 2D arrays
		// Need to use a good old fashioned for loop
		for ( var rowIdx=0 ; rowIdx<rows.length ; rowIdx++ ) {
			selected.push(
				$.map( columns, function (column) {
					var row = dt.row( ':eq('+rows[rowIdx]+')', {page:'current'} ); // Workaround for M581
					var cell = dt.cell( row.index(), column+':visible' );
					var data = cell.data();
					var cellIndex = cell.index();
					var editField = dtColumns[ cellIndex.column ].editField;

					if ( editField !== undefined ) {
						data = dtSettings.oApi._fnGetObjectDataFn( editField )( dt.row( cellIndex.row ).data() );
					}

					return {
						cell:  cell,
						data:  data,
						label: cell.data(),
						index: cellIndex
					};
				} )
			);
		}

		this._actionSelector( selected );
		
		// Stop shiftScroll
		clearInterval( this.s.scrollInterval );
		this.s.scrollInterval = null;
	},


	/**
	 * Create an array with a range of numbers defined by the start and end
	 * parameters passed in (inclusive!).
	 * 
	 * @param  {integer} start Start
	 * @param  {integer} end   End
	 * @private
	 */
	_range: function ( start, end )
	{
		var out = [];
		var i;

		if ( start <= end ) {
			for ( i=start ; i<=end ; i++ ) {
				out.push( i );
			}
		}
		else {
			for ( i=start ; i>=end ; i-- ) {
				out.push( i );
			}
		}

		return out;
	},


	/**
	 * Move the window and DataTables scrolling during a drag to scroll new
	 * content into view. This is done by proximity to the edge of the scrolling
	 * container of the mouse - for example near the top edge of the window
	 * should scroll up. This is a little complicated as there are two elements
	 * that can be scrolled - the window and the DataTables scrolling view port
	 * (if scrollX and / or scrollY is enabled).
	 *
	 * @param  {object} e Mouse move event object
	 * @private
	 */
	_shiftScroll: function ( e )
	{
		var that = this;
		var dt = this.s.dt;
		var scroll = this.s.scroll;
		var runInterval = false;
		var scrollSpeed = 5;
		var buffer = 65;
		var
			windowY = e.pageY - document.body.scrollTop,
			windowX = e.pageX - document.body.scrollLeft,
			windowVert, windowHoriz,
			dtVert, dtHoriz;

		// Window calculations - based on the mouse position in the window,
		// regardless of scrolling
		if ( windowY < buffer ) {
			windowVert = scrollSpeed * -1;
		}
		else if ( windowY > scroll.windowHeight - buffer ) {
			windowVert = scrollSpeed;
		}

		if ( windowX < buffer ) {
			windowHoriz = scrollSpeed * -1;
		}
		else if ( windowX > scroll.windowWidth - buffer ) {
			windowHoriz = scrollSpeed;
		}

		// DataTables scrolling calculations - based on the table's position in
		// the document and the mouse position on the page
		if ( scroll.dtTop !== null && e.pageY < scroll.dtTop + buffer ) {
			dtVert = scrollSpeed * -1;
		}
		else if ( scroll.dtTop !== null && e.pageY > scroll.dtTop + scroll.dtHeight - buffer ) {
			dtVert = scrollSpeed;
		}

		if ( scroll.dtLeft !== null && e.pageX < scroll.dtLeft + buffer ) {
			dtHoriz = scrollSpeed * -1;
		}
		else if ( scroll.dtLeft !== null && e.pageX > scroll.dtLeft + scroll.dtWidth - buffer ) {
			dtHoriz = scrollSpeed;
		}

		// This is where it gets interesting. We want to continue scrolling
		// without requiring a mouse move, so we need an interval to be
		// triggered. The interval should continue until it is no longer needed,
		// but it must also use the latest scroll commands (for example consider
		// that the mouse might move from scrolling up to scrolling left, all
		// with the same interval running. We use the `scroll` object to "pass"
		// this information to the interval. Can't use local variables as they
		// wouldn't be the ones that are used by an already existing interval!
		if ( windowVert || windowHoriz || dtVert || dtHoriz ) {
			scroll.windowVert = windowVert;
			scroll.windowHoriz = windowHoriz;
			scroll.dtVert = dtVert;
			scroll.dtHoriz = dtHoriz;
			runInterval = true;
		}
		else if ( this.s.scrollInterval ) {
			// Don't need to scroll - remove any existing timer
			clearInterval( this.s.scrollInterval );
			this.s.scrollInterval = null;
		}

		// If we need to run the interval to scroll and there is no existing
		// interval (if there is an existing one, it will continue to run)
		if ( ! this.s.scrollInterval && runInterval ) {
			this.s.scrollInterval = setInterval( function () {
				// Don't need to worry about setting scroll <0 or beyond the
				// scroll bound as the browser will just reject that.
				if ( scroll.windowVert ) {
					document.body.scrollTop += scroll.windowVert;
				}
				if ( scroll.windowHoriz ) {
					document.body.scrollLeft += scroll.windowHoriz;
				}

				// DataTables scrolling
				if ( scroll.dtVert || scroll.dtHoriz ) {
					var scroller = that.dom.dtScroll[0];

					if ( scroll.dtVert ) {
						scroller.scrollTop += scroll.dtVert;
					}
					if ( scroll.dtHoriz ) {
						scroller.scrollLeft += scroll.dtHoriz;
					}
				}
			}, 20 );
		}
	},


	/**
	 * Update the DataTable after the user has selected what they want to do
	 *
	 * @param  {false|undefined} result Return from the `execute` method - can
	 *   be false internally to do nothing. This is not documented for plug-ins
	 *   and is used only by the cancel option.
	 * @param {array} cells Information about the selected cells from the key
	 *     up function, argumented with the set values
	 * @private
	 */
	_update: function ( result, cells )
	{
		// Do nothing on `false` return from an execute function
		if ( result === false ) {
			return;
		}

		var dt = this.s.dt;
		var cell;
		var columns = dt.columns( this.c.columns ).indexes();

		// Potentially allow modifications to the cells matrix
		this._emitEvent( 'preAutoFill', [ dt, cells ] );

		this._editor( cells );

		// Automatic updates are not performed if `update` is null and the
		// `editor` parameter is passed in - the reason being that Editor will
		// update the data once submitted
		var update = this.c.update !== null ?
			this.c.update :
			this.c.editor ?
				false :
				true;

		if ( update ) {
			for ( var i=0, ien=cells.length ; i<ien ; i++ ) {
				for ( var j=0, jen=cells[i].length ; j<jen ; j++ ) {
					cell = cells[i][j];

					if ( columns.indexOf(cell.index.column) !== -1 ) {
						cell.cell.data( cell.set );
					}
				}
			}

			dt.draw(false);
		}

		this._emitEvent( 'autoFill', [ dt, cells ] );
	}
} );


/**
 * AutoFill actions. The options here determine how AutoFill will fill the data
 * in the table when the user has selected a range of cells. Please see the
 * documentation on the DataTables site for full details on how to create plug-
 * ins.
 *
 * @type {Object}
 */
AutoFill.actions = {
	increment: {
		available: function ( dt, cells ) {
			var d = cells[0][0].label;

			// is numeric test based on jQuery's old `isNumeric` function
			return !isNaN( d - parseFloat( d ) );
		},

		option: function ( dt, cells ) {
			return dt.i18n(
				'autoFill.increment',
				'Increment / decrement each cell by: <input type="number" value="1">'
			);
		},

		execute: function ( dt, cells, node ) {
			var value = cells[0][0].data * 1;
			var increment = $('input', node).val() * 1;

			for ( var i=0, ien=cells.length ; i<ien ; i++ ) {
				for ( var j=0, jen=cells[i].length ; j<jen ; j++ ) {
					cells[i][j].set = value;

					value += increment;
				}
			}
		}
	},

	fill: {
		available: function ( dt, cells ) {
			return true;
		},

		option: function ( dt, cells ) {
			return dt.i18n('autoFill.fill', 'Fill all cells with <i>'+cells[0][0].label+'</i>' );
		},

		execute: function ( dt, cells, node ) {
			var value = cells[0][0].data;

			for ( var i=0, ien=cells.length ; i<ien ; i++ ) {
				for ( var j=0, jen=cells[i].length ; j<jen ; j++ ) {
					cells[i][j].set = value;
				}
			}
		}
	},

	fillHorizontal: {
		available: function ( dt, cells ) {
			return cells.length > 1 && cells[0].length > 1;
		},

		option: function ( dt, cells ) {
			return dt.i18n('autoFill.fillHorizontal', 'Fill cells horizontally' );
		},

		execute: function ( dt, cells, node ) {
			for ( var i=0, ien=cells.length ; i<ien ; i++ ) {
				for ( var j=0, jen=cells[i].length ; j<jen ; j++ ) {
					cells[i][j].set = cells[i][0].data;
				}
			}
		}
	},

	fillVertical: {
		available: function ( dt, cells ) {
			return cells.length > 1 && cells[0].length > 1;
		},

		option: function ( dt, cells ) {
			return dt.i18n('autoFill.fillVertical', 'Fill cells vertically' );
		},

		execute: function ( dt, cells, node ) {
			for ( var i=0, ien=cells.length ; i<ien ; i++ ) {
				for ( var j=0, jen=cells[i].length ; j<jen ; j++ ) {
					cells[i][j].set = cells[0][j].data;
				}
			}
		}
	},

	// Special type that does not make itself available, but is added
	// automatically by AutoFill if a multi-choice list is shown. This allows
	// sensible code reuse
	cancel: {
		available: function () {
			return false;
		},

		option: function ( dt ) {
			return dt.i18n('autoFill.cancel', 'Cancel' );
		},

		execute: function () {
			return false;
		}
	}
};


/**
 * AutoFill version
 * 
 * @static
 * @type      String
 */
AutoFill.version = '2.3.3';


/**
 * AutoFill defaults
 * 
 * @namespace
 */
AutoFill.defaults = {
	/** @type {Boolean} Ask user what they want to do, even for a single option */
	alwaysAsk: false,

	/** @type {string|null} What will trigger a focus */
	focus: null, // focus, click, hover

	/** @type {column-selector} Columns to provide auto fill for */
	columns: '', // all

	/** @type {Boolean} Enable AutoFill on load */
	enable: true,

	/** @type {boolean|null} Update the cells after a drag */
	update: null, // false is editor given, true otherwise

	/** @type {DataTable.Editor} Editor instance for automatic submission */
	editor: null,

	/** @type {boolean} Enable vertical fill */
	vertical: true,

	/** @type {boolean} Enable horizontal fill */
	horizontal: true
};


/**
 * Classes used by AutoFill that are configurable
 * 
 * @namespace
 */
AutoFill.classes = {
	/** @type {String} Class used by the selection button */
	btn: 'btn'
};


/*
 * API
 */
var Api = $.fn.dataTable.Api;

// Doesn't do anything - Not documented
Api.register( 'autoFill()', function () {
	return this;
} );

Api.register( 'autoFill().enabled()', function () {
	var ctx = this.context[0];

	return ctx.autoFill ?
		ctx.autoFill.enabled() :
		false;
} );

Api.register( 'autoFill().enable()', function ( flag ) {
	return this.iterator( 'table', function ( ctx ) {
		if ( ctx.autoFill ) {
			ctx.autoFill.enable( flag );
		}
	} );
} );

Api.register( 'autoFill().disable()', function () {
	return this.iterator( 'table', function ( ctx ) {
		if ( ctx.autoFill ) {
			ctx.autoFill.disable();
		}
	} );
} );


// Attach a listener to the document which listens for DataTables initialisation
// events so we can automatically initialise
$(document).on( 'preInit.dt.autofill', function (e, settings, json) {
	if ( e.namespace !== 'dt' ) {
		return;
	}

	var init = settings.oInit.autoFill;
	var defaults = DataTable.defaults.autoFill;

	if ( init || defaults ) {
		var opts = $.extend( {}, init, defaults );

		if ( init !== false ) {
			new AutoFill( settings, opts  );
		}
	}
} );


// Alias for access
DataTable.AutoFill = AutoFill;
DataTable.AutoFill = AutoFill;


return AutoFill;
}));


/*! Buttons for DataTables 1.5.6
 * Â©2016-2019 SpryMedia Ltd - datatables.net/license
 */

(function( factory ){
	if ( typeof define === 'function' && define.amd ) {
		// AMD
		define( ['jquery', 'datatables.net'], function ( $ ) {
			return factory( $, window, document );
		} );
	}
	else if ( typeof exports === 'object' ) {
		// CommonJS
		module.exports = function (root, $) {
			if ( ! root ) {
				root = window;
			}

			if ( ! $ || ! $.fn.dataTable ) {
				$ = require('datatables.net')(root, $).$;
			}

			return factory( $, root, root.document );
		};
	}
	else {
		// Browser
		factory( jQuery, window, document );
	}
}(function( $, window, document, undefined ) {
'use strict';
var DataTable = $.fn.dataTable;


// Used for namespacing events added to the document by each instance, so they
// can be removed on destroy
var _instCounter = 0;

// Button namespacing counter for namespacing events on individual buttons
var _buttonCounter = 0;

var _dtButtons = DataTable.ext.buttons;

/**
 * [Buttons description]
 * @param {[type]}
 * @param {[type]}
 */
var Buttons = function( dt, config )
{
	// If not created with a `new` keyword then we return a wrapper function that
	// will take the settings object for a DT. This allows easy use of new instances
	// with the `layout` option - e.g. `topLeft: $.fn.dataTable.Buttons( ... )`.
	if ( !(this instanceof Buttons) ) {
		return function (settings) {
			return new Buttons( settings, dt ).container();
		};
	}

	// If there is no config set it to an empty object
	if ( typeof( config ) === 'undefined' ) {
		config = {};	
	}
	
	// Allow a boolean true for defaults
	if ( config === true ) {
		config = {};
	}

	// For easy configuration of buttons an array can be given
	if ( $.isArray( config ) ) {
		config = { buttons: config };
	}

	this.c = $.extend( true, {}, Buttons.defaults, config );

	// Don't want a deep copy for the buttons
	if ( config.buttons ) {
		this.c.buttons = config.buttons;
	}

	this.s = {
		dt: new DataTable.Api( dt ),
		buttons: [],
		listenKeys: '',
		namespace: 'dtb'+(_instCounter++)
	};

	this.dom = {
		container: $('<'+this.c.dom.container.tag+'/>')
			.addClass( this.c.dom.container.className )
	};

	this._constructor();
};


$.extend( Buttons.prototype, {
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Public methods
	 */

	/**
	 * Get the action of a button
	 * @param  {int|string} Button index
	 * @return {function}
	 *//**
	 * Set the action of a button
	 * @param  {node} node Button element
	 * @param  {function} action Function to set
	 * @return {Buttons} Self for chaining
	 */
	action: function ( node, action )
	{
		var button = this._nodeToButton( node );

		if ( action === undefined ) {
			return button.conf.action;
		}

		button.conf.action = action;

		return this;
	},

	/**
	 * Add an active class to the button to make to look active or get current
	 * active state.
	 * @param  {node} node Button element
	 * @param  {boolean} [flag] Enable / disable flag
	 * @return {Buttons} Self for chaining or boolean for getter
	 */
	active: function ( node, flag ) {
		var button = this._nodeToButton( node );
		var klass = this.c.dom.button.active;
		var jqNode = $(button.node);

		if ( flag === undefined ) {
			return jqNode.hasClass( klass );
		}

		jqNode.toggleClass( klass, flag === undefined ? true : flag );

		return this;
	},

	/**
	 * Add a new button
	 * @param {object} config Button configuration object, base string name or function
	 * @param {int|string} [idx] Button index for where to insert the button
	 * @return {Buttons} Self for chaining
	 */
	add: function ( config, idx )
	{
		var buttons = this.s.buttons;

		if ( typeof idx === 'string' ) {
			var split = idx.split('-');
			var base = this.s;

			for ( var i=0, ien=split.length-1 ; i<ien ; i++ ) {
				base = base.buttons[ split[i]*1 ];
			}

			buttons = base.buttons;
			idx = split[ split.length-1 ]*1;
		}

		this._expandButton( buttons, config, false, idx );
		this._draw();

		return this;
	},

	/**
	 * Get the container node for the buttons
	 * @return {jQuery} Buttons node
	 */
	container: function ()
	{
		return this.dom.container;
	},

	/**
	 * Disable a button
	 * @param  {node} node Button node
	 * @return {Buttons} Self for chaining
	 */
	disable: function ( node ) {
		var button = this._nodeToButton( node );

		$(button.node).addClass( this.c.dom.button.disabled );

		return this;
	},

	/**
	 * Destroy the instance, cleaning up event handlers and removing DOM
	 * elements
	 * @return {Buttons} Self for chaining
	 */
	destroy: function ()
	{
		// Key event listener
		$('body').off( 'keyup.'+this.s.namespace );

		// Individual button destroy (so they can remove their own events if
		// needed). Take a copy as the array is modified by `remove`
		var buttons = this.s.buttons.slice();
		var i, ien;
		
		for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
			this.remove( buttons[i].node );
		}

		// Container
		this.dom.container.remove();

		// Remove from the settings object collection
		var buttonInsts = this.s.dt.settings()[0];

		for ( i=0, ien=buttonInsts.length ; i<ien ; i++ ) {
			if ( buttonInsts.inst === this ) {
				buttonInsts.splice( i, 1 );
				break;
			}
		}

		return this;
	},

	/**
	 * Enable / disable a button
	 * @param  {node} node Button node
	 * @param  {boolean} [flag=true] Enable / disable flag
	 * @return {Buttons} Self for chaining
	 */
	enable: function ( node, flag )
	{
		if ( flag === false ) {
			return this.disable( node );
		}

		var button = this._nodeToButton( node );
		$(button.node).removeClass( this.c.dom.button.disabled );

		return this;
	},

	/**
	 * Get the instance name for the button set selector
	 * @return {string} Instance name
	 */
	name: function ()
	{
		return this.c.name;
	},

	/**
	 * Get a button's node of the buttons container if no button is given
	 * @param  {node} [node] Button node
	 * @return {jQuery} Button element, or container
	 */
	node: function ( node )
	{
		if ( ! node ) {
			return this.dom.container;
		}

		var button = this._nodeToButton( node );
		return $(button.node);
	},

	/**
	 * Set / get a processing class on the selected button
	 * @param  {boolean} flag true to add, false to remove, undefined to get
	 * @return {boolean|Buttons} Getter value or this if a setter.
	 */
	processing: function ( node, flag )
	{
		var button = this._nodeToButton( node );

		if ( flag === undefined ) {
			return $(button.node).hasClass( 'processing' );
		}

		$(button.node).toggleClass( 'processing', flag );

		return this;
	},

	/**
	 * Remove a button.
	 * @param  {node} node Button node
	 * @return {Buttons} Self for chaining
	 */
	remove: function ( node )
	{
		var button = this._nodeToButton( node );
		var host = this._nodeToHost( node );
		var dt = this.s.dt;

		// Remove any child buttons first
		if ( button.buttons.length ) {
			for ( var i=button.buttons.length-1 ; i>=0 ; i-- ) {
				this.remove( button.buttons[i].node );
			}
		}

		// Allow the button to remove event handlers, etc
		if ( button.conf.destroy ) {
			button.conf.destroy.call( dt.button(node), dt, $(node), button.conf );
		}

		this._removeKey( button.conf );

		$(button.node).remove();

		var idx = $.inArray( button, host );
		host.splice( idx, 1 );

		return this;
	},

	/**
	 * Get the text for a button
	 * @param  {int|string} node Button index
	 * @return {string} Button text
	 *//**
	 * Set the text for a button
	 * @param  {int|string|function} node Button index
	 * @param  {string} label Text
	 * @return {Buttons} Self for chaining
	 */
	text: function ( node, label )
	{
		var button = this._nodeToButton( node );
		var buttonLiner = this.c.dom.collection.buttonLiner;
		var linerTag = button.inCollection && buttonLiner && buttonLiner.tag ?
			buttonLiner.tag :
			this.c.dom.buttonLiner.tag;
		var dt = this.s.dt;
		var jqNode = $(button.node);
		var text = function ( opt ) {
			return typeof opt === 'function' ?
				opt( dt, jqNode, button.conf ) :
				opt;
		};

		if ( label === undefined ) {
			return text( button.conf.text );
		}

		button.conf.text = label;

		if ( linerTag ) {
			jqNode.children( linerTag ).html( text(label) );
		}
		else {
			jqNode.html( text(label) );
		}

		return this;
	},


	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Constructor
	 */

	/**
	 * Buttons constructor
	 * @private
	 */
	_constructor: function ()
	{
		var that = this;
		var dt = this.s.dt;
		var dtSettings = dt.settings()[0];
		var buttons =  this.c.buttons;

		if ( ! dtSettings._buttons ) {
			dtSettings._buttons = [];
		}

		dtSettings._buttons.push( {
			inst: this,
			name: this.c.name
		} );

		for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
			this.add( buttons[i] );
		}

		dt.on( 'destroy', function ( e, settings ) {
			if ( settings === dtSettings ) {
				that.destroy();
			}
		} );

		// Global key event binding to listen for button keys
		$('body').on( 'keyup.'+this.s.namespace, function ( e ) {
			if ( ! document.activeElement || document.activeElement === document.body ) {
				// SUse a string of characters for fast lookup of if we need to
				// handle this
				var character = String.fromCharCode(e.keyCode).toLowerCase();

				if ( that.s.listenKeys.toLowerCase().indexOf( character ) !== -1 ) {
					that._keypress( character, e );
				}
			}
		} );
	},


	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Private methods
	 */

	/**
	 * Add a new button to the key press listener
	 * @param {object} conf Resolved button configuration object
	 * @private
	 */
	_addKey: function ( conf )
	{
		if ( conf.key ) {
			this.s.listenKeys += $.isPlainObject( conf.key ) ?
				conf.key.key :
				conf.key;
		}
	},

	/**
	 * Insert the buttons into the container. Call without parameters!
	 * @param  {node} [container] Recursive only - Insert point
	 * @param  {array} [buttons] Recursive only - Buttons array
	 * @private
	 */
	_draw: function ( container, buttons )
	{
		if ( ! container ) {
			container = this.dom.container;
			buttons = this.s.buttons;
		}

		container.children().detach();

		for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
			container.append( buttons[i].inserter );
			container.append( ' ' );

			if ( buttons[i].buttons && buttons[i].buttons.length ) {
				this._draw( buttons[i].collection, buttons[i].buttons );
			}
		}
	},

	/**
	 * Create buttons from an array of buttons
	 * @param  {array} attachTo Buttons array to attach to
	 * @param  {object} button Button definition
	 * @param  {boolean} inCollection true if the button is in a collection
	 * @private
	 */
	_expandButton: function ( attachTo, button, inCollection, attachPoint )
	{
		var dt = this.s.dt;
		var buttonCounter = 0;
		var buttons = ! $.isArray( button ) ?
			[ button ] :
			button;

		for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
			var conf = this._resolveExtends( buttons[i] );

			if ( ! conf ) {
				continue;
			}

			// If the configuration is an array, then expand the buttons at this
			// point
			if ( $.isArray( conf ) ) {
				this._expandButton( attachTo, conf, inCollection, attachPoint );
				continue;
			}

			var built = this._buildButton( conf, inCollection );
			if ( ! built ) {
				continue;
			}

			if ( attachPoint !== undefined ) {
				attachTo.splice( attachPoint, 0, built );
				attachPoint++;
			}
			else {
				attachTo.push( built );
			}

			if ( built.conf.buttons ) {
				var collectionDom = this.c.dom.collection;
				built.collection = $('<'+collectionDom.tag+'/>')
					.addClass( collectionDom.className )
					.attr( 'role', 'menu' ) ;
				built.conf._collection = built.collection;

				this._expandButton( built.buttons, built.conf.buttons, true, attachPoint );
			}

			// init call is made here, rather than buildButton as it needs to
			// be selectable, and for that it needs to be in the buttons array
			if ( conf.init ) {
				conf.init.call( dt.button( built.node ), dt, $(built.node), conf );
			}

			buttonCounter++;
		}
	},

	/**
	 * Create an individual button
	 * @param  {object} config            Resolved button configuration
	 * @param  {boolean} inCollection `true` if a collection button
	 * @return {jQuery} Created button node (jQuery)
	 * @private
	 */
	_buildButton: function ( config, inCollection )
	{
		var buttonDom = this.c.dom.button;
		var linerDom = this.c.dom.buttonLiner;
		var collectionDom = this.c.dom.collection;
		var dt = this.s.dt;
		var text = function ( opt ) {
			return typeof opt === 'function' ?
				opt( dt, button, config ) :
				opt;
		};

		if ( inCollection && collectionDom.button ) {
			buttonDom = collectionDom.button;
		}

		if ( inCollection && collectionDom.buttonLiner ) {
			linerDom = collectionDom.buttonLiner;
		}

		// Make sure that the button is available based on whatever requirements
		// it has. For example, Flash buttons require Flash
		if ( config.available && ! config.available( dt, config ) ) {
			return false;
		}

		var action = function ( e, dt, button, config ) {
			config.action.call( dt.button( button ), e, dt, button, config );

			$(dt.table().node()).triggerHandler( 'buttons-action.dt', [
				dt.button( button ), dt, button, config 
			] );
		};

		var tag = config.tag || buttonDom.tag;
		var clickBlurs = config.clickBlurs === undefined ? true : config.clickBlurs
		var button = $('<'+tag+'/>')
			.addClass( buttonDom.className )
			.attr( 'tabindex', this.s.dt.settings()[0].iTabIndex )
			.attr( 'aria-controls', this.s.dt.table().node().id )
			.on( 'click.dtb', function (e) {
				e.preventDefault();

				if ( ! button.hasClass( buttonDom.disabled ) && config.action ) {
					action( e, dt, button, config );
				}
				if( clickBlurs ) {
					button.blur();
				}
			} )
			.on( 'keyup.dtb', function (e) {
				if ( e.keyCode === 13 ) {
					if ( ! button.hasClass( buttonDom.disabled ) && config.action ) {
						action( e, dt, button, config );
					}
				}
			} );

		// Make `a` tags act like a link
		if ( tag.toLowerCase() === 'a' ) {
			button.attr( 'href', '#' );
		}

		// Button tags should have `type=button` so they don't have any default behaviour
		if ( tag.toLowerCase() === 'button' ) {
			button.attr( 'type', 'button' );
		}

		if ( linerDom.tag ) {
			var liner = $('<'+linerDom.tag+'/>')
				.html( text( config.text ) )
				.addClass( linerDom.className );

			if ( linerDom.tag.toLowerCase() === 'a' ) {
				liner.attr( 'href', '#' );
			}

			button.append( liner );
		}
		else {
			button.html( text( config.text ) );
		}

		if ( config.enabled === false ) {
			button.addClass( buttonDom.disabled );
		}

		if ( config.className ) {
			button.addClass( config.className );
		}

		if ( config.titleAttr ) {
			button.attr( 'title', text( config.titleAttr ) );
		}

		if ( config.attr ) {
			button.attr( config.attr );
		}

		if ( ! config.namespace ) {
			config.namespace = '.dt-button-'+(_buttonCounter++);
		}

		var buttonContainer = this.c.dom.buttonContainer;
		var inserter;
		if ( buttonContainer && buttonContainer.tag ) {
			inserter = $('<'+buttonContainer.tag+'/>')
				.addClass( buttonContainer.className )
				.append( button );
		}
		else {
			inserter = button;
		}

		this._addKey( config );

		// Style integration callback for DOM manipulation
		// Note that this is _not_ documented. It is currently
		// for style integration only
		if( this.c.buttonCreated ) {
			inserter = this.c.buttonCreated( config, inserter );
		}

		return {
			conf:         config,
			node:         button.get(0),
			inserter:     inserter,
			buttons:      [],
			inCollection: inCollection,
			collection:   null
		};
	},

	/**
	 * Get the button object from a node (recursive)
	 * @param  {node} node Button node
	 * @param  {array} [buttons] Button array, uses base if not defined
	 * @return {object} Button object
	 * @private
	 */
	_nodeToButton: function ( node, buttons )
	{
		if ( ! buttons ) {
			buttons = this.s.buttons;
		}

		for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
			if ( buttons[i].node === node ) {
				return buttons[i];
			}

			if ( buttons[i].buttons.length ) {
				var ret = this._nodeToButton( node, buttons[i].buttons );

				if ( ret ) {
					return ret;
				}
			}
		}
	},

	/**
	 * Get container array for a button from a button node (recursive)
	 * @param  {node} node Button node
	 * @param  {array} [buttons] Button array, uses base if not defined
	 * @return {array} Button's host array
	 * @private
	 */
	_nodeToHost: function ( node, buttons )
	{
		if ( ! buttons ) {
			buttons = this.s.buttons;
		}

		for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
			if ( buttons[i].node === node ) {
				return buttons;
			}

			if ( buttons[i].buttons.length ) {
				var ret = this._nodeToHost( node, buttons[i].buttons );

				if ( ret ) {
					return ret;
				}
			}
		}
	},

	/**
	 * Handle a key press - determine if any button's key configured matches
	 * what was typed and trigger the action if so.
	 * @param  {string} character The character pressed
	 * @param  {object} e Key event that triggered this call
	 * @private
	 */
	_keypress: function ( character, e )
	{
		// Check if this button press already activated on another instance of Buttons
		if ( e._buttonsHandled ) {
			return;
		}

		var run = function ( conf, node ) {
			if ( ! conf.key ) {
				return;
			}

			if ( conf.key === character ) {
				e._buttonsHandled = true;
				$(node).click();
			}
			else if ( $.isPlainObject( conf.key ) ) {
				if ( conf.key.key !== character ) {
					return;
				}

				if ( conf.key.shiftKey && ! e.shiftKey ) {
					return;
				}

				if ( conf.key.altKey && ! e.altKey ) {
					return;
				}

				if ( conf.key.ctrlKey && ! e.ctrlKey ) {
					return;
				}

				if ( conf.key.metaKey && ! e.metaKey ) {
					return;
				}

				// Made it this far - it is good
				e._buttonsHandled = true;
				$(node).click();
			}
		};

		var recurse = function ( a ) {
			for ( var i=0, ien=a.length ; i<ien ; i++ ) {
				run( a[i].conf, a[i].node );

				if ( a[i].buttons.length ) {
					recurse( a[i].buttons );
				}
			}
		};

		recurse( this.s.buttons );
	},

	/**
	 * Remove a key from the key listener for this instance (to be used when a
	 * button is removed)
	 * @param  {object} conf Button configuration
	 * @private
	 */
	_removeKey: function ( conf )
	{
		if ( conf.key ) {
			var character = $.isPlainObject( conf.key ) ?
				conf.key.key :
				conf.key;

			// Remove only one character, as multiple buttons could have the
			// same listening key
			var a = this.s.listenKeys.split('');
			var idx = $.inArray( character, a );
			a.splice( idx, 1 );
			this.s.listenKeys = a.join('');
		}
	},

	/**
	 * Resolve a button configuration
	 * @param  {string|function|object} conf Button config to resolve
	 * @return {object} Button configuration
	 * @private
	 */
	_resolveExtends: function ( conf )
	{
		var dt = this.s.dt;
		var i, ien;
		var toConfObject = function ( base ) {
			var loop = 0;

			// Loop until we have resolved to a button configuration, or an
			// array of button configurations (which will be iterated
			// separately)
			while ( ! $.isPlainObject(base) && ! $.isArray(base) ) {
				if ( base === undefined ) {
					return;
				}

				if ( typeof base === 'function' ) {
					base = base( dt, conf );

					if ( ! base ) {
						return false;
					}
				}
				else if ( typeof base === 'string' ) {
					if ( ! _dtButtons[ base ] ) {
						throw 'Unknown button type: '+base;
					}

					base = _dtButtons[ base ];
				}

				loop++;
				if ( loop > 30 ) {
					// Protect against misconfiguration killing the browser
					throw 'Buttons: Too many iterations';
				}
			}

			return $.isArray( base ) ?
				base :
				$.extend( {}, base );
		};

		conf = toConfObject( conf );

		while ( conf && conf.extend ) {
			// Use `toConfObject` in case the button definition being extended
			// is itself a string or a function
			if ( ! _dtButtons[ conf.extend ] ) {
				throw 'Cannot extend unknown button type: '+conf.extend;
			}

			var objArray = toConfObject( _dtButtons[ conf.extend ] );
			if ( $.isArray( objArray ) ) {
				return objArray;
			}
			else if ( ! objArray ) {
				// This is a little brutal as it might be possible to have a
				// valid button without the extend, but if there is no extend
				// then the host button would be acting in an undefined state
				return false;
			}

			// Stash the current class name
			var originalClassName = objArray.className;

			conf = $.extend( {}, objArray, conf );

			// The extend will have overwritten the original class name if the
			// `conf` object also assigned a class, but we want to concatenate
			// them so they are list that is combined from all extended buttons
			if ( originalClassName && conf.className !== originalClassName ) {
				conf.className = originalClassName+' '+conf.className;
			}

			// Buttons to be added to a collection  -gives the ability to define
			// if buttons should be added to the start or end of a collection
			var postfixButtons = conf.postfixButtons;
			if ( postfixButtons ) {
				if ( ! conf.buttons ) {
					conf.buttons = [];
				}

				for ( i=0, ien=postfixButtons.length ; i<ien ; i++ ) {
					conf.buttons.push( postfixButtons[i] );
				}

				conf.postfixButtons = null;
			}

			var prefixButtons = conf.prefixButtons;
			if ( prefixButtons ) {
				if ( ! conf.buttons ) {
					conf.buttons = [];
				}

				for ( i=0, ien=prefixButtons.length ; i<ien ; i++ ) {
					conf.buttons.splice( i, 0, prefixButtons[i] );
				}

				conf.prefixButtons = null;
			}

			// Although we want the `conf` object to overwrite almost all of
			// the properties of the object being extended, the `extend`
			// property should come from the object being extended
			conf.extend = objArray.extend;
		}

		return conf;
	}
} );



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Statics
 */

/**
 * Show / hide a background layer behind a collection
 * @param  {boolean} Flag to indicate if the background should be shown or
 *   hidden 
 * @param  {string} Class to assign to the background
 * @static
 */
Buttons.background = function ( show, className, fade, insertPoint ) {
	if ( fade === undefined ) {
		fade = 400;
	}
	if ( ! insertPoint ) {
		insertPoint = document.body;
	}

	if ( show ) {
		$('<div/>')
			.addClass( className )
			.css( 'display', 'none' )
			.insertAfter( insertPoint )
			.stop()
			.fadeIn( fade );
	}
	else {
		$('div.'+className)
			.stop()
			.fadeOut( fade, function () {
				$(this)
					.removeClass( className )
					.remove();
			} );
	}
};

/**
 * Instance selector - select Buttons instances based on an instance selector
 * value from the buttons assigned to a DataTable. This is only useful if
 * multiple instances are attached to a DataTable.
 * @param  {string|int|array} Instance selector - see `instance-selector`
 *   documentation on the DataTables site
 * @param  {array} Button instance array that was attached to the DataTables
 *   settings object
 * @return {array} Buttons instances
 * @static
 */
Buttons.instanceSelector = function ( group, buttons )
{
	if ( ! group ) {
		return $.map( buttons, function ( v ) {
			return v.inst;
		} );
	}

	var ret = [];
	var names = $.map( buttons, function ( v ) {
		return v.name;
	} );

	// Flatten the group selector into an array of single options
	var process = function ( input ) {
		if ( $.isArray( input ) ) {
			for ( var i=0, ien=input.length ; i<ien ; i++ ) {
				process( input[i] );
			}
			return;
		}

		if ( typeof input === 'string' ) {
			if ( input.indexOf( ',' ) !== -1 ) {
				// String selector, list of names
				process( input.split(',') );
			}
			else {
				// String selector individual name
				var idx = $.inArray( $.trim(input), names );

				if ( idx !== -1 ) {
					ret.push( buttons[ idx ].inst );
				}
			}
		}
		else if ( typeof input === 'number' ) {
			// Index selector
			ret.push( buttons[ input ].inst );
		}
	};
	
	process( group );

	return ret;
};

/**
 * Button selector - select one or more buttons from a selector input so some
 * operation can be performed on them.
 * @param  {array} Button instances array that the selector should operate on
 * @param  {string|int|node|jQuery|array} Button selector - see
 *   `button-selector` documentation on the DataTables site
 * @return {array} Array of objects containing `inst` and `idx` properties of
 *   the selected buttons so you know which instance each button belongs to.
 * @static
 */
Buttons.buttonSelector = function ( insts, selector )
{
	var ret = [];
	var nodeBuilder = function ( a, buttons, baseIdx ) {
		var button;
		var idx;

		for ( var i=0, ien=buttons.length ; i<ien ; i++ ) {
			button = buttons[i];

			if ( button ) {
				idx = baseIdx !== undefined ?
					baseIdx+i :
					i+'';

				a.push( {
					node: button.node,
					name: button.conf.name,
					idx:  idx
				} );

				if ( button.buttons ) {
					nodeBuilder( a, button.buttons, idx+'-' );
				}
			}
		}
	};

	var run = function ( selector, inst ) {
		var i, ien;
		var buttons = [];
		nodeBuilder( buttons, inst.s.buttons );

		var nodes = $.map( buttons, function (v) {
			return v.node;
		} );

		if ( $.isArray( selector ) || selector instanceof $ ) {
			for ( i=0, ien=selector.length ; i<ien ; i++ ) {
				run( selector[i], inst );
			}
			return;
		}

		if ( selector === null || selector === undefined || selector === '*' ) {
			// Select all
			for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
				ret.push( {
					inst: inst,
					node: buttons[i].node
				} );
			}
		}
		else if ( typeof selector === 'number' ) {
			// Main button index selector
			ret.push( {
				inst: inst,
				node: inst.s.buttons[ selector ].node
			} );
		}
		else if ( typeof selector === 'string' ) {
			if ( selector.indexOf( ',' ) !== -1 ) {
				// Split
				var a = selector.split(',');

				for ( i=0, ien=a.length ; i<ien ; i++ ) {
					run( $.trim(a[i]), inst );
				}
			}
			else if ( selector.match( /^\d+(\-\d+)*$/ ) ) {
				// Sub-button index selector
				var indexes = $.map( buttons, function (v) {
					return v.idx;
				} );

				ret.push( {
					inst: inst,
					node: buttons[ $.inArray( selector, indexes ) ].node
				} );
			}
			else if ( selector.indexOf( ':name' ) !== -1 ) {
				// Button name selector
				var name = selector.replace( ':name', '' );

				for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
					if ( buttons[i].name === name ) {
						ret.push( {
							inst: inst,
							node: buttons[i].node
						} );
					}
				}
			}
			else {
				// jQuery selector on the nodes
				$( nodes ).filter( selector ).each( function () {
					ret.push( {
						inst: inst,
						node: this
					} );
				} );
			}
		}
		else if ( typeof selector === 'object' && selector.nodeName ) {
			// Node selector
			var idx = $.inArray( selector, nodes );

			if ( idx !== -1 ) {
				ret.push( {
					inst: inst,
					node: nodes[ idx ]
				} );
			}
		}
	};


	for ( var i=0, ien=insts.length ; i<ien ; i++ ) {
		var inst = insts[i];

		run( selector, inst );
	}

	return ret;
};


/**
 * Buttons defaults. For full documentation, please refer to the docs/option
 * directory or the DataTables site.
 * @type {Object}
 * @static
 */
Buttons.defaults = {
	buttons: [ 'copy', 'excel', 'csv', 'pdf', 'print' ],
	name: 'main',
	tabIndex: 0,
	dom: {
		container: {
			tag: 'div',
			className: 'dt-buttons'
		},
		collection: {
			tag: 'div',
			className: 'dt-button-collection'
		},
		button: {
			// Flash buttons will not work with `<button>` in IE - it has to be `<a>`
			tag: 'ActiveXObject' in window ?
				'a' :
				'button',
			className: 'dt-button',
			active: 'active',
			disabled: 'disabled'
		},
		buttonLiner: {
			tag: 'span',
			className: ''
		}
	}
};

/**
 * Version information
 * @type {string}
 * @static
 */
Buttons.version = '1.5.6';


$.extend( _dtButtons, {
	collection: {
		text: function ( dt ) {
			return dt.i18n( 'buttons.collection', 'Collection' );
		},
		className: 'buttons-collection',
		init: function ( dt, button, config ) {
			button.attr( 'aria-expanded', false );
		},
		action: function ( e, dt, button, config ) {
			var close = function () {
				dt.buttons( '[aria-haspopup="true"][aria-expanded="true"]' ).nodes().each( function() {
					var collection = $(this).siblings('.dt-button-collection');

					if ( collection.length ) {
						collection.stop().fadeOut( config.fade, function () {
							collection.detach();
						} );
					}

					$(this).attr( 'aria-expanded', 'false' );
				});

				$('div.dt-button-background').off( 'click.dtb-collection' );
				Buttons.background( false, config.backgroundClassName, config.fade, insertPoint );

				$('body').off( '.dtb-collection' );
				dt.off( 'buttons-action.b-internal' );
			};

			var wasExpanded = button.attr( 'aria-expanded' ) === 'true';

			close();

			if (!wasExpanded) {
				var host = button;
				var collectionParent = $(button).parents('div.dt-button-collection');
				var hostPosition = host.position();
				var tableContainer = $( dt.table().container() );
				var multiLevel = false;
				var insertPoint = host;

				button.attr( 'aria-expanded', 'true' );

				// Remove any old collection
				if ( collectionParent.length ) {
					multiLevel = $('.dt-button-collection').position();
					insertPoint = collectionParent;
					$('body').trigger( 'click.dtb-collection' );
				}

				if ( insertPoint.parents('body')[0] !== document.body ) {
					insertPoint = document.body.lastChild;
				}

				config._collection.find('.dt-button-collection-title').remove();
				config._collection.prepend('<div class="dt-button-collection-title">'+config.collectionTitle+'</div>');

				config._collection
					.addClass( config.collectionLayout )
					.css( 'display', 'none' )
					.insertAfter( insertPoint )
					.stop()
					.fadeIn( config.fade );

				var position = config._collection.css( 'position' );

				if ( multiLevel && position === 'absolute' ) {
					config._collection.css( {
						top: multiLevel.top,
						left: multiLevel.left
					} );
				}
				else if ( position === 'absolute' ) {
					config._collection.css( {
						top: hostPosition.top + host.outerHeight(),
						left: hostPosition.left
					} );

					// calculate overflow when positioned beneath
					var tableBottom = tableContainer.offset().top + tableContainer.height();
					var listBottom = hostPosition.top + host.outerHeight() + config._collection.outerHeight();
					var bottomOverflow = listBottom - tableBottom;

					// calculate overflow when positioned above
					var listTop = hostPosition.top - config._collection.outerHeight();
					var tableTop = tableContainer.offset().top;
					var topOverflow = tableTop - listTop;

					// if bottom overflow is larger, move to the top because it fits better, or if dropup is requested
					if (bottomOverflow > topOverflow || config.dropup) {
						config._collection.css( 'top', hostPosition.top - config._collection.outerHeight() - 5);
					}

					// Right alignment is enabled on a class, e.g. bootstrap:
					// $.fn.dataTable.Buttons.defaults.dom.collection.className += " dropdown-menu-right"; 
					if ( config._collection.hasClass( config.rightAlignClassName ) ) {
						config._collection.css( 'left', hostPosition.left + host.outerWidth() - config._collection.outerWidth() );
					}

					// Right alignment in table container
					var listRight = hostPosition.left + config._collection.outerWidth();
					var tableRight = tableContainer.offset().left + tableContainer.width();
					if ( listRight > tableRight ) {
						config._collection.css( 'left', hostPosition.left - ( listRight - tableRight ) );
					}

					// Right alignment to window
					var listOffsetRight = host.offset().left + config._collection.outerWidth();
					if ( listOffsetRight > $(window).width() ) {
						config._collection.css( 'left', hostPosition.left - (listOffsetRight-$(window).width()) );
					}
				}
				else {
					// Fix position - centre on screen
					var top = config._collection.height() / 2;
					if ( top > $(window).height() / 2 ) {
						top = $(window).height() / 2;
					}

					config._collection.css( 'marginTop', top*-1 );
				}

				if ( config.background ) {
					Buttons.background( true, config.backgroundClassName, config.fade, insertPoint );
				}

				// Need to break the 'thread' for the collection button being
				// activated by a click - it would also trigger this event
				setTimeout( function () {
					// This is bonkers, but if we don't have a click listener on the
					// background element, iOS Safari will ignore the body click
					// listener below. An empty function here is all that is
					// required to make it work...
					$('div.dt-button-background').on( 'click.dtb-collection', function () {} );

					$('body')
						.on( 'click.dtb-collection', function (e) {
							// andSelf is deprecated in jQ1.8, but we want 1.7 compat
							var back = $.fn.addBack ? 'addBack' : 'andSelf';

							if ( ! $(e.target).parents()[back]().filter( config._collection ).length ) {
								close();
							}
						} )
						.on( 'keyup.dtb-collection', function (e) {
							if ( e.keyCode === 27 ) {
								close();
							}
						} );

					if ( config.autoClose ) {
						dt.on( 'buttons-action.b-internal', function () {
							close();
						} );
					}
				}, 10 );
			}
		},
		background: true,
		collectionLayout: '',
		collectionTitle: '',
		backgroundClassName: 'dt-button-background',
		rightAlignClassName: 'dt-button-right',
		autoClose: false,
		fade: 400,
		attr: {
			'aria-haspopup': true
		}
	},
	copy: function ( dt, conf ) {
		if ( _dtButtons.copyHtml5 ) {
			return 'copyHtml5';
		}
		if ( _dtButtons.copyFlash && _dtButtons.copyFlash.available( dt, conf ) ) {
			return 'copyFlash';
		}
	},
	csv: function ( dt, conf ) {
		// Common option that will use the HTML5 or Flash export buttons
		if ( _dtButtons.csvHtml5 && _dtButtons.csvHtml5.available( dt, conf ) ) {
			return 'csvHtml5';
		}
		if ( _dtButtons.csvFlash && _dtButtons.csvFlash.available( dt, conf ) ) {
			return 'csvFlash';
		}
	},
	excel: function ( dt, conf ) {
		// Common option that will use the HTML5 or Flash export buttons
		if ( _dtButtons.excelHtml5 && _dtButtons.excelHtml5.available( dt, conf ) ) {
			return 'excelHtml5';
		}
		if ( _dtButtons.excelFlash && _dtButtons.excelFlash.available( dt, conf ) ) {
			return 'excelFlash';
		}
	},
	pdf: function ( dt, conf ) {
		// Common option that will use the HTML5 or Flash export buttons
		if ( _dtButtons.pdfHtml5 && _dtButtons.pdfHtml5.available( dt, conf ) ) {
			return 'pdfHtml5';
		}
		if ( _dtButtons.pdfFlash && _dtButtons.pdfFlash.available( dt, conf ) ) {
			return 'pdfFlash';
		}
	},
	pageLength: function ( dt ) {
		var lengthMenu = dt.settings()[0].aLengthMenu;
		var vals = $.isArray( lengthMenu[0] ) ? lengthMenu[0] : lengthMenu;
		var lang = $.isArray( lengthMenu[0] ) ? lengthMenu[1] : lengthMenu;
		var text = function ( dt ) {
			return dt.i18n( 'buttons.pageLength', {
				"-1": 'Show all rows',
				_:    'Show %d rows'
			}, dt.page.len() );
		};

		return {
			extend: 'collection',
			text: text,
			className: 'buttons-page-length',
			autoClose: true,
			buttons: $.map( vals, function ( val, i ) {
				return {
					text: lang[i],
					className: 'button-page-length',
					action: function ( e, dt ) {
						dt.page.len( val ).draw();
					},
					init: function ( dt, node, conf ) {
						var that = this;
						var fn = function () {
							that.active( dt.page.len() === val );
						};

						dt.on( 'length.dt'+conf.namespace, fn );
						fn();
					},
					destroy: function ( dt, node, conf ) {
						dt.off( 'length.dt'+conf.namespace );
					}
				};
			} ),
			init: function ( dt, node, conf ) {
				var that = this;
				dt.on( 'length.dt'+conf.namespace, function () {
					that.text( conf.text );
				} );
			},
			destroy: function ( dt, node, conf ) {
				dt.off( 'length.dt'+conf.namespace );
			}
		};
	}
} );


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * DataTables API
 *
 * For complete documentation, please refer to the docs/api directory or the
 * DataTables site
 */

// Buttons group and individual button selector
DataTable.Api.register( 'buttons()', function ( group, selector ) {
	// Argument shifting
	if ( selector === undefined ) {
		selector = group;
		group = undefined;
	}

	this.selector.buttonGroup = group;

	var res = this.iterator( true, 'table', function ( ctx ) {
		if ( ctx._buttons ) {
			return Buttons.buttonSelector(
				Buttons.instanceSelector( group, ctx._buttons ),
				selector
			);
		}
	}, true );

	res._groupSelector = group;
	return res;
} );

// Individual button selector
DataTable.Api.register( 'button()', function ( group, selector ) {
	// just run buttons() and truncate
	var buttons = this.buttons( group, selector );

	if ( buttons.length > 1 ) {
		buttons.splice( 1, buttons.length );
	}

	return buttons;
} );

// Active buttons
DataTable.Api.registerPlural( 'buttons().active()', 'button().active()', function ( flag ) {
	if ( flag === undefined ) {
		return this.map( function ( set ) {
			return set.inst.active( set.node );
		} );
	}

	return this.each( function ( set ) {
		set.inst.active( set.node, flag );
	} );
} );

// Get / set button action
DataTable.Api.registerPlural( 'buttons().action()', 'button().action()', function ( action ) {
	if ( action === undefined ) {
		return this.map( function ( set ) {
			return set.inst.action( set.node );
		} );
	}

	return this.each( function ( set ) {
		set.inst.action( set.node, action );
	} );
} );

// Enable / disable buttons
DataTable.Api.register( ['buttons().enable()', 'button().enable()'], function ( flag ) {
	return this.each( function ( set ) {
		set.inst.enable( set.node, flag );
	} );
} );

// Disable buttons
DataTable.Api.register( ['buttons().disable()', 'button().disable()'], function () {
	return this.each( function ( set ) {
		set.inst.disable( set.node );
	} );
} );

// Get button nodes
DataTable.Api.registerPlural( 'buttons().nodes()', 'button().node()', function () {
	var jq = $();

	// jQuery will automatically reduce duplicates to a single entry
	$( this.each( function ( set ) {
		jq = jq.add( set.inst.node( set.node ) );
	} ) );

	return jq;
} );

// Get / set button processing state
DataTable.Api.registerPlural( 'buttons().processing()', 'button().processing()', function ( flag ) {
	if ( flag === undefined ) {
		return this.map( function ( set ) {
			return set.inst.processing( set.node );
		} );
	}

	return this.each( function ( set ) {
		set.inst.processing( set.node, flag );
	} );
} );

// Get / set button text (i.e. the button labels)
DataTable.Api.registerPlural( 'buttons().text()', 'button().text()', function ( label ) {
	if ( label === undefined ) {
		return this.map( function ( set ) {
			return set.inst.text( set.node );
		} );
	}

	return this.each( function ( set ) {
		set.inst.text( set.node, label );
	} );
} );

// Trigger a button's action
DataTable.Api.registerPlural( 'buttons().trigger()', 'button().trigger()', function () {
	return this.each( function ( set ) {
		set.inst.node( set.node ).trigger( 'click' );
	} );
} );

// Get the container elements
DataTable.Api.registerPlural( 'buttons().containers()', 'buttons().container()', function () {
	var jq = $();
	var groupSelector = this._groupSelector;

	// We need to use the group selector directly, since if there are no buttons
	// the result set will be empty
	this.iterator( true, 'table', function ( ctx ) {
		if ( ctx._buttons ) {
			var insts = Buttons.instanceSelector( groupSelector, ctx._buttons );

			for ( var i=0, ien=insts.length ; i<ien ; i++ ) {
				jq = jq.add( insts[i].container() );
			}
		}
	} );

	return jq;
} );

// Add a new button
DataTable.Api.register( 'button().add()', function ( idx, conf ) {
	var ctx = this.context;

	// Don't use `this` as it could be empty - select the instances directly
	if ( ctx.length ) {
		var inst = Buttons.instanceSelector( this._groupSelector, ctx[0]._buttons );

		if ( inst.length ) {
			inst[0].add( conf, idx );
		}
	}

	return this.button( this._groupSelector, idx );
} );

// Destroy the button sets selected
DataTable.Api.register( 'buttons().destroy()', function () {
	this.pluck( 'inst' ).unique().each( function ( inst ) {
		inst.destroy();
	} );

	return this;
} );

// Remove a button
DataTable.Api.registerPlural( 'buttons().remove()', 'buttons().remove()', function () {
	this.each( function ( set ) {
		set.inst.remove( set.node );
	} );

	return this;
} );

// Information box that can be used by buttons
var _infoTimer;
DataTable.Api.register( 'buttons.info()', function ( title, message, time ) {
	var that = this;

	if ( title === false ) {
		$('#datatables_buttons_info').fadeOut( function () {
			$(this).remove();
		} );
		clearTimeout( _infoTimer );
		_infoTimer = null;

		return this;
	}

	if ( _infoTimer ) {
		clearTimeout( _infoTimer );
	}

	if ( $('#datatables_buttons_info').length ) {
		$('#datatables_buttons_info').remove();
	}

	title = title ? '<h2>'+title+'</h2>' : '';

	$('<div id="datatables_buttons_info" class="dt-button-info"/>')
		.html( title )
		.append( $('<div/>')[ typeof message === 'string' ? 'html' : 'append' ]( message ) )
		.css( 'display', 'none' )
		.appendTo( 'body' )
		.fadeIn();

	if ( time !== undefined && time !== 0 ) {
		_infoTimer = setTimeout( function () {
			that.buttons.info( false );
		}, time );
	}

	return this;
} );

// Get data from the table for export - this is common to a number of plug-in
// buttons so it is included in the Buttons core library
DataTable.Api.register( 'buttons.exportData()', function ( options ) {
	if ( this.context.length ) {
		return _exportData( new DataTable.Api( this.context[0] ), options );
	}
} );

// Get information about the export that is common to many of the export data
// types (DRY)
DataTable.Api.register( 'buttons.exportInfo()', function ( conf ) {
	if ( ! conf ) {
		conf = {};
	}

	return {
		filename: _filename( conf ),
		title: _title( conf ),
		messageTop: _message(this, conf.message || conf.messageTop, 'top'),
		messageBottom: _message(this, conf.messageBottom, 'bottom')
	};
} );



/**
 * Get the file name for an exported file.
 *
 * @param {object}	config Button configuration
 * @param {boolean} incExtension Include the file name extension
 */
var _filename = function ( config )
{
	// Backwards compatibility
	var filename = config.filename === '*' && config.title !== '*' && config.title !== undefined && config.title !== null && config.title !== '' ?
		config.title :
		config.filename;

	if ( typeof filename === 'function' ) {
		filename = filename();
	}

	if ( filename === undefined || filename === null ) {
		return null;
	}

	if ( filename.indexOf( '*' ) !== -1 ) {
		filename = $.trim( filename.replace( '*', $('head > title').text() ) );
	}

	// Strip characters which the OS will object to
	filename = filename.replace(/[^a-zA-Z0-9_\u00A1-\uFFFF\.,\-_ !\(\)]/g, "");

	var extension = _stringOrFunction( config.extension );
	if ( ! extension ) {
		extension = '';
	}

	return filename + extension;
};

/**
 * Simply utility method to allow parameters to be given as a function
 *
 * @param {undefined|string|function} option Option
 * @return {null|string} Resolved value
 */
var _stringOrFunction = function ( option )
{
	if ( option === null || option === undefined ) {
		return null;
	}
	else if ( typeof option === 'function' ) {
		return option();
	}
	return option;
};

/**
 * Get the title for an exported file.
 *
 * @param {object} config	Button configuration
 */
var _title = function ( config )
{
	var title = _stringOrFunction( config.title );

	return title === null ?
		null : title.indexOf( '*' ) !== -1 ?
			title.replace( '*', $('head > title').text() || 'Exported data' ) :
			title;
};

var _message = function ( dt, option, position )
{
	var message = _stringOrFunction( option );
	if ( message === null ) {
		return null;
	}

	var caption = $('caption', dt.table().container()).eq(0);
	if ( message === '*' ) {
		var side = caption.css( 'caption-side' );
		if ( side !== position ) {
			return null;
		}

		return caption.length ?
			caption.text() :
			'';
	}

	return message;
};







var _exportTextarea = $('<textarea/>')[0];
var _exportData = function ( dt, inOpts )
{
	var config = $.extend( true, {}, {
		rows:           null,
		columns:        '',
		modifier:       {
			search: 'applied',
			order:  'applied'
		},
		orthogonal:     'display',
		stripHtml:      true,
		stripNewlines:  true,
		decodeEntities: true,
		trim:           true,
		format:         {
			header: function ( d ) {
				return strip( d );
			},
			footer: function ( d ) {
				return strip( d );
			},
			body: function ( d ) {
				return strip( d );
			}
		},
		customizeData: null
	}, inOpts );

	var strip = function ( str ) {
		if ( typeof str !== 'string' ) {
			return str;
		}

		// Always remove script tags
		str = str.replace( /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '' );

		// Always remove comments
		str = str.replace( /<!\-\-.*?\-\->/g, '' );

		if ( config.stripHtml ) {
			str = str.replace( /<[^>]*>/g, '' );
		}

		if ( config.trim ) {
			str = str.replace( /^\s+|\s+$/g, '' );
		}

		if ( config.stripNewlines ) {
			str = str.replace( /\n/g, ' ' );
		}

		if ( config.decodeEntities ) {
			_exportTextarea.innerHTML = str;
			str = _exportTextarea.value;
		}

		return str;
	};


	var header = dt.columns( config.columns ).indexes().map( function (idx) {
		var el = dt.column( idx ).header();
		return config.format.header( el.innerHTML, idx, el );
	} ).toArray();

	var footer = dt.table().footer() ?
		dt.columns( config.columns ).indexes().map( function (idx) {
			var el = dt.column( idx ).footer();
			return config.format.footer( el ? el.innerHTML : '', idx, el );
		} ).toArray() :
		null;
	
	// If Select is available on this table, and any rows are selected, limit the export
	// to the selected rows. If no rows are selected, all rows will be exported. Specify
	// a `selected` modifier to control directly.
	var modifier = $.extend( {}, config.modifier );
	if ( dt.select && typeof dt.select.info === 'function' && modifier.selected === undefined ) {
		if ( dt.rows( config.rows, $.extend( { selected: true }, modifier ) ).any() ) {
			$.extend( modifier, { selected: true } )
		}
	}

	var rowIndexes = dt.rows( config.rows, modifier ).indexes().toArray();
	var selectedCells = dt.cells( rowIndexes, config.columns );
	var cells = selectedCells
		.render( config.orthogonal )
		.toArray();
	var cellNodes = selectedCells
		.nodes()
		.toArray();

	var columns = header.length;
	var rows = columns > 0 ? cells.length / columns : 0;
	var body = [];
	var cellCounter = 0;

	for ( var i=0, ien=rows ; i<ien ; i++ ) {
		var row = [ columns ];

		for ( var j=0 ; j<columns ; j++ ) {
			row[j] = config.format.body( cells[ cellCounter ], i, j, cellNodes[ cellCounter ] );
			cellCounter++;
		}

		body[i] = row;
	}

	var data = {
		header: header,
		footer: footer,
		body:   body
	};

	if ( config.customizeData ) {
		config.customizeData( data );
	}

	return data;
};


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * DataTables interface
 */

// Attach to DataTables objects for global access
$.fn.dataTable.Buttons = Buttons;
$.fn.DataTable.Buttons = Buttons;



// DataTables creation - check if the buttons have been defined for this table,
// they will have been if the `B` option was used in `dom`, otherwise we should
// create the buttons instance here so they can be inserted into the document
// using the API. Listen for `init` for compatibility with pre 1.10.10, but to
// be removed in future.
$(document).on( 'init.dt plugin-init.dt', function (e, settings) {
	if ( e.namespace !== 'dt' ) {
		return;
	}

	var opts = settings.oInit.buttons || DataTable.defaults.buttons;

	if ( opts && ! settings._buttons ) {
		new Buttons( settings, opts ).container();
	}
} );

function _init ( settings ) {
	var api = new DataTable.Api( settings );
	var opts = api.init().buttons || DataTable.defaults.buttons;

	return new Buttons( api, opts ).container();
}

// DataTables `dom` feature option
DataTable.ext.feature.push( {
	fnInit: _init,
	cFeature: "B"
} );

// DataTables 2 layout feature
if ( DataTable.ext.features ) {
	DataTable.ext.features.register( 'buttons', _init );
}


return Buttons;
}));


/*! ColReorder 1.5.0
 * Â©2010-2018 SpryMedia Ltd - datatables.net/license
 */

/**
 * @summary     ColReorder
 * @description Provide the ability to reorder columns in a DataTable
 * @version     1.5.0
 * @file        dataTables.colReorder.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     www.sprymedia.co.uk/contact
 * @copyright   Copyright 2010-2018 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license/mit
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */
(function( factory ){
	if ( typeof define === 'function' && define.amd ) {
		// AMD
		define( ['jquery', 'datatables.net'], function ( $ ) {
			return factory( $, window, document );
		} );
	}
	else if ( typeof exports === 'object' ) {
		// CommonJS
		module.exports = function (root, $) {
			if ( ! root ) {
				root = window;
			}

			if ( ! $ || ! $.fn.dataTable ) {
				$ = require('datatables.net')(root, $).$;
			}

			return factory( $, root, root.document );
		};
	}
	else {
		// Browser
		factory( jQuery, window, document );
	}
}(function( $, window, document, undefined ) {
'use strict';
var DataTable = $.fn.dataTable;


/**
 * Switch the key value pairing of an index array to be value key (i.e. the old value is now the
 * key). For example consider [ 2, 0, 1 ] this would be returned as [ 1, 2, 0 ].
 *  @method  fnInvertKeyValues
 *  @param   array aIn Array to switch around
 *  @returns array
 */
function fnInvertKeyValues( aIn )
{
	var aRet=[];
	for ( var i=0, iLen=aIn.length ; i<iLen ; i++ )
	{
		aRet[ aIn[i] ] = i;
	}
	return aRet;
}


/**
 * Modify an array by switching the position of two elements
 *  @method  fnArraySwitch
 *  @param   array aArray Array to consider, will be modified by reference (i.e. no return)
 *  @param   int iFrom From point
 *  @param   int iTo Insert point
 *  @returns void
 */
function fnArraySwitch( aArray, iFrom, iTo )
{
	var mStore = aArray.splice( iFrom, 1 )[0];
	aArray.splice( iTo, 0, mStore );
}


/**
 * Switch the positions of nodes in a parent node (note this is specifically designed for
 * table rows). Note this function considers all element nodes under the parent!
 *  @method  fnDomSwitch
 *  @param   string sTag Tag to consider
 *  @param   int iFrom Element to move
 *  @param   int Point to element the element to (before this point), can be null for append
 *  @returns void
 */
function fnDomSwitch( nParent, iFrom, iTo )
{
	var anTags = [];
	for ( var i=0, iLen=nParent.childNodes.length ; i<iLen ; i++ )
	{
		if ( nParent.childNodes[i].nodeType == 1 )
		{
			anTags.push( nParent.childNodes[i] );
		}
	}
	var nStore = anTags[ iFrom ];

	if ( iTo !== null )
	{
		nParent.insertBefore( nStore, anTags[iTo] );
	}
	else
	{
		nParent.appendChild( nStore );
	}
}


/**
 * Plug-in for DataTables which will reorder the internal column structure by taking the column
 * from one position (iFrom) and insert it into a given point (iTo).
 *  @method  $.fn.dataTableExt.oApi.fnColReorder
 *  @param   object oSettings DataTables settings object - automatically added by DataTables!
 *  @param   int iFrom Take the column to be repositioned from this point
 *  @param   int iTo and insert it into this point
 *  @param   bool drop Indicate if the reorder is the final one (i.e. a drop)
 *    not a live reorder
 *  @param   bool invalidateRows speeds up processing if false passed
 *  @returns void
 */
$.fn.dataTableExt.oApi.fnColReorder = function ( oSettings, iFrom, iTo, drop, invalidateRows )
{
	var i, iLen, j, jLen, jen, iCols=oSettings.aoColumns.length, nTrs, oCol;
	var attrMap = function ( obj, prop, mapping ) {
		if ( ! obj[ prop ] || typeof obj[ prop ] === 'function' ) {
			return;
		}

		var a = obj[ prop ].split('.');
		var num = a.shift();

		if ( isNaN( num*1 ) ) {
			return;
		}

		obj[ prop ] = mapping[ num*1 ]+'.'+a.join('.');
	};

	/* Sanity check in the input */
	if ( iFrom == iTo )
	{
		/* Pointless reorder */
		return;
	}

	if ( iFrom < 0 || iFrom >= iCols )
	{
		this.oApi._fnLog( oSettings, 1, "ColReorder 'from' index is out of bounds: "+iFrom );
		return;
	}

	if ( iTo < 0 || iTo >= iCols )
	{
		this.oApi._fnLog( oSettings, 1, "ColReorder 'to' index is out of bounds: "+iTo );
		return;
	}

	/*
	 * Calculate the new column array index, so we have a mapping between the old and new
	 */
	var aiMapping = [];
	for ( i=0, iLen=iCols ; i<iLen ; i++ )
	{
		aiMapping[i] = i;
	}
	fnArraySwitch( aiMapping, iFrom, iTo );
	var aiInvertMapping = fnInvertKeyValues( aiMapping );


	/*
	 * Convert all internal indexing to the new column order indexes
	 */
	/* Sorting */
	for ( i=0, iLen=oSettings.aaSorting.length ; i<iLen ; i++ )
	{
		oSettings.aaSorting[i][0] = aiInvertMapping[ oSettings.aaSorting[i][0] ];
	}

	/* Fixed sorting */
	if ( oSettings.aaSortingFixed !== null )
	{
		for ( i=0, iLen=oSettings.aaSortingFixed.length ; i<iLen ; i++ )
		{
			oSettings.aaSortingFixed[i][0] = aiInvertMapping[ oSettings.aaSortingFixed[i][0] ];
		}
	}

	/* Data column sorting (the column which the sort for a given column should take place on) */
	for ( i=0, iLen=iCols ; i<iLen ; i++ )
	{
		oCol = oSettings.aoColumns[i];
		for ( j=0, jLen=oCol.aDataSort.length ; j<jLen ; j++ )
		{
			oCol.aDataSort[j] = aiInvertMapping[ oCol.aDataSort[j] ];
		}

		// Update the column indexes
		oCol.idx = aiInvertMapping[ oCol.idx ];
	}

	// Update 1.10 optimised sort class removal variable
	$.each( oSettings.aLastSort, function (i, val) {
		oSettings.aLastSort[i].src = aiInvertMapping[ val.src ];
	} );

	/* Update the Get and Set functions for each column */
	for ( i=0, iLen=iCols ; i<iLen ; i++ )
	{
		oCol = oSettings.aoColumns[i];

		if ( typeof oCol.mData == 'number' ) {
			oCol.mData = aiInvertMapping[ oCol.mData ];
		}
		else if ( $.isPlainObject( oCol.mData ) ) {
			// HTML5 data sourced
			attrMap( oCol.mData, '_',      aiInvertMapping );
			attrMap( oCol.mData, 'filter', aiInvertMapping );
			attrMap( oCol.mData, 'sort',   aiInvertMapping );
			attrMap( oCol.mData, 'type',   aiInvertMapping );
		}
	}

	/*
	 * Move the DOM elements
	 */
	if ( oSettings.aoColumns[iFrom].bVisible )
	{
		/* Calculate the current visible index and the point to insert the node before. The insert
		 * before needs to take into account that there might not be an element to insert before,
		 * in which case it will be null, and an appendChild should be used
		 */
		var iVisibleIndex = this.oApi._fnColumnIndexToVisible( oSettings, iFrom );
		var iInsertBeforeIndex = null;

		i = iTo < iFrom ? iTo : iTo + 1;
		while ( iInsertBeforeIndex === null && i < iCols )
		{
			iInsertBeforeIndex = this.oApi._fnColumnIndexToVisible( oSettings, i );
			i++;
		}

		/* Header */
		nTrs = oSettings.nTHead.getElementsByTagName('tr');
		for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
		{
			fnDomSwitch( nTrs[i], iVisibleIndex, iInsertBeforeIndex );
		}

		/* Footer */
		if ( oSettings.nTFoot !== null )
		{
			nTrs = oSettings.nTFoot.getElementsByTagName('tr');
			for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
			{
				fnDomSwitch( nTrs[i], iVisibleIndex, iInsertBeforeIndex );
			}
		}

		/* Body */
		for ( i=0, iLen=oSettings.aoData.length ; i<iLen ; i++ )
		{
			if ( oSettings.aoData[i].nTr !== null )
			{
				fnDomSwitch( oSettings.aoData[i].nTr, iVisibleIndex, iInsertBeforeIndex );
			}
		}
	}

	/*
	 * Move the internal array elements
	 */
	/* Columns */
	fnArraySwitch( oSettings.aoColumns, iFrom, iTo );

	// regenerate the get / set functions
	for ( i=0, iLen=iCols ; i<iLen ; i++ ) {
		oSettings.oApi._fnColumnOptions( oSettings, i, {} );
	}

	/* Search columns */
	fnArraySwitch( oSettings.aoPreSearchCols, iFrom, iTo );

	/* Array array - internal data anodes cache */
	for ( i=0, iLen=oSettings.aoData.length ; i<iLen ; i++ )
	{
		var data = oSettings.aoData[i];
		var cells = data.anCells;

		if ( cells ) {
			fnArraySwitch( cells, iFrom, iTo );

			// Longer term, should this be moved into the DataTables' invalidate
			// methods?
			for ( j=0, jen=cells.length ; j<jen ; j++ ) {
				if ( cells[j] && cells[j]._DT_CellIndex ) {
					cells[j]._DT_CellIndex.column = j;
				}
			}
		}

		// For DOM sourced data, the invalidate will reread the cell into
		// the data array, but for data sources as an array, they need to
		// be flipped
		if ( data.src !== 'dom' && $.isArray( data._aData ) ) {
			fnArraySwitch( data._aData, iFrom, iTo );
		}
	}

	/* Reposition the header elements in the header layout array */
	for ( i=0, iLen=oSettings.aoHeader.length ; i<iLen ; i++ )
	{
		fnArraySwitch( oSettings.aoHeader[i], iFrom, iTo );
	}

	if ( oSettings.aoFooter !== null )
	{
		for ( i=0, iLen=oSettings.aoFooter.length ; i<iLen ; i++ )
		{
			fnArraySwitch( oSettings.aoFooter[i], iFrom, iTo );
		}
	}

	if ( invalidateRows || invalidateRows === undefined )
	{
		$.fn.dataTable.Api( oSettings ).rows().invalidate();
	}

	/*
	 * Update DataTables' event handlers
	 */

	/* Sort listener */
	for ( i=0, iLen=iCols ; i<iLen ; i++ )
	{
		$(oSettings.aoColumns[i].nTh).off('.DT');
		this.oApi._fnSortAttachListener( oSettings, oSettings.aoColumns[i].nTh, i );
	}


	/* Fire an event so other plug-ins can update */
	$(oSettings.oInstance).trigger( 'column-reorder.dt', [ oSettings, {
		from: iFrom,
		to: iTo,
		mapping: aiInvertMapping,
		drop: drop,

		// Old style parameters for compatibility
		iFrom: iFrom,
		iTo: iTo,
		aiInvertMapping: aiInvertMapping
	} ] );
};

/**
 * ColReorder provides column visibility control for DataTables
 * @class ColReorder
 * @constructor
 * @param {object} dt DataTables settings object
 * @param {object} opts ColReorder options
 */
var ColReorder = function( dt, opts )
{
	var settings = new $.fn.dataTable.Api( dt ).settings()[0];

	// Ensure that we can't initialise on the same table twice
	if ( settings._colReorder ) {
		return settings._colReorder;
	}

	// Allow the options to be a boolean for defaults
	if ( opts === true ) {
		opts = {};
	}

	// Convert from camelCase to Hungarian, just as DataTables does
	var camelToHungarian = $.fn.dataTable.camelToHungarian;
	if ( camelToHungarian ) {
		camelToHungarian( ColReorder.defaults, ColReorder.defaults, true );
		camelToHungarian( ColReorder.defaults, opts || {} );
	}


	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Public class variables
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/**
	 * @namespace Settings object which contains customisable information for ColReorder instance
	 */
	this.s = {
		/**
		 * DataTables settings object
		 *  @property dt
		 *  @type     Object
		 *  @default  null
		 */
		"dt": null,

		/**
		 * Enable flag
		 *  @property dt
		 *  @type     Object
		 *  @default  null
		 */
		"enable": null,

		/**
		 * Initialisation object used for this instance
		 *  @property init
		 *  @type     object
		 *  @default  {}
		 */
		"init": $.extend( true, {}, ColReorder.defaults, opts ),

		/**
		 * Number of columns to fix (not allow to be reordered)
		 *  @property fixed
		 *  @type     int
		 *  @default  0
		 */
		"fixed": 0,

		/**
		 * Number of columns to fix counting from right (not allow to be reordered)
		 *  @property fixedRight
		 *  @type     int
		 *  @default  0
		 */
		"fixedRight": 0,

		/**
		 * Callback function for once the reorder has been done
		 *  @property reorderCallback
		 *  @type     function
		 *  @default  null
		 */
		"reorderCallback": null,

		/**
		 * @namespace Information used for the mouse drag
		 */
		"mouse": {
			"startX": -1,
			"startY": -1,
			"offsetX": -1,
			"offsetY": -1,
			"target": -1,
			"targetIndex": -1,
			"fromIndex": -1
		},

		/**
		 * Information which is used for positioning the insert cusor and knowing where to do the
		 * insert. Array of objects with the properties:
		 *   x: x-axis position
		 *   to: insert point
		 *  @property aoTargets
		 *  @type     array
		 *  @default  []
		 */
		"aoTargets": []
	};


	/**
	 * @namespace Common and useful DOM elements for the class instance
	 */
	this.dom = {
		/**
		 * Dragging element (the one the mouse is moving)
		 *  @property drag
		 *  @type     element
		 *  @default  null
		 */
		"drag": null,

		/**
		 * The insert cursor
		 *  @property pointer
		 *  @type     element
		 *  @default  null
		 */
		"pointer": null
	};

	/* Constructor logic */
	this.s.enable = this.s.init.bEnable;
	this.s.dt = settings;
	this.s.dt._colReorder = this;
	this._fnConstruct();

	return this;
};



$.extend( ColReorder.prototype, {
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Public methods
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/**
	 * Enable / disable end user interaction
	 */
	fnEnable: function ( flag )
	{
		if ( flag === false ) {
			return fnDisable();
		}

		this.s.enable = true;
	},

	/**
	 * Disable end user interaction
	 */
	fnDisable: function ()
	{
		this.s.enable = false;
	},

	/**
	 * Reset the column ordering to the original ordering that was detected on
	 * start up.
	 *  @return {this} Returns `this` for chaining.
	 *
	 *  @example
	 *    // DataTables initialisation with ColReorder
	 *    var table = $('#example').dataTable( {
	 *        "sDom": 'Rlfrtip'
	 *    } );
	 *
	 *    // Add click event to a button to reset the ordering
	 *    $('#resetOrdering').click( function (e) {
	 *        e.preventDefault();
	 *        $.fn.dataTable.ColReorder( table ).fnReset();
	 *    } );
	 */
	"fnReset": function ()
	{
		this._fnOrderColumns( this.fnOrder() );

		return this;
	},

	/**
	 * `Deprecated` - Get the current order of the columns, as an array.
	 *  @return {array} Array of column identifiers
	 *  @deprecated `fnOrder` should be used in preference to this method.
	 *      `fnOrder` acts as a getter/setter.
	 */
	"fnGetCurrentOrder": function ()
	{
		return this.fnOrder();
	},

	/**
	 * Get the current order of the columns, as an array. Note that the values
	 * given in the array are unique identifiers for each column. Currently
	 * these are the original ordering of the columns that was detected on
	 * start up, but this could potentially change in future.
	 *  @return {array} Array of column identifiers
	 *
	 *  @example
	 *    // Get column ordering for the table
	 *    var order = $.fn.dataTable.ColReorder( dataTable ).fnOrder();
	 *//**
	 * Set the order of the columns, from the positions identified in the
	 * ordering array given. Note that ColReorder takes a brute force approach
	 * to reordering, so it is possible multiple reordering events will occur
	 * before the final order is settled upon.
	 *  @param {array} [set] Array of column identifiers in the new order. Note
	 *    that every column must be included, uniquely, in this array.
	 *  @return {this} Returns `this` for chaining.
	 *
	 *  @example
	 *    // Swap the first and second columns
	 *    $.fn.dataTable.ColReorder( dataTable ).fnOrder( [1, 0, 2, 3, 4] );
	 *
	 *  @example
	 *    // Move the first column to the end for the table `#example`
	 *    var curr = $.fn.dataTable.ColReorder( '#example' ).fnOrder();
	 *    var first = curr.shift();
	 *    curr.push( first );
	 *    $.fn.dataTable.ColReorder( '#example' ).fnOrder( curr );
	 *
	 *  @example
	 *    // Reverse the table's order
	 *    $.fn.dataTable.ColReorder( '#example' ).fnOrder(
	 *      $.fn.dataTable.ColReorder( '#example' ).fnOrder().reverse()
	 *    );
	 */
	"fnOrder": function ( set, original )
	{
		var a = [], i, ien, j, jen;
		var columns = this.s.dt.aoColumns;

		if ( set === undefined ){
			for ( i=0, ien=columns.length ; i<ien ; i++ ) {
				a.push( columns[i]._ColReorder_iOrigCol );
			}

			return a;
		}

		// The order given is based on the original indexes, rather than the
		// existing ones, so we need to translate from the original to current
		// before then doing the order
		if ( original ) {
			var order = this.fnOrder();

			for ( i=0, ien=set.length ; i<ien ; i++ ) {
				a.push( $.inArray( set[i], order ) );
			}

			set = a;
		}

		this._fnOrderColumns( fnInvertKeyValues( set ) );

		return this;
	},


	/**
	 * Convert from the original column index, to the original
	 *
	 * @param  {int|array} idx Index(es) to convert
	 * @param  {string} dir Transpose direction - `fromOriginal` / `toCurrent`
	 *   or `'toOriginal` / `fromCurrent`
	 * @return {int|array}     Converted values
	 */
	fnTranspose: function ( idx, dir )
	{
		if ( ! dir ) {
			dir = 'toCurrent';
		}

		var order = this.fnOrder();
		var columns = this.s.dt.aoColumns;

		if ( dir === 'toCurrent' ) {
			// Given an original index, want the current
			return ! $.isArray( idx ) ?
				$.inArray( idx, order ) :
				$.map( idx, function ( index ) {
					return $.inArray( index, order );
				} );
		}
		else {
			// Given a current index, want the original
			return ! $.isArray( idx ) ?
				columns[idx]._ColReorder_iOrigCol :
				$.map( idx, function ( index ) {
					return columns[index]._ColReorder_iOrigCol;
				} );
		}
	},


	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Private methods (they are of course public in JS, but recommended as private)
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/**
	 * Constructor logic
	 *  @method  _fnConstruct
	 *  @returns void
	 *  @private
	 */
	"_fnConstruct": function ()
	{
		var that = this;
		var iLen = this.s.dt.aoColumns.length;
		var table = this.s.dt.nTable;
		var i;

		/* Columns discounted from reordering - counting left to right */
		if ( this.s.init.iFixedColumns )
		{
			this.s.fixed = this.s.init.iFixedColumns;
		}

		if ( this.s.init.iFixedColumnsLeft )
		{
			this.s.fixed = this.s.init.iFixedColumnsLeft;
		}

		/* Columns discounted from reordering - counting right to left */
		this.s.fixedRight = this.s.init.iFixedColumnsRight ?
			this.s.init.iFixedColumnsRight :
			0;

		/* Drop callback initialisation option */
		if ( this.s.init.fnReorderCallback )
		{
			this.s.reorderCallback = this.s.init.fnReorderCallback;
		}

		/* Add event handlers for the drag and drop, and also mark the original column order */
		for ( i = 0; i < iLen; i++ )
		{
			if ( i > this.s.fixed-1 && i < iLen - this.s.fixedRight )
			{
				this._fnMouseListener( i, this.s.dt.aoColumns[i].nTh );
			}

			/* Mark the original column order for later reference */
			this.s.dt.aoColumns[i]._ColReorder_iOrigCol = i;
		}

		/* State saving */
		this.s.dt.oApi._fnCallbackReg( this.s.dt, 'aoStateSaveParams', function (oS, oData) {
			that._fnStateSave.call( that, oData );
		}, "ColReorder_State" );

		/* An initial column order has been specified */
		var aiOrder = null;
		if ( this.s.init.aiOrder )
		{
			aiOrder = this.s.init.aiOrder.slice();
		}

		/* State loading, overrides the column order given */
		if ( this.s.dt.oLoadedState && typeof this.s.dt.oLoadedState.ColReorder != 'undefined' &&
		  this.s.dt.oLoadedState.ColReorder.length == this.s.dt.aoColumns.length )
		{
			aiOrder = this.s.dt.oLoadedState.ColReorder;
		}

		/* If we have an order to apply - do so */
		if ( aiOrder )
		{
			/* We might be called during or after the DataTables initialisation. If before, then we need
			 * to wait until the draw is done, if after, then do what we need to do right away
			 */
			if ( !that.s.dt._bInitComplete )
			{
				var bDone = false;
				$(table).on( 'draw.dt.colReorder', function () {
					if ( !that.s.dt._bInitComplete && !bDone )
					{
						bDone = true;
						var resort = fnInvertKeyValues( aiOrder );
						that._fnOrderColumns.call( that, resort );
					}
				} );
			}
			else
			{
				var resort = fnInvertKeyValues( aiOrder );
				that._fnOrderColumns.call( that, resort );
			}
		}
		else {
			this._fnSetColumnIndexes();
		}

		// Destroy clean up
		$(table).on( 'destroy.dt.colReorder', function () {
			$(table).off( 'destroy.dt.colReorder draw.dt.colReorder' );

			$.each( that.s.dt.aoColumns, function (i, column) {
				$(column.nTh).off('.ColReorder');
				$(column.nTh).removeAttr('data-column-index');
			} );

			that.s.dt._colReorder = null;
			that.s = null;
		} );
	},


	/**
	 * Set the column order from an array
	 *  @method  _fnOrderColumns
	 *  @param   array a An array of integers which dictate the column order that should be applied
	 *  @returns void
	 *  @private
	 */
	"_fnOrderColumns": function ( a )
	{
		var changed = false;

		if ( a.length != this.s.dt.aoColumns.length )
		{
			this.s.dt.oInstance.oApi._fnLog( this.s.dt, 1, "ColReorder - array reorder does not "+
				"match known number of columns. Skipping." );
			return;
		}

		for ( var i=0, iLen=a.length ; i<iLen ; i++ )
		{
			var currIndex = $.inArray( i, a );
			if ( i != currIndex )
			{
				/* Reorder our switching array */
				fnArraySwitch( a, currIndex, i );

				/* Do the column reorder in the table */
				this.s.dt.oInstance.fnColReorder( currIndex, i, true, false );

				changed = true;
			}
		}

		this._fnSetColumnIndexes();

		// Has anything actually changed? If not, then nothing else to do
		if ( ! changed ) {
			return;
		}

		$.fn.dataTable.Api( this.s.dt ).rows().invalidate();

		/* When scrolling we need to recalculate the column sizes to allow for the shift */
		if ( this.s.dt.oScroll.sX !== "" || this.s.dt.oScroll.sY !== "" )
		{
			this.s.dt.oInstance.fnAdjustColumnSizing( false );
		}

		/* Save the state */
		this.s.dt.oInstance.oApi._fnSaveState( this.s.dt );

		if ( this.s.reorderCallback !== null )
		{
			this.s.reorderCallback.call( this );
		}
	},


	/**
	 * Because we change the indexes of columns in the table, relative to their starting point
	 * we need to reorder the state columns to what they are at the starting point so we can
	 * then rearrange them again on state load!
	 *  @method  _fnStateSave
	 *  @param   object oState DataTables state
	 *  @returns string JSON encoded cookie string for DataTables
	 *  @private
	 */
	"_fnStateSave": function ( oState )
	{
		var i, iLen, aCopy, iOrigColumn;
		var oSettings = this.s.dt;
		var columns = oSettings.aoColumns;

		oState.ColReorder = [];

		/* Sorting */
		if ( oState.aaSorting ) {
			// 1.10.0-
			for ( i=0 ; i<oState.aaSorting.length ; i++ ) {
				oState.aaSorting[i][0] = columns[ oState.aaSorting[i][0] ]._ColReorder_iOrigCol;
			}

			var aSearchCopy = $.extend( true, [], oState.aoSearchCols );

			for ( i=0, iLen=columns.length ; i<iLen ; i++ )
			{
				iOrigColumn = columns[i]._ColReorder_iOrigCol;

				/* Column filter */
				oState.aoSearchCols[ iOrigColumn ] = aSearchCopy[i];

				/* Visibility */
				oState.abVisCols[ iOrigColumn ] = columns[i].bVisible;

				/* Column reordering */
				oState.ColReorder.push( iOrigColumn );
			}
		}
		else if ( oState.order ) {
			// 1.10.1+
			for ( i=0 ; i<oState.order.length ; i++ ) {
				oState.order[i][0] = columns[ oState.order[i][0] ]._ColReorder_iOrigCol;
			}

			var stateColumnsCopy = $.extend( true, [], oState.columns );

			for ( i=0, iLen=columns.length ; i<iLen ; i++ )
			{
				iOrigColumn = columns[i]._ColReorder_iOrigCol;

				/* Columns */
				oState.columns[ iOrigColumn ] = stateColumnsCopy[i];

				/* Column reordering */
				oState.ColReorder.push( iOrigColumn );
			}
		}
	},


	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Mouse drop and drag
	 */

	/**
	 * Add a mouse down listener to a particluar TH element
	 *  @method  _fnMouseListener
	 *  @param   int i Column index
	 *  @param   element nTh TH element clicked on
	 *  @returns void
	 *  @private
	 */
	"_fnMouseListener": function ( i, nTh )
	{
		var that = this;
		$(nTh)
			.on( 'mousedown.ColReorder', function (e) {
				if ( that.s.enable ) {
					that._fnMouseDown.call( that, e, nTh );
				}
			} )
			.on( 'touchstart.ColReorder', function (e) {
				if ( that.s.enable ) {
					that._fnMouseDown.call( that, e, nTh );
				}
			} );
	},


	/**
	 * Mouse down on a TH element in the table header
	 *  @method  _fnMouseDown
	 *  @param   event e Mouse event
	 *  @param   element nTh TH element to be dragged
	 *  @returns void
	 *  @private
	 */
	"_fnMouseDown": function ( e, nTh )
	{
		var that = this;

		/* Store information about the mouse position */
		var target = $(e.target).closest('th, td');
		var offset = target.offset();
		var idx = parseInt( $(nTh).attr('data-column-index'), 10 );

		if ( idx === undefined ) {
			return;
		}

		this.s.mouse.startX = this._fnCursorPosition( e, 'pageX' );
		this.s.mouse.startY = this._fnCursorPosition( e, 'pageY' );
		this.s.mouse.offsetX = this._fnCursorPosition( e, 'pageX' ) - offset.left;
		this.s.mouse.offsetY = this._fnCursorPosition( e, 'pageY' ) - offset.top;
		this.s.mouse.target = this.s.dt.aoColumns[ idx ].nTh;//target[0];
		this.s.mouse.targetIndex = idx;
		this.s.mouse.fromIndex = idx;

		this._fnRegions();

		/* Add event handlers to the document */
		$(document)
			.on( 'mousemove.ColReorder touchmove.ColReorder', function (e) {
				that._fnMouseMove.call( that, e );
			} )
			.on( 'mouseup.ColReorder touchend.ColReorder', function (e) {
				that._fnMouseUp.call( that, e );
			} );
	},


	/**
	 * Deal with a mouse move event while dragging a node
	 *  @method  _fnMouseMove
	 *  @param   event e Mouse event
	 *  @returns void
	 *  @private
	 */
	"_fnMouseMove": function ( e )
	{
		var that = this;

		if ( this.dom.drag === null )
		{
			/* Only create the drag element if the mouse has moved a specific distance from the start
			 * point - this allows the user to make small mouse movements when sorting and not have a
			 * possibly confusing drag element showing up
			 */
			if ( Math.pow(
				Math.pow(this._fnCursorPosition( e, 'pageX') - this.s.mouse.startX, 2) +
				Math.pow(this._fnCursorPosition( e, 'pageY') - this.s.mouse.startY, 2), 0.5 ) < 5 )
			{
				return;
			}
			this._fnCreateDragNode();
		}

		/* Position the element - we respect where in the element the click occured */
		this.dom.drag.css( {
			left: this._fnCursorPosition( e, 'pageX' ) - this.s.mouse.offsetX,
			top: this._fnCursorPosition( e, 'pageY' ) - this.s.mouse.offsetY
		} );

		/* Based on the current mouse position, calculate where the insert should go */
		var bSet = false;
		var lastToIndex = this.s.mouse.toIndex;

		for ( var i=1, iLen=this.s.aoTargets.length ; i<iLen ; i++ )
		{
			if ( this._fnCursorPosition(e, 'pageX') < this.s.aoTargets[i-1].x + ((this.s.aoTargets[i].x-this.s.aoTargets[i-1].x)/2) )
			{
				this.dom.pointer.css( 'left', this.s.aoTargets[i-1].x );
				this.s.mouse.toIndex = this.s.aoTargets[i-1].to;
				bSet = true;
				break;
			}
		}

		// The insert element wasn't positioned in the array (less than
		// operator), so we put it at the end
		if ( !bSet )
		{
			this.dom.pointer.css( 'left', this.s.aoTargets[this.s.aoTargets.length-1].x );
			this.s.mouse.toIndex = this.s.aoTargets[this.s.aoTargets.length-1].to;
		}

		// Perform reordering if realtime updating is on and the column has moved
		if ( this.s.init.bRealtime && lastToIndex !== this.s.mouse.toIndex ) {
			this.s.dt.oInstance.fnColReorder( this.s.mouse.fromIndex, this.s.mouse.toIndex );
			this.s.mouse.fromIndex = this.s.mouse.toIndex;

			// Not great for performance, but required to keep everything in alignment
			if ( this.s.dt.oScroll.sX !== "" || this.s.dt.oScroll.sY !== "" )
			{
				this.s.dt.oInstance.fnAdjustColumnSizing( false );
			}

			this._fnRegions();
		}
	},


	/**
	 * Finish off the mouse drag and insert the column where needed
	 *  @method  _fnMouseUp
	 *  @param   event e Mouse event
	 *  @returns void
	 *  @private
	 */
	"_fnMouseUp": function ( e )
	{
		var that = this;

		$(document).off( '.ColReorder' );

		if ( this.dom.drag !== null )
		{
			/* Remove the guide elements */
			this.dom.drag.remove();
			this.dom.pointer.remove();
			this.dom.drag = null;
			this.dom.pointer = null;

			/* Actually do the reorder */
			this.s.dt.oInstance.fnColReorder( this.s.mouse.fromIndex, this.s.mouse.toIndex, true );
			this._fnSetColumnIndexes();

			/* When scrolling we need to recalculate the column sizes to allow for the shift */
			if ( this.s.dt.oScroll.sX !== "" || this.s.dt.oScroll.sY !== "" )
			{
				this.s.dt.oInstance.fnAdjustColumnSizing( false );
			}

			/* Save the state */
			this.s.dt.oInstance.oApi._fnSaveState( this.s.dt );

			if ( this.s.reorderCallback !== null )
			{
				this.s.reorderCallback.call( this );
			}
		}
	},


	/**
	 * Calculate a cached array with the points of the column inserts, and the
	 * 'to' points
	 *  @method  _fnRegions
	 *  @returns void
	 *  @private
	 */
	"_fnRegions": function ()
	{
		var aoColumns = this.s.dt.aoColumns;

		this.s.aoTargets.splice( 0, this.s.aoTargets.length );

		this.s.aoTargets.push( {
			"x":  $(this.s.dt.nTable).offset().left,
			"to": 0
		} );

		var iToPoint = 0;
		var total = this.s.aoTargets[0].x;

		for ( var i=0, iLen=aoColumns.length ; i<iLen ; i++ )
		{
			/* For the column / header in question, we want it's position to remain the same if the
			 * position is just to it's immediate left or right, so we only increment the counter for
			 * other columns
			 */
			if ( i != this.s.mouse.fromIndex )
			{
				iToPoint++;
			}

			if ( aoColumns[i].bVisible && aoColumns[i].nTh.style.display !=='none' )
			{
				total += $(aoColumns[i].nTh).outerWidth();

				this.s.aoTargets.push( {
					"x":  total,
					"to": iToPoint
				} );
			}
		}

		/* Disallow columns for being reordered by drag and drop, counting right to left */
		if ( this.s.fixedRight !== 0 )
		{
			this.s.aoTargets.splice( this.s.aoTargets.length - this.s.fixedRight );
		}

		/* Disallow columns for being reordered by drag and drop, counting left to right */
		if ( this.s.fixed !== 0 )
		{
			this.s.aoTargets.splice( 0, this.s.fixed );
		}
	},


	/**
	 * Copy the TH element that is being drags so the user has the idea that they are actually
	 * moving it around the page.
	 *  @method  _fnCreateDragNode
	 *  @returns void
	 *  @private
	 */
	"_fnCreateDragNode": function ()
	{
		var scrolling = this.s.dt.oScroll.sX !== "" || this.s.dt.oScroll.sY !== "";

		var origCell = this.s.dt.aoColumns[ this.s.mouse.targetIndex ].nTh;
		var origTr = origCell.parentNode;
		var origThead = origTr.parentNode;
		var origTable = origThead.parentNode;
		var cloneCell = $(origCell).clone();

		// This is a slightly odd combination of jQuery and DOM, but it is the
		// fastest and least resource intensive way I could think of cloning
		// the table with just a single header cell in it.
		this.dom.drag = $(origTable.cloneNode(false))
			.addClass( 'DTCR_clonedTable' )
			.append(
				$(origThead.cloneNode(false)).append(
					$(origTr.cloneNode(false)).append(
						cloneCell[0]
					)
				)
			)
			.css( {
				position: 'absolute',
				top: 0,
				left: 0,
				width: $(origCell).outerWidth(),
				height: $(origCell).outerHeight()
			} )
			.appendTo( 'body' );

		this.dom.pointer = $('<div></div>')
			.addClass( 'DTCR_pointer' )
			.css( {
				position: 'absolute',
				top: scrolling ?
					$('div.dataTables_scroll', this.s.dt.nTableWrapper).offset().top :
					$(this.s.dt.nTable).offset().top,
				height : scrolling ?
					$('div.dataTables_scroll', this.s.dt.nTableWrapper).height() :
					$(this.s.dt.nTable).height()
			} )
			.appendTo( 'body' );
	},


	/**
	 * Add a data attribute to the column headers, so we know the index of
	 * the row to be reordered. This allows fast detection of the index, and
	 * for this plug-in to work with FixedHeader which clones the nodes.
	 *  @private
	 */
	"_fnSetColumnIndexes": function ()
	{
		$.each( this.s.dt.aoColumns, function (i, column) {
			$(column.nTh).attr('data-column-index', i);
		} );
	},


	/**
	 * Get cursor position regardless of mouse or touch input
	 * @param  {Event}  e    jQuery Event
	 * @param  {string} prop Property to get
	 * @return {number}      Value
	 */
	_fnCursorPosition: function ( e, prop ) {
		if ( e.type.indexOf('touch') !== -1 ) {
			return e.originalEvent.touches[0][ prop ];
		}
		return e[ prop ];
	}
} );





/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Static parameters
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


/**
 * ColReorder default settings for initialisation
 *  @namespace
 *  @static
 */
ColReorder.defaults = {
	/**
	 * Predefined ordering for the columns that will be applied automatically
	 * on initialisation. If not specified then the order that the columns are
	 * found to be in the HTML is the order used.
	 *  @type array
	 *  @default null
	 *  @static
	 */
	aiOrder: null,

	/**
	 * ColReorder enable on initialisation
	 *  @type boolean
	 *  @default true
	 *  @static
	 */
	bEnable: true,

	/**
	 * Redraw the table's column ordering as the end user draws the column
	 * (`true`) or wait until the mouse is released (`false` - default). Note
	 * that this will perform a redraw on each reordering, which involves an
	 * Ajax request each time if you are using server-side processing in
	 * DataTables.
	 *  @type boolean
	 *  @default false
	 *  @static
	 */
	bRealtime: true,

	/**
	 * Indicate how many columns should be fixed in position (counting from the
	 * left). This will typically be 1 if used, but can be as high as you like.
	 *  @type int
	 *  @default 0
	 *  @static
	 */
	iFixedColumnsLeft: 0,

	/**
	 * As `iFixedColumnsRight` but counting from the right.
	 *  @type int
	 *  @default 0
	 *  @static
	 */
	iFixedColumnsRight: 0,

	/**
	 * Callback function that is fired when columns are reordered. The `column-
	 * reorder` event is preferred over this callback
	 *  @type function():void
	 *  @default null
	 *  @static
	 */
	fnReorderCallback: null
};



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Constants
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/**
 * ColReorder version
 *  @constant  version
 *  @type      String
 *  @default   As code
 */
ColReorder.version = "1.5.0";



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * DataTables interfaces
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

// Expose
$.fn.dataTable.ColReorder = ColReorder;
$.fn.DataTable.ColReorder = ColReorder;


// Register a new feature with DataTables
if ( typeof $.fn.dataTable == "function" &&
     typeof $.fn.dataTableExt.fnVersionCheck == "function" &&
     $.fn.dataTableExt.fnVersionCheck('1.10.8') )
{
	$.fn.dataTableExt.aoFeatures.push( {
		"fnInit": function( settings ) {
			var table = settings.oInstance;

			if ( ! settings._colReorder ) {
				var dtInit = settings.oInit;
				var opts = dtInit.colReorder || dtInit.oColReorder || {};

				new ColReorder( settings, opts );
			}
			else {
				table.oApi._fnLog( settings, 1, "ColReorder attempted to initialise twice. Ignoring second" );
			}

			return null; /* No node for DataTables to insert */
		},
		"cFeature": "R",
		"sFeature": "ColReorder"
	} );
}
else {
	alert( "Warning: ColReorder requires DataTables 1.10.8 or greater - www.datatables.net/download");
}


// Attach a listener to the document which listens for DataTables initialisation
// events so we can automatically initialise
$(document).on( 'preInit.dt.colReorder', function (e, settings) {
	if ( e.namespace !== 'dt' ) {
		return;
	}

	var init = settings.oInit.colReorder;
	var defaults = DataTable.defaults.colReorder;

	if ( init || defaults ) {
		var opts = $.extend( {}, init, defaults );

		if ( init !== false ) {
			new ColReorder( settings, opts  );
		}
	}
} );


// API augmentation
$.fn.dataTable.Api.register( 'colReorder.reset()', function () {
	return this.iterator( 'table', function ( ctx ) {
		ctx._colReorder.fnReset();
	} );
} );

$.fn.dataTable.Api.register( 'colReorder.order()', function ( set, original ) {
	if ( set ) {
		return this.iterator( 'table', function ( ctx ) {
			ctx._colReorder.fnOrder( set, original );
		} );
	}

	return this.context.length ?
		this.context[0]._colReorder.fnOrder() :
		null;
} );

$.fn.dataTable.Api.register( 'colReorder.transpose()', function ( idx, dir ) {
	return this.context.length && this.context[0]._colReorder ?
		this.context[0]._colReorder.fnTranspose( idx, dir ) :
		idx;
} );

$.fn.dataTable.Api.register( 'colReorder.move()', function( from, to, drop, invalidateRows ) {
	if (this.context.length) {
		this.context[0]._colReorder.s.dt.oInstance.fnColReorder( from, to, drop, invalidateRows );
	}
	return this;
} );

$.fn.dataTable.Api.register( 'colReorder.enable()', function( flag ) {
	return this.iterator( 'table', function ( ctx ) {
		if ( ctx._colReorder ) {
			ctx._colReorder.fnEnable( flag );
		}
	} );
} );

$.fn.dataTable.Api.register( 'colReorder.disable()', function() {
	return this.iterator( 'table', function ( ctx ) {
		if ( ctx._colReorder ) {
			ctx._colReorder.fnDisable();
		}
	} );
} );


return ColReorder;
}));


/*! FixedColumns 3.2.5
 * Â©2010-2018 SpryMedia Ltd - datatables.net/license
 */

/**
 * @summary     FixedColumns
 * @description Freeze columns in place on a scrolling DataTable
 * @version     3.2.5
 * @file        dataTables.fixedColumns.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     www.sprymedia.co.uk/contact
 * @copyright   Copyright 2010-2018 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license/mit
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */
(function( factory ){
	if ( typeof define === 'function' && define.amd ) {
		// AMD
		define( ['jquery', 'datatables.net'], function ( $ ) {
			return factory( $, window, document );
		} );
	}
	else if ( typeof exports === 'object' ) {
		// CommonJS
		module.exports = function (root, $) {
			if ( ! root ) {
				root = window;
			}

			if ( ! $ || ! $.fn.dataTable ) {
				$ = require('datatables.net')(root, $).$;
			}

			return factory( $, root, root.document );
		};
	}
	else {
		// Browser
		factory( jQuery, window, document );
	}
}(function( $, window, document, undefined ) {
'use strict';
var DataTable = $.fn.dataTable;
var _firefoxScroll;

/**
 * When making use of DataTables' x-axis scrolling feature, you may wish to
 * fix the left most column in place. This plug-in for DataTables provides
 * exactly this option (note for non-scrolling tables, please use the
 * FixedHeader plug-in, which can fix headers and footers). Key
 * features include:
 *
 * * Freezes the left or right most columns to the side of the table
 * * Option to freeze two or more columns
 * * Full integration with DataTables' scrolling options
 * * Speed - FixedColumns is fast in its operation
 *
 *  @class
 *  @constructor
 *  @global
 *  @param {object} dt DataTables instance. With DataTables 1.10 this can also
 *    be a jQuery collection, a jQuery selector, DataTables API instance or
 *    settings object.
 *  @param {object} [init={}] Configuration object for FixedColumns. Options are
 *    defined by {@link FixedColumns.defaults}
 *
 *  @requires jQuery 1.7+
 *  @requires DataTables 1.8.0+
 *
 *  @example
 *      var table = $('#example').dataTable( {
 *        "scrollX": "100%"
 *      } );
 *      new $.fn.dataTable.fixedColumns( table );
 */
var FixedColumns = function ( dt, init ) {
	var that = this;

	/* Sanity check - you just know it will happen */
	if ( ! ( this instanceof FixedColumns ) ) {
		alert( "FixedColumns warning: FixedColumns must be initialised with the 'new' keyword." );
		return;
	}

	if ( init === undefined || init === true ) {
		init = {};
	}

	// Use the DataTables Hungarian notation mapping method, if it exists to
	// provide forwards compatibility for camel case variables
	var camelToHungarian = $.fn.dataTable.camelToHungarian;
	if ( camelToHungarian ) {
		camelToHungarian( FixedColumns.defaults, FixedColumns.defaults, true );
		camelToHungarian( FixedColumns.defaults, init );
	}

	// v1.10 allows the settings object to be got form a number of sources
	var dtSettings = new $.fn.dataTable.Api( dt ).settings()[0];

	/**
	 * Settings object which contains customisable information for FixedColumns instance
	 * @namespace
	 * @extends FixedColumns.defaults
	 * @private
	 */
	this.s = {
		/**
		 * DataTables settings objects
		 *  @type     object
		 *  @default  Obtained from DataTables instance
		 */
		"dt": dtSettings,

		/**
		 * Number of columns in the DataTable - stored for quick access
		 *  @type     int
		 *  @default  Obtained from DataTables instance
		 */
		"iTableColumns": dtSettings.aoColumns.length,

		/**
		 * Original outer widths of the columns as rendered by DataTables - used to calculate
		 * the FixedColumns grid bounding box
		 *  @type     array.<int>
		 *  @default  []
		 */
		"aiOuterWidths": [],

		/**
		 * Original inner widths of the columns as rendered by DataTables - used to apply widths
		 * to the columns
		 *  @type     array.<int>
		 *  @default  []
		 */
		"aiInnerWidths": [],


		/**
		 * Is the document layout right-to-left
		 * @type boolean
		 */
		rtl: $(dtSettings.nTable).css('direction') === 'rtl'
	};


	/**
	 * DOM elements used by the class instance
	 * @namespace
	 * @private
	 *
	 */
	this.dom = {
		/**
		 * DataTables scrolling element
		 *  @type     node
		 *  @default  null
		 */
		"scroller": null,

		/**
		 * DataTables header table
		 *  @type     node
		 *  @default  null
		 */
		"header": null,

		/**
		 * DataTables body table
		 *  @type     node
		 *  @default  null
		 */
		"body": null,

		/**
		 * DataTables footer table
		 *  @type     node
		 *  @default  null
		 */
		"footer": null,

		/**
		 * Display grid elements
		 * @namespace
		 */
		"grid": {
			/**
			 * Grid wrapper. This is the container element for the 3x3 grid
			 *  @type     node
			 *  @default  null
			 */
			"wrapper": null,

			/**
			 * DataTables scrolling element. This element is the DataTables
			 * component in the display grid (making up the main table - i.e.
			 * not the fixed columns).
			 *  @type     node
			 *  @default  null
			 */
			"dt": null,

			/**
			 * Left fixed column grid components
			 * @namespace
			 */
			"left": {
				"wrapper": null,
				"head": null,
				"body": null,
				"foot": null
			},

			/**
			 * Right fixed column grid components
			 * @namespace
			 */
			"right": {
				"wrapper": null,
				"head": null,
				"body": null,
				"foot": null
			}
		},

		/**
		 * Cloned table nodes
		 * @namespace
		 */
		"clone": {
			/**
			 * Left column cloned table nodes
			 * @namespace
			 */
			"left": {
				/**
				 * Cloned header table
				 *  @type     node
				 *  @default  null
				 */
				"header": null,

				/**
				 * Cloned body table
				 *  @type     node
				 *  @default  null
				 */
				"body": null,

				/**
				 * Cloned footer table
				 *  @type     node
				 *  @default  null
				 */
				"footer": null
			},

			/**
			 * Right column cloned table nodes
			 * @namespace
			 */
			"right": {
				/**
				 * Cloned header table
				 *  @type     node
				 *  @default  null
				 */
				"header": null,

				/**
				 * Cloned body table
				 *  @type     node
				 *  @default  null
				 */
				"body": null,

				/**
				 * Cloned footer table
				 *  @type     node
				 *  @default  null
				 */
				"footer": null
			}
		}
	};

	if ( dtSettings._oFixedColumns ) {
		throw 'FixedColumns already initialised on this table';
	}

	/* Attach the instance to the DataTables instance so it can be accessed easily */
	dtSettings._oFixedColumns = this;

	/* Let's do it */
	if ( ! dtSettings._bInitComplete )
	{
		dtSettings.oApi._fnCallbackReg( dtSettings, 'aoInitComplete', function () {
			that._fnConstruct( init );
		}, 'FixedColumns' );
	}
	else
	{
		this._fnConstruct( init );
	}
};



$.extend( FixedColumns.prototype , {
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Public methods
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/**
	 * Update the fixed columns - including headers and footers. Note that FixedColumns will
	 * automatically update the display whenever the host DataTable redraws.
	 *  @returns {void}
	 *  @example
	 *      var table = $('#example').dataTable( {
	 *          "scrollX": "100%"
	 *      } );
	 *      var fc = new $.fn.dataTable.fixedColumns( table );
	 *
	 *      // at some later point when the table has been manipulated....
	 *      fc.fnUpdate();
	 */
	"fnUpdate": function ()
	{
		this._fnDraw( true );
	},


	/**
	 * Recalculate the resizes of the 3x3 grid that FixedColumns uses for display of the table.
	 * This is useful if you update the width of the table container. Note that FixedColumns will
	 * perform this function automatically when the window.resize event is fired.
	 *  @returns {void}
	 *  @example
	 *      var table = $('#example').dataTable( {
	 *          "scrollX": "100%"
	 *      } );
	 *      var fc = new $.fn.dataTable.fixedColumns( table );
	 *
	 *      // Resize the table container and then have FixedColumns adjust its layout....
	 *      $('#content').width( 1200 );
	 *      fc.fnRedrawLayout();
	 */
	"fnRedrawLayout": function ()
	{
		this._fnColCalc();
		this._fnGridLayout();
		this.fnUpdate();
	},


	/**
	 * Mark a row such that it's height should be recalculated when using 'semiauto' row
	 * height matching. This function will have no effect when 'none' or 'auto' row height
	 * matching is used.
	 *  @param   {Node} nTr TR element that should have it's height recalculated
	 *  @returns {void}
	 *  @example
	 *      var table = $('#example').dataTable( {
	 *          "scrollX": "100%"
	 *      } );
	 *      var fc = new $.fn.dataTable.fixedColumns( table );
	 *
	 *      // manipulate the table - mark the row as needing an update then update the table
	 *      // this allows the redraw performed by DataTables fnUpdate to recalculate the row
	 *      // height
	 *      fc.fnRecalculateHeight();
	 *      table.fnUpdate( $('#example tbody tr:eq(0)')[0], ["insert date", 1, 2, 3 ... ]);
	 */
	"fnRecalculateHeight": function ( nTr )
	{
		delete nTr._DTTC_iHeight;
		nTr.style.height = 'auto';
	},


	/**
	 * Set the height of a given row - provides cross browser compatibility
	 *  @param   {Node} nTarget TR element that should have it's height recalculated
	 *  @param   {int} iHeight Height in pixels to set
	 *  @returns {void}
	 *  @example
	 *      var table = $('#example').dataTable( {
	 *          "scrollX": "100%"
	 *      } );
	 *      var fc = new $.fn.dataTable.fixedColumns( table );
	 *
	 *      // You may want to do this after manipulating a row in the fixed column
	 *      fc.fnSetRowHeight( $('#example tbody tr:eq(0)')[0], 50 );
	 */
	"fnSetRowHeight": function ( nTarget, iHeight )
	{
		nTarget.style.height = iHeight+"px";
	},


	/**
	 * Get data index information about a row or cell in the table body.
	 * This function is functionally identical to fnGetPosition in DataTables,
	 * taking the same parameter (TH, TD or TR node) and returning exactly the
	 * the same information (data index information). THe difference between
	 * the two is that this method takes into account the fixed columns in the
	 * table, so you can pass in nodes from the master table, or the cloned
	 * tables and get the index position for the data in the main table.
	 *  @param {node} node TR, TH or TD element to get the information about
	 *  @returns {int} If nNode is given as a TR, then a single index is 
	 *    returned, or if given as a cell, an array of [row index, column index
	 *    (visible), column index (all)] is given.
	 */
	"fnGetPosition": function ( node )
	{
		var idx;
		var inst = this.s.dt.oInstance;

		if ( ! $(node).parents('.DTFC_Cloned').length )
		{
			// Not in a cloned table
			return inst.fnGetPosition( node );
		}
		else
		{
			// Its in the cloned table, so need to look up position
			if ( node.nodeName.toLowerCase() === 'tr' ) {
				idx = $(node).index();
				return inst.fnGetPosition( $('tr', this.s.dt.nTBody)[ idx ] );
			}
			else
			{
				var colIdx = $(node).index();
				idx = $(node.parentNode).index();
				var row = inst.fnGetPosition( $('tr', this.s.dt.nTBody)[ idx ] );

				return [
					row,
					colIdx,
					inst.oApi._fnVisibleToColumnIndex( this.s.dt, colIdx )
				];
			}
		}
	},



	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Private methods (they are of course public in JS, but recommended as private)
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/**
	 * Initialisation for FixedColumns
	 *  @param   {Object} oInit User settings for initialisation
	 *  @returns {void}
	 *  @private
	 */
	"_fnConstruct": function ( oInit )
	{
		var i, iLen, iWidth,
			that = this;

		/* Sanity checking */
		if ( typeof this.s.dt.oInstance.fnVersionCheck != 'function' ||
		     this.s.dt.oInstance.fnVersionCheck( '1.8.0' ) !== true )
		{
			alert( "FixedColumns "+FixedColumns.VERSION+" required DataTables 1.8.0 or later. "+
				"Please upgrade your DataTables installation" );
			return;
		}

		if ( this.s.dt.oScroll.sX === "" )
		{
			this.s.dt.oInstance.oApi._fnLog( this.s.dt, 1, "FixedColumns is not needed (no "+
				"x-scrolling in DataTables enabled), so no action will be taken. Use 'FixedHeader' for "+
				"column fixing when scrolling is not enabled" );
			return;
		}

		/* Apply the settings from the user / defaults */
		this.s = $.extend( true, this.s, FixedColumns.defaults, oInit );

		/* Set up the DOM as we need it and cache nodes */
		var classes = this.s.dt.oClasses;
		this.dom.grid.dt = $(this.s.dt.nTable).parents('div.'+classes.sScrollWrapper)[0];
		this.dom.scroller = $('div.'+classes.sScrollBody, this.dom.grid.dt )[0];

		/* Set up the DOM that we want for the fixed column layout grid */
		this._fnColCalc();
		this._fnGridSetup();

		/* Event handlers */
		var mouseController;
		var mouseDown = false;

		// When the mouse is down (drag scroll) the mouse controller cannot
		// change, as the browser keeps the original element as the scrolling one
		$(this.s.dt.nTableWrapper).on( 'mousedown.DTFC', function (e) {
			if ( e.button === 0 ) {
				mouseDown = true;

				$(document).one( 'mouseup', function () {
					mouseDown = false;
				} );
			}
		} );

		// When the body is scrolled - scroll the left and right columns
		$(this.dom.scroller)
			.on( 'mouseover.DTFC touchstart.DTFC', function () {
				if ( ! mouseDown ) {
					mouseController = 'main';
				}
			} )
			.on( 'scroll.DTFC', function (e) {
				if ( ! mouseController && e.originalEvent ) {
					mouseController = 'main';
				}

				if ( mouseController === 'main' ) {
					if ( that.s.iLeftColumns > 0 ) {
						that.dom.grid.left.liner.scrollTop = that.dom.scroller.scrollTop;
					}
					if ( that.s.iRightColumns > 0 ) {
						that.dom.grid.right.liner.scrollTop = that.dom.scroller.scrollTop;
					}
				}
			} );

		var wheelType = 'onwheel' in document.createElement('div') ?
			'wheel.DTFC' :
			'mousewheel.DTFC';

		if ( that.s.iLeftColumns > 0 ) {
			// When scrolling the left column, scroll the body and right column
			$(that.dom.grid.left.liner)
				.on( 'mouseover.DTFC touchstart.DTFC', function () {
					if ( ! mouseDown ) {
						mouseController = 'left';
					}
				} )
				.on( 'scroll.DTFC', function ( e ) {
					if ( ! mouseController && e.originalEvent ) {
						mouseController = 'left';
					}

					if ( mouseController === 'left' ) {
						that.dom.scroller.scrollTop = that.dom.grid.left.liner.scrollTop;
						if ( that.s.iRightColumns > 0 ) {
							that.dom.grid.right.liner.scrollTop = that.dom.grid.left.liner.scrollTop;
						}
					}
				} )
				.on( wheelType, function(e) {
					// Pass horizontal scrolling through
					var xDelta = e.type === 'wheel' ?
						-e.originalEvent.deltaX :
						e.originalEvent.wheelDeltaX;
					that.dom.scroller.scrollLeft -= xDelta;
				} );
		}

		if ( that.s.iRightColumns > 0 ) {
			// When scrolling the right column, scroll the body and the left column
			$(that.dom.grid.right.liner)
				.on( 'mouseover.DTFC touchstart.DTFC', function () {
					if ( ! mouseDown ) {
						mouseController = 'right';
					}
				} )
				.on( 'scroll.DTFC', function ( e ) {
					if ( ! mouseController && e.originalEvent ) {
						mouseController = 'right';
					}

					if ( mouseController === 'right' ) {
						that.dom.scroller.scrollTop = that.dom.grid.right.liner.scrollTop;
						if ( that.s.iLeftColumns > 0 ) {
							that.dom.grid.left.liner.scrollTop = that.dom.grid.right.liner.scrollTop;
						}
					}
				} )
				.on( wheelType, function(e) {
					// Pass horizontal scrolling through
					var xDelta = e.type === 'wheel' ?
						-e.originalEvent.deltaX :
						e.originalEvent.wheelDeltaX;
					that.dom.scroller.scrollLeft -= xDelta;
				} );
		}

		$(window).on( 'resize.DTFC', function () {
			that._fnGridLayout.call( that );
		} );

		var bFirstDraw = true;
		var jqTable = $(this.s.dt.nTable);

		jqTable
			.on( 'draw.dt.DTFC', function () {
				that._fnColCalc();
				that._fnDraw.call( that, bFirstDraw );
				bFirstDraw = false;
			} )
			.on( 'column-sizing.dt.DTFC', function () {
				that._fnColCalc();
				that._fnGridLayout( that );
			} )
			.on( 'column-visibility.dt.DTFC', function ( e, settings, column, vis, recalc ) {
				if ( recalc === undefined || recalc ) {
					that._fnColCalc();
					that._fnGridLayout( that );
					that._fnDraw( true );
				}
			} )
			.on( 'select.dt.DTFC deselect.dt.DTFC', function ( e, dt, type, indexes ) {
				if ( e.namespace === 'dt' ) {
					that._fnDraw( false );
				}
			} )
			.on( 'destroy.dt.DTFC', function () {
				jqTable.off( '.DTFC' );

				$(that.dom.scroller).off( '.DTFC' );
				$(window).off( '.DTFC' );
				$(that.s.dt.nTableWrapper).off( '.DTFC' );

				$(that.dom.grid.left.liner).off( '.DTFC '+wheelType );
				$(that.dom.grid.left.wrapper).remove();

				$(that.dom.grid.right.liner).off( '.DTFC '+wheelType );
				$(that.dom.grid.right.wrapper).remove();
			} );

		/* Get things right to start with - note that due to adjusting the columns, there must be
		 * another redraw of the main table. It doesn't need to be a full redraw however.
		 */
		this._fnGridLayout();
		this.s.dt.oInstance.fnDraw(false);
	},


	/**
	 * Calculate the column widths for the grid layout
	 *  @returns {void}
	 *  @private
	 */
	"_fnColCalc": function ()
	{
		var that = this;
		var iLeftWidth = 0;
		var iRightWidth = 0;

		this.s.aiInnerWidths = [];
		this.s.aiOuterWidths = [];

		$.each( this.s.dt.aoColumns, function (i, col) {
			var th = $(col.nTh);
			var border;

			if ( ! th.filter(':visible').length ) {
				that.s.aiInnerWidths.push( 0 );
				that.s.aiOuterWidths.push( 0 );
			}
			else
			{
				// Inner width is used to assign widths to cells
				// Outer width is used to calculate the container
				var iWidth = th.outerWidth();

				// When working with the left most-cell, need to add on the
				// table's border to the outerWidth, since we need to take
				// account of it, but it isn't in any cell
				if ( that.s.aiOuterWidths.length === 0 ) {
					border = $(that.s.dt.nTable).css('border-left-width');
					iWidth += typeof border === 'string' && border.indexOf('px') === -1 ?
						1 :
						parseInt( border, 10 );
				}

				// Likewise with the final column on the right
				if ( that.s.aiOuterWidths.length === that.s.dt.aoColumns.length-1 ) {
					border = $(that.s.dt.nTable).css('border-right-width');
					iWidth += typeof border === 'string' && border.indexOf('px') === -1 ?
						1 :
						parseInt( border, 10 );
				}

				that.s.aiOuterWidths.push( iWidth );
				that.s.aiInnerWidths.push( th.width() );

				if ( i < that.s.iLeftColumns )
				{
					iLeftWidth += iWidth;
				}

				if ( that.s.iTableColumns-that.s.iRightColumns <= i )
				{
					iRightWidth += iWidth;
				}
			}
		} );

		this.s.iLeftWidth = iLeftWidth;
		this.s.iRightWidth = iRightWidth;
	},


	/**
	 * Set up the DOM for the fixed column. The way the layout works is to create a 1x3 grid
	 * for the left column, the DataTable (for which we just reuse the scrolling element DataTable
	 * puts into the DOM) and the right column. In each of he two fixed column elements there is a
	 * grouping wrapper element and then a head, body and footer wrapper. In each of these we then
	 * place the cloned header, body or footer tables. This effectively gives as 3x3 grid structure.
	 *  @returns {void}
	 *  @private
	 */
	"_fnGridSetup": function ()
	{
		var that = this;
		var oOverflow = this._fnDTOverflow();
		var block;

		this.dom.body = this.s.dt.nTable;
		this.dom.header = this.s.dt.nTHead.parentNode;
		this.dom.header.parentNode.parentNode.style.position = "relative";

		var nSWrapper =
			$('<div class="DTFC_ScrollWrapper" style="position:relative; clear:both;">'+
				'<div class="DTFC_LeftWrapper" style="position:absolute; top:0; left:0;" aria-hidden="true">'+
					'<div class="DTFC_LeftHeadWrapper" style="position:relative; top:0; left:0; overflow:hidden;"></div>'+
					'<div class="DTFC_LeftBodyWrapper" style="position:relative; top:0; left:0; overflow:hidden;">'+
						'<div class="DTFC_LeftBodyLiner" style="position:relative; top:0; left:0; overflow-y:scroll;"></div>'+
					'</div>'+
					'<div class="DTFC_LeftFootWrapper" style="position:relative; top:0; left:0; overflow:hidden;"></div>'+
				'</div>'+
				'<div class="DTFC_RightWrapper" style="position:absolute; top:0; right:0;" aria-hidden="true">'+
					'<div class="DTFC_RightHeadWrapper" style="position:relative; top:0; left:0;">'+
						'<div class="DTFC_RightHeadBlocker DTFC_Blocker" style="position:absolute; top:0; bottom:0;"></div>'+
					'</div>'+
					'<div class="DTFC_RightBodyWrapper" style="position:relative; top:0; left:0; overflow:hidden;">'+
						'<div class="DTFC_RightBodyLiner" style="position:relative; top:0; left:0; overflow-y:scroll;"></div>'+
					'</div>'+
					'<div class="DTFC_RightFootWrapper" style="position:relative; top:0; left:0;">'+
						'<div class="DTFC_RightFootBlocker DTFC_Blocker" style="position:absolute; top:0; bottom:0;"></div>'+
					'</div>'+
				'</div>'+
			'</div>')[0];
		var nLeft = nSWrapper.childNodes[0];
		var nRight = nSWrapper.childNodes[1];

		this.dom.grid.dt.parentNode.insertBefore( nSWrapper, this.dom.grid.dt );
		nSWrapper.appendChild( this.dom.grid.dt );

		this.dom.grid.wrapper = nSWrapper;

		if ( this.s.iLeftColumns > 0 )
		{
			this.dom.grid.left.wrapper = nLeft;
			this.dom.grid.left.head = nLeft.childNodes[0];
			this.dom.grid.left.body = nLeft.childNodes[1];
			this.dom.grid.left.liner = $('div.DTFC_LeftBodyLiner', nSWrapper)[0];

			nSWrapper.appendChild( nLeft );
		}

		if ( this.s.iRightColumns > 0 )
		{
			this.dom.grid.right.wrapper = nRight;
			this.dom.grid.right.head = nRight.childNodes[0];
			this.dom.grid.right.body = nRight.childNodes[1];
			this.dom.grid.right.liner = $('div.DTFC_RightBodyLiner', nSWrapper)[0];

			nRight.style.right = oOverflow.bar+"px";

			block = $('div.DTFC_RightHeadBlocker', nSWrapper)[0];
			block.style.width = oOverflow.bar+"px";
			block.style.right = -oOverflow.bar+"px";
			this.dom.grid.right.headBlock = block;

			block = $('div.DTFC_RightFootBlocker', nSWrapper)[0];
			block.style.width = oOverflow.bar+"px";
			block.style.right = -oOverflow.bar+"px";
			this.dom.grid.right.footBlock = block;

			nSWrapper.appendChild( nRight );
		}

		if ( this.s.dt.nTFoot )
		{
			this.dom.footer = this.s.dt.nTFoot.parentNode;
			if ( this.s.iLeftColumns > 0 )
			{
				this.dom.grid.left.foot = nLeft.childNodes[2];
			}
			if ( this.s.iRightColumns > 0 )
			{
				this.dom.grid.right.foot = nRight.childNodes[2];
			}
		}

		// RTL support - swap the position of the left and right columns (#48)
		if ( this.s.rtl ) {
			$('div.DTFC_RightHeadBlocker', nSWrapper).css( {
				left: -oOverflow.bar+'px',
				right: ''
			} );
		}
	},


	/**
	 * Style and position the grid used for the FixedColumns layout
	 *  @returns {void}
	 *  @private
	 */
	"_fnGridLayout": function ()
	{
		var that = this;
		var oGrid = this.dom.grid;
		var iWidth = $(oGrid.wrapper).width();
		var iBodyHeight = this.s.dt.nTable.parentNode.offsetHeight;
		var iFullHeight = this.s.dt.nTable.parentNode.parentNode.offsetHeight;
		var oOverflow = this._fnDTOverflow();
		var iLeftWidth = this.s.iLeftWidth;
		var iRightWidth = this.s.iRightWidth;
		var rtl = $(this.dom.body).css('direction') === 'rtl';
		var wrapper;
		var scrollbarAdjust = function ( node, width ) {
			if ( ! oOverflow.bar ) {
				// If there is no scrollbar (Macs) we need to hide the auto scrollbar
				node.style.width = (width+20)+"px";
				node.style.paddingRight = "20px";
				node.style.boxSizing = "border-box";
			}
			else if ( that._firefoxScrollError() ) {
				// See the above function for why this is required
				if ( $(node).height() > 34 ) {
					node.style.width = (width+oOverflow.bar)+"px";
				}
			}
			else {
				// Otherwise just overflow by the scrollbar
				node.style.width = (width+oOverflow.bar)+"px";
			}
		};

		// When x scrolling - don't paint the fixed columns over the x scrollbar
		if ( oOverflow.x )
		{
			iBodyHeight -= oOverflow.bar;
		}

		oGrid.wrapper.style.height = iFullHeight+"px";

		if ( this.s.iLeftColumns > 0 )
		{
			wrapper = oGrid.left.wrapper;
			wrapper.style.width = iLeftWidth+'px';
			wrapper.style.height = '1px';

			// Swap the position of the left and right columns for rtl (#48)
			// This is always up against the edge, scrollbar on the far side
			if ( rtl ) {
				wrapper.style.left = '';
				wrapper.style.right = 0;
			}
			else {
				wrapper.style.left = 0;
				wrapper.style.right = '';
			}

			oGrid.left.body.style.height = iBodyHeight+"px";
			if ( oGrid.left.foot ) {
				oGrid.left.foot.style.top = (oOverflow.x ? oOverflow.bar : 0)+"px"; // shift footer for scrollbar
			}

			scrollbarAdjust( oGrid.left.liner, iLeftWidth );
			oGrid.left.liner.style.height = iBodyHeight+"px";
			oGrid.left.liner.style.maxHeight = iBodyHeight+"px";
		}

		if ( this.s.iRightColumns > 0 )
		{
			wrapper = oGrid.right.wrapper;
			wrapper.style.width = iRightWidth+'px';
			wrapper.style.height = '1px';

			// Need to take account of the vertical scrollbar
			if ( this.s.rtl ) {
				wrapper.style.left = oOverflow.y ? oOverflow.bar+'px' : 0;
				wrapper.style.right = '';
			}
			else {
				wrapper.style.left = '';
				wrapper.style.right = oOverflow.y ? oOverflow.bar+'px' : 0;
			}

			oGrid.right.body.style.height = iBodyHeight+"px";
			if ( oGrid.right.foot ) {
				oGrid.right.foot.style.top = (oOverflow.x ? oOverflow.bar : 0)+"px";
			}

			scrollbarAdjust( oGrid.right.liner, iRightWidth );
			oGrid.right.liner.style.height = iBodyHeight+"px";
			oGrid.right.liner.style.maxHeight = iBodyHeight+"px";

			oGrid.right.headBlock.style.display = oOverflow.y ? 'block' : 'none';
			oGrid.right.footBlock.style.display = oOverflow.y ? 'block' : 'none';
		}
	},


	/**
	 * Get information about the DataTable's scrolling state - specifically if the table is scrolling
	 * on either the x or y axis, and also the scrollbar width.
	 *  @returns {object} Information about the DataTables scrolling state with the properties:
	 *    'x', 'y' and 'bar'
	 *  @private
	 */
	"_fnDTOverflow": function ()
	{
		var nTable = this.s.dt.nTable;
		var nTableScrollBody = nTable.parentNode;
		var out = {
			"x": false,
			"y": false,
			"bar": this.s.dt.oScroll.iBarWidth
		};

		if ( nTable.offsetWidth > nTableScrollBody.clientWidth )
		{
			out.x = true;
		}

		if ( nTable.offsetHeight > nTableScrollBody.clientHeight )
		{
			out.y = true;
		}

		return out;
	},


	/**
	 * Clone and position the fixed columns
	 *  @returns {void}
	 *  @param   {Boolean} bAll Indicate if the header and footer should be updated as well (true)
	 *  @private
	 */
	"_fnDraw": function ( bAll )
	{
		this._fnGridLayout();
		this._fnCloneLeft( bAll );
		this._fnCloneRight( bAll );

		/* Draw callback function */
		if ( this.s.fnDrawCallback !== null )
		{
			this.s.fnDrawCallback.call( this, this.dom.clone.left, this.dom.clone.right );
		}

		/* Event triggering */
		$(this).trigger( 'draw.dtfc', {
			"leftClone": this.dom.clone.left,
			"rightClone": this.dom.clone.right
		} );
	},


	/**
	 * Clone the right columns
	 *  @returns {void}
	 *  @param   {Boolean} bAll Indicate if the header and footer should be updated as well (true)
	 *  @private
	 */
	"_fnCloneRight": function ( bAll )
	{
		if ( this.s.iRightColumns <= 0 ) {
			return;
		}

		var that = this,
			i, jq,
			aiColumns = [];

		for ( i=this.s.iTableColumns-this.s.iRightColumns ; i<this.s.iTableColumns ; i++ ) {
			if ( this.s.dt.aoColumns[i].bVisible ) {
				aiColumns.push( i );
			}
		}

		this._fnClone( this.dom.clone.right, this.dom.grid.right, aiColumns, bAll );
	},


	/**
	 * Clone the left columns
	 *  @returns {void}
	 *  @param   {Boolean} bAll Indicate if the header and footer should be updated as well (true)
	 *  @private
	 */
	"_fnCloneLeft": function ( bAll )
	{
		if ( this.s.iLeftColumns <= 0 ) {
			return;
		}

		var that = this,
			i, jq,
			aiColumns = [];

		for ( i=0 ; i<this.s.iLeftColumns ; i++ ) {
			if ( this.s.dt.aoColumns[i].bVisible ) {
				aiColumns.push( i );
			}
		}

		this._fnClone( this.dom.clone.left, this.dom.grid.left, aiColumns, bAll );
	},


	/**
	 * Make a copy of the layout object for a header or footer element from DataTables. Note that
	 * this method will clone the nodes in the layout object.
	 *  @returns {Array} Copy of the layout array
	 *  @param   {Object} aoOriginal Layout array from DataTables (aoHeader or aoFooter)
	 *  @param   {Object} aiColumns Columns to copy
	 *  @param   {boolean} events Copy cell events or not
	 *  @private
	 */
	"_fnCopyLayout": function ( aoOriginal, aiColumns, events )
	{
		var aReturn = [];
		var aClones = [];
		var aCloned = [];

		for ( var i=0, iLen=aoOriginal.length ; i<iLen ; i++ )
		{
			var aRow = [];
			aRow.nTr = $(aoOriginal[i].nTr).clone(events, false)[0];

			for ( var j=0, jLen=this.s.iTableColumns ; j<jLen ; j++ )
			{
				if ( $.inArray( j, aiColumns ) === -1 )
				{
					continue;
				}

				var iCloned = $.inArray( aoOriginal[i][j].cell, aCloned );
				if ( iCloned === -1 )
				{
					var nClone = $(aoOriginal[i][j].cell).clone(events, false)[0];
					aClones.push( nClone );
					aCloned.push( aoOriginal[i][j].cell );

					aRow.push( {
						"cell": nClone,
						"unique": aoOriginal[i][j].unique
					} );
				}
				else
				{
					aRow.push( {
						"cell": aClones[ iCloned ],
						"unique": aoOriginal[i][j].unique
					} );
				}
			}

			aReturn.push( aRow );
		}

		return aReturn;
	},


	/**
	 * Clone the DataTable nodes and place them in the DOM (sized correctly)
	 *  @returns {void}
	 *  @param   {Object} oClone Object containing the header, footer and body cloned DOM elements
	 *  @param   {Object} oGrid Grid object containing the display grid elements for the cloned
	 *                    column (left or right)
	 *  @param   {Array} aiColumns Column indexes which should be operated on from the DataTable
	 *  @param   {Boolean} bAll Indicate if the header and footer should be updated as well (true)
	 *  @private
	 */
	"_fnClone": function ( oClone, oGrid, aiColumns, bAll )
	{
		var that = this,
			i, iLen, j, jLen, jq, nTarget, iColumn, nClone, iIndex, aoCloneLayout,
			jqCloneThead, aoFixedHeader,
			dt = this.s.dt;

		/*
		 * Header
		 */
		if ( bAll )
		{
			$(oClone.header).remove();

			oClone.header = $(this.dom.header).clone(true, false)[0];
			oClone.header.className += " DTFC_Cloned";
			oClone.header.style.width = "100%";
			oGrid.head.appendChild( oClone.header );

			/* Copy the DataTables layout cache for the header for our floating column */
			aoCloneLayout = this._fnCopyLayout( dt.aoHeader, aiColumns, true );
			jqCloneThead = $('>thead', oClone.header);
			jqCloneThead.empty();

			/* Add the created cloned TR elements to the table */
			for ( i=0, iLen=aoCloneLayout.length ; i<iLen ; i++ )
			{
				jqCloneThead[0].appendChild( aoCloneLayout[i].nTr );
			}

			/* Use the handy _fnDrawHead function in DataTables to do the rowspan/colspan
			 * calculations for us
			 */
			dt.oApi._fnDrawHead( dt, aoCloneLayout, true );
		}
		else
		{
			/* To ensure that we copy cell classes exactly, regardless of colspan, multiple rows
			 * etc, we make a copy of the header from the DataTable again, but don't insert the
			 * cloned cells, just copy the classes across. To get the matching layout for the
			 * fixed component, we use the DataTables _fnDetectHeader method, allowing 1:1 mapping
			 */
			aoCloneLayout = this._fnCopyLayout( dt.aoHeader, aiColumns, false );
			aoFixedHeader=[];

			dt.oApi._fnDetectHeader( aoFixedHeader, $('>thead', oClone.header)[0] );

			for ( i=0, iLen=aoCloneLayout.length ; i<iLen ; i++ )
			{
				for ( j=0, jLen=aoCloneLayout[i].length ; j<jLen ; j++ )
				{
					aoFixedHeader[i][j].cell.className = aoCloneLayout[i][j].cell.className;

					// If jQuery UI theming is used we need to copy those elements as well
					$('span.DataTables_sort_icon', aoFixedHeader[i][j].cell).each( function () {
						this.className = $('span.DataTables_sort_icon', aoCloneLayout[i][j].cell)[0].className;
					} );
				}
			}
		}
		this._fnEqualiseHeights( 'thead', this.dom.header, oClone.header );

		/*
		 * Body
		 */
		if ( this.s.sHeightMatch == 'auto' )
		{
			/* Remove any heights which have been applied already and let the browser figure it out */
			$('>tbody>tr', that.dom.body).css('height', 'auto');
		}

		if ( oClone.body !== null )
		{
			$(oClone.body).remove();
			oClone.body = null;
		}

		oClone.body = $(this.dom.body).clone(true)[0];
		oClone.body.className += " DTFC_Cloned";
		oClone.body.style.paddingBottom = dt.oScroll.iBarWidth+"px";
		oClone.body.style.marginBottom = (dt.oScroll.iBarWidth*2)+"px"; /* For IE */
		if ( oClone.body.getAttribute('id') !== null )
		{
			oClone.body.removeAttribute('id');
		}

		$('>thead>tr', oClone.body).empty();
		$('>tfoot', oClone.body).remove();

		var nBody = $('tbody', oClone.body)[0];
		$(nBody).empty();
		if ( dt.aiDisplay.length > 0 )
		{
			/* Copy the DataTables' header elements to force the column width in exactly the
			 * same way that DataTables does it - have the header element, apply the width and
			 * colapse it down
			 */
			var nInnerThead = $('>thead>tr', oClone.body)[0];
			for ( iIndex=0 ; iIndex<aiColumns.length ; iIndex++ )
			{
				iColumn = aiColumns[iIndex];

				nClone = $(dt.aoColumns[iColumn].nTh).clone(true)[0];
				nClone.innerHTML = "";

				var oStyle = nClone.style;
				oStyle.paddingTop = "0";
				oStyle.paddingBottom = "0";
				oStyle.borderTopWidth = "0";
				oStyle.borderBottomWidth = "0";
				oStyle.height = 0;
				oStyle.width = that.s.aiInnerWidths[iColumn]+"px";

				nInnerThead.appendChild( nClone );
			}

			/* Add in the tbody elements, cloning form the master table */
			$('>tbody>tr', that.dom.body).each( function (z) {
				var i = that.s.dt.oFeatures.bServerSide===false ?
					that.s.dt.aiDisplay[ that.s.dt._iDisplayStart+z ] : z;
				var aTds = that.s.dt.aoData[ i ].anCells || $(this).children('td, th');

				var n = this.cloneNode(false);
				n.removeAttribute('id');
				n.setAttribute( 'data-dt-row', i );

				for ( iIndex=0 ; iIndex<aiColumns.length ; iIndex++ )
				{
					iColumn = aiColumns[iIndex];

					if ( aTds.length > 0 )
					{
						nClone = $( aTds[iColumn] ).clone(true, true)[0];
						nClone.removeAttribute( 'id' );
						nClone.setAttribute( 'data-dt-row', i );
						nClone.setAttribute( 'data-dt-column', iColumn );
						n.appendChild( nClone );
					}
				}
				nBody.appendChild( n );
			} );
		}
		else
		{
			$('>tbody>tr', that.dom.body).each( function (z) {
				nClone = this.cloneNode(true);
				nClone.className += ' DTFC_NoData';
				$('td', nClone).html('');
				nBody.appendChild( nClone );
			} );
		}

		oClone.body.style.width = "100%";
		oClone.body.style.margin = "0";
		oClone.body.style.padding = "0";

		// Interop with Scroller - need to use a height forcing element in the
		// scrolling area in the same way that Scroller does in the body scroll.
		if ( dt.oScroller !== undefined )
		{
			var scrollerForcer = dt.oScroller.dom.force;

			if ( ! oGrid.forcer ) {
				oGrid.forcer = scrollerForcer.cloneNode( true );
				oGrid.liner.appendChild( oGrid.forcer );
			}
			else {
				oGrid.forcer.style.height = scrollerForcer.style.height;
			}
		}

		oGrid.liner.appendChild( oClone.body );

		this._fnEqualiseHeights( 'tbody', that.dom.body, oClone.body );

		/*
		 * Footer
		 */
		if ( dt.nTFoot !== null )
		{
			if ( bAll )
			{
				if ( oClone.footer !== null )
				{
					oClone.footer.parentNode.removeChild( oClone.footer );
				}
				oClone.footer = $(this.dom.footer).clone(true, true)[0];
				oClone.footer.className += " DTFC_Cloned";
				oClone.footer.style.width = "100%";
				oGrid.foot.appendChild( oClone.footer );

				/* Copy the footer just like we do for the header */
				aoCloneLayout = this._fnCopyLayout( dt.aoFooter, aiColumns, true );
				var jqCloneTfoot = $('>tfoot', oClone.footer);
				jqCloneTfoot.empty();

				for ( i=0, iLen=aoCloneLayout.length ; i<iLen ; i++ )
				{
					jqCloneTfoot[0].appendChild( aoCloneLayout[i].nTr );
				}
				dt.oApi._fnDrawHead( dt, aoCloneLayout, true );
			}
			else
			{
				aoCloneLayout = this._fnCopyLayout( dt.aoFooter, aiColumns, false );
				var aoCurrFooter=[];

				dt.oApi._fnDetectHeader( aoCurrFooter, $('>tfoot', oClone.footer)[0] );

				for ( i=0, iLen=aoCloneLayout.length ; i<iLen ; i++ )
				{
					for ( j=0, jLen=aoCloneLayout[i].length ; j<jLen ; j++ )
					{
						aoCurrFooter[i][j].cell.className = aoCloneLayout[i][j].cell.className;
					}
				}
			}
			this._fnEqualiseHeights( 'tfoot', this.dom.footer, oClone.footer );
		}

		/* Equalise the column widths between the header footer and body - body get's priority */
		var anUnique = dt.oApi._fnGetUniqueThs( dt, $('>thead', oClone.header)[0] );
		$(anUnique).each( function (i) {
			iColumn = aiColumns[i];
			this.style.width = that.s.aiInnerWidths[iColumn]+"px";
		} );

		if ( that.s.dt.nTFoot !== null )
		{
			anUnique = dt.oApi._fnGetUniqueThs( dt, $('>tfoot', oClone.footer)[0] );
			$(anUnique).each( function (i) {
				iColumn = aiColumns[i];
				this.style.width = that.s.aiInnerWidths[iColumn]+"px";
			} );
		}
	},


	/**
	 * From a given table node (THEAD etc), get a list of TR direct child elements
	 *  @param   {Node} nIn Table element to search for TR elements (THEAD, TBODY or TFOOT element)
	 *  @returns {Array} List of TR elements found
	 *  @private
	 */
	"_fnGetTrNodes": function ( nIn )
	{
		var aOut = [];
		for ( var i=0, iLen=nIn.childNodes.length ; i<iLen ; i++ )
		{
			if ( nIn.childNodes[i].nodeName.toUpperCase() == "TR" )
			{
				aOut.push( nIn.childNodes[i] );
			}
		}
		return aOut;
	},


	/**
	 * Equalise the heights of the rows in a given table node in a cross browser way
	 *  @returns {void}
	 *  @param   {String} nodeName Node type - thead, tbody or tfoot
	 *  @param   {Node} original Original node to take the heights from
	 *  @param   {Node} clone Copy the heights to
	 *  @private
	 */
	"_fnEqualiseHeights": function ( nodeName, original, clone )
	{
		if ( this.s.sHeightMatch == 'none' && nodeName !== 'thead' && nodeName !== 'tfoot' )
		{
			return;
		}

		var that = this,
			i, iLen, iHeight, iHeight2, iHeightOriginal, iHeightClone,
			rootOriginal = original.getElementsByTagName(nodeName)[0],
			rootClone    = clone.getElementsByTagName(nodeName)[0],
			jqBoxHack    = $('>'+nodeName+'>tr:eq(0)', original).children(':first'),
			iBoxHack     = jqBoxHack.outerHeight() - jqBoxHack.height(),
			anOriginal   = this._fnGetTrNodes( rootOriginal ),
			anClone      = this._fnGetTrNodes( rootClone ),
			heights      = [];

		for ( i=0, iLen=anClone.length ; i<iLen ; i++ )
		{
			iHeightOriginal = anOriginal[i].offsetHeight;
			iHeightClone = anClone[i].offsetHeight;
			iHeight = iHeightClone > iHeightOriginal ? iHeightClone : iHeightOriginal;

			if ( this.s.sHeightMatch == 'semiauto' )
			{
				anOriginal[i]._DTTC_iHeight = iHeight;
			}

			heights.push( iHeight );
		}

		for ( i=0, iLen=anClone.length ; i<iLen ; i++ )
		{
			anClone[i].style.height = heights[i]+"px";
			anOriginal[i].style.height = heights[i]+"px";
		}
	},

	/**
	 * Determine if the UA suffers from Firefox's overflow:scroll scrollbars
	 * not being shown bug.
	 *
	 * Firefox doesn't draw scrollbars, even if it is told to using
	 * overflow:scroll, if the div is less than 34px height. See bugs 292284 and
	 * 781885. Using UA detection here since this is particularly hard to detect
	 * using objects - its a straight up rendering error in Firefox.
	 *
	 * @return {boolean} True if Firefox error is present, false otherwise
	 */
	_firefoxScrollError: function () {
		if ( _firefoxScroll === undefined ) {
			var test = $('<div/>')
				.css( {
					position: 'absolute',
					top: 0,
					left: 0,
					height: 10,
					width: 50,
					overflow: 'scroll'
				} )
				.appendTo( 'body' );

			// Make sure this doesn't apply on Macs with 0 width scrollbars
			_firefoxScroll = (
				test[0].clientWidth === test[0].offsetWidth && this._fnDTOverflow().bar !== 0
			);

			test.remove();
		}

		return _firefoxScroll;
	}
} );



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Statics
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/**
 * FixedColumns default settings for initialisation
 *  @name FixedColumns.defaults
 *  @namespace
 *  @static
 */
FixedColumns.defaults = /** @lends FixedColumns.defaults */{
	/**
	 * Number of left hand columns to fix in position
	 *  @type     int
	 *  @default  1
	 *  @static
	 *  @example
	 *      var  = $('#example').dataTable( {
	 *          "scrollX": "100%"
	 *      } );
	 *      new $.fn.dataTable.fixedColumns( table, {
	 *          "leftColumns": 2
	 *      } );
	 */
	"iLeftColumns": 1,

	/**
	 * Number of right hand columns to fix in position
	 *  @type     int
	 *  @default  0
	 *  @static
	 *  @example
	 *      var table = $('#example').dataTable( {
	 *          "scrollX": "100%"
	 *      } );
	 *      new $.fn.dataTable.fixedColumns( table, {
	 *          "rightColumns": 1
	 *      } );
	 */
	"iRightColumns": 0,

	/**
	 * Draw callback function which is called when FixedColumns has redrawn the fixed assets
	 *  @type     function(object, object):void
	 *  @default  null
	 *  @static
	 *  @example
	 *      var table = $('#example').dataTable( {
	 *          "scrollX": "100%"
	 *      } );
	 *      new $.fn.dataTable.fixedColumns( table, {
	 *          "drawCallback": function () {
	 *	            alert( "FixedColumns redraw" );
	 *	        }
	 *      } );
	 */
	"fnDrawCallback": null,

	/**
	 * Height matching algorthim to use. This can be "none" which will result in no height
	 * matching being applied by FixedColumns (height matching could be forced by CSS in this
	 * case), "semiauto" whereby the height calculation will be performed once, and the result
	 * cached to be used again (fnRecalculateHeight can be used to force recalculation), or
	 * "auto" when height matching is performed on every draw (slowest but must accurate)
	 *  @type     string
	 *  @default  semiauto
	 *  @static
	 *  @example
	 *      var table = $('#example').dataTable( {
	 *          "scrollX": "100%"
	 *      } );
	 *      new $.fn.dataTable.fixedColumns( table, {
	 *          "heightMatch": "auto"
	 *      } );
	 */
	"sHeightMatch": "semiauto"
};




/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Constants
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/**
 * FixedColumns version
 *  @name      FixedColumns.version
 *  @type      String
 *  @default   See code
 *  @static
 */
FixedColumns.version = "3.2.5";



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * DataTables API integration
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

DataTable.Api.register( 'fixedColumns()', function () {
	return this;
} );

DataTable.Api.register( 'fixedColumns().update()', function () {
	return this.iterator( 'table', function ( ctx ) {
		if ( ctx._oFixedColumns ) {
			ctx._oFixedColumns.fnUpdate();
		}
	} );
} );

DataTable.Api.register( 'fixedColumns().relayout()', function () {
	return this.iterator( 'table', function ( ctx ) {
		if ( ctx._oFixedColumns ) {
			ctx._oFixedColumns.fnRedrawLayout();
		}
	} );
} );

DataTable.Api.register( 'rows().recalcHeight()', function () {
	return this.iterator( 'row', function ( ctx, idx ) {
		if ( ctx._oFixedColumns ) {
			ctx._oFixedColumns.fnRecalculateHeight( this.row(idx).node() );
		}
	} );
} );

DataTable.Api.register( 'fixedColumns().rowIndex()', function ( row ) {
	row = $(row);

	return row.parents('.DTFC_Cloned').length ?
		this.rows( { page: 'current' } ).indexes()[ row.index() ] :
		this.row( row ).index();
} );

DataTable.Api.register( 'fixedColumns().cellIndex()', function ( cell ) {
	cell = $(cell);

	if ( cell.parents('.DTFC_Cloned').length ) {
		var rowClonedIdx = cell.parent().index();
		var rowIdx = this.rows( { page: 'current' } ).indexes()[ rowClonedIdx ];
		var columnIdx;

		if ( cell.parents('.DTFC_LeftWrapper').length ) {
			columnIdx = cell.index();
		}
		else {
			var columns = this.columns().flatten().length;
			columnIdx = columns - this.context[0]._oFixedColumns.s.iRightColumns + cell.index();
		}

		return {
			row: rowIdx,
			column: this.column.index( 'toData', columnIdx ),
			columnVisible: columnIdx
		};
	}
	else {
		return this.cell( cell ).index();
	}
} );




/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Initialisation
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

// Attach a listener to the document which listens for DataTables initialisation
// events so we can automatically initialise
$(document).on( 'init.dt.fixedColumns', function (e, settings) {
	if ( e.namespace !== 'dt' ) {
		return;
	}

	var init = settings.oInit.fixedColumns;
	var defaults = DataTable.defaults.fixedColumns;

	if ( init || defaults ) {
		var opts = $.extend( {}, init, defaults );

		if ( init !== false ) {
			new FixedColumns( settings, opts );
		}
	}
} );



// Make FixedColumns accessible from the DataTables instance
$.fn.dataTable.FixedColumns = FixedColumns;
$.fn.DataTable.FixedColumns = FixedColumns;

return FixedColumns;
}));


/*! FixedHeader 3.1.4
 * Â©2009-2018 SpryMedia Ltd - datatables.net/license
 */

/**
 * @summary     FixedHeader
 * @description Fix a table's header or footer, so it is always visible while
 *              scrolling
 * @version     3.1.4
 * @file        dataTables.fixedHeader.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     www.sprymedia.co.uk/contact
 * @copyright   Copyright 2009-2018 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license/mit
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */

(function( factory ){
	if ( typeof define === 'function' && define.amd ) {
		// AMD
		define( ['jquery', 'datatables.net'], function ( $ ) {
			return factory( $, window, document );
		} );
	}
	else if ( typeof exports === 'object' ) {
		// CommonJS
		module.exports = function (root, $) {
			if ( ! root ) {
				root = window;
			}

			if ( ! $ || ! $.fn.dataTable ) {
				$ = require('datatables.net')(root, $).$;
			}

			return factory( $, root, root.document );
		};
	}
	else {
		// Browser
		factory( jQuery, window, document );
	}
}(function( $, window, document, undefined ) {
'use strict';
var DataTable = $.fn.dataTable;


var _instCounter = 0;

var FixedHeader = function ( dt, config ) {
	// Sanity check - you just know it will happen
	if ( ! (this instanceof FixedHeader) ) {
		throw "FixedHeader must be initialised with the 'new' keyword.";
	}

	// Allow a boolean true for defaults
	if ( config === true ) {
		config = {};
	}

	dt = new DataTable.Api( dt );

	this.c = $.extend( true, {}, FixedHeader.defaults, config );

	this.s = {
		dt: dt,
		position: {
			theadTop: 0,
			tbodyTop: 0,
			tfootTop: 0,
			tfootBottom: 0,
			width: 0,
			left: 0,
			tfootHeight: 0,
			theadHeight: 0,
			windowHeight: $(window).height(),
			visible: true
		},
		headerMode: null,
		footerMode: null,
		autoWidth: dt.settings()[0].oFeatures.bAutoWidth,
		namespace: '.dtfc'+(_instCounter++),
		scrollLeft: {
			header: -1,
			footer: -1
		},
		enable: true
	};

	this.dom = {
		floatingHeader: null,
		thead: $(dt.table().header()),
		tbody: $(dt.table().body()),
		tfoot: $(dt.table().footer()),
		header: {
			host: null,
			floating: null,
			placeholder: null
		},
		footer: {
			host: null,
			floating: null,
			placeholder: null
		}
	};

	this.dom.header.host = this.dom.thead.parent();
	this.dom.footer.host = this.dom.tfoot.parent();

	var dtSettings = dt.settings()[0];
	if ( dtSettings._fixedHeader ) {
		throw "FixedHeader already initialised on table "+dtSettings.nTable.id;
	}

	dtSettings._fixedHeader = this;

	this._constructor();
};


/*
 * Variable: FixedHeader
 * Purpose:  Prototype for FixedHeader
 * Scope:    global
 */
$.extend( FixedHeader.prototype, {
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * API methods
	 */
	
	/**
	 * Enable / disable the fixed elements
	 *
	 * @param  {boolean} enable `true` to enable, `false` to disable
	 */
	enable: function ( enable )
	{
		this.s.enable = enable;

		if ( this.c.header ) {
			this._modeChange( 'in-place', 'header', true );
		}

		if ( this.c.footer && this.dom.tfoot.length ) {
			this._modeChange( 'in-place', 'footer', true );
		}

		this.update();
	},
	
	/**
	 * Set header offset 
	 *
	 * @param  {int} new value for headerOffset
	 */
	headerOffset: function ( offset )
	{
		if ( offset !== undefined ) {
			this.c.headerOffset = offset;
			this.update();
		}

		return this.c.headerOffset;
	},
	
	/**
	 * Set footer offset
	 *
	 * @param  {int} new value for footerOffset
	 */
	footerOffset: function ( offset )
	{
		if ( offset !== undefined ) {
			this.c.footerOffset = offset;
			this.update();
		}

		return this.c.footerOffset;
	},

	
	/**
	 * Recalculate the position of the fixed elements and force them into place
	 */
	update: function ()
	{
		this._positions();
		this._scroll( true );
	},


	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Constructor
	 */
	
	/**
	 * FixedHeader constructor - adding the required event listeners and
	 * simple initialisation
	 *
	 * @private
	 */
	_constructor: function ()
	{
		var that = this;
		var dt = this.s.dt;

		$(window)
			.on( 'scroll'+this.s.namespace, function () {
				that._scroll();
			} )
			.on( 'resize'+this.s.namespace, DataTable.util.throttle( function () {
				that.s.position.windowHeight = $(window).height();
				that.update();
			}, 50 ) );

		var autoHeader = $('.fh-fixedHeader');
		if ( ! this.c.headerOffset && autoHeader.length ) {
			this.c.headerOffset = autoHeader.outerHeight();
		}

		var autoFooter = $('.fh-fixedFooter');
		if ( ! this.c.footerOffset && autoFooter.length ) {
			this.c.footerOffset = autoFooter.outerHeight();
		}

		dt.on( 'column-reorder.dt.dtfc column-visibility.dt.dtfc draw.dt.dtfc column-sizing.dt.dtfc responsive-display.dt.dtfc', function () {
			that.update();
		} );

		dt.on( 'destroy.dtfc', function () {
			if ( that.c.header ) {
				that._modeChange( 'in-place', 'header', true );
			}

			if ( that.c.footer && that.dom.tfoot.length ) {
				that._modeChange( 'in-place', 'footer', true );
			}

			dt.off( '.dtfc' );
			$(window).off( that.s.namespace );
		} );

		this._positions();
		this._scroll();
	},


	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Private methods
	 */

	/**
	 * Clone a fixed item to act as a place holder for the original element
	 * which is moved into a clone of the table element, and moved around the
	 * document to give the fixed effect.
	 *
	 * @param  {string}  item  'header' or 'footer'
	 * @param  {boolean} force Force the clone to happen, or allow automatic
	 *   decision (reuse existing if available)
	 * @private
	 */
	_clone: function ( item, force )
	{
		var dt = this.s.dt;
		var itemDom = this.dom[ item ];
		var itemElement = item === 'header' ?
			this.dom.thead :
			this.dom.tfoot;

		if ( ! force && itemDom.floating ) {
			// existing floating element - reuse it
			itemDom.floating.removeClass( 'fixedHeader-floating fixedHeader-locked' );
		}
		else {
			if ( itemDom.floating ) {
				itemDom.placeholder.remove();
				this._unsize( item );
				itemDom.floating.children().detach();
				itemDom.floating.remove();
			}

			itemDom.floating = $( dt.table().node().cloneNode( false ) )
				.css( 'table-layout', 'fixed' )
				.attr( 'aria-hidden', 'true' )
				.removeAttr( 'id' )
				.append( itemElement )
				.appendTo( 'body' );

			// Insert a fake thead/tfoot into the DataTable to stop it jumping around
			itemDom.placeholder = itemElement.clone( false )
			itemDom.placeholder
				.find( '*[id]' )
				.removeAttr( 'id' );

			itemDom.host.prepend( itemDom.placeholder );

			// Clone widths
			this._matchWidths( itemDom.placeholder, itemDom.floating );
		}
	},

	/**
	 * Copy widths from the cells in one element to another. This is required
	 * for the footer as the footer in the main table takes its sizes from the
	 * header columns. That isn't present in the footer so to have it still
	 * align correctly, the sizes need to be copied over. It is also required
	 * for the header when auto width is not enabled
	 *
	 * @param  {jQuery} from Copy widths from
	 * @param  {jQuery} to   Copy widths to
	 * @private
	 */
	_matchWidths: function ( from, to ) {
		var get = function ( name ) {
			return $(name, from)
				.map( function () {
					return $(this).width();
				} ).toArray();
		};

		var set = function ( name, toWidths ) {
			$(name, to).each( function ( i ) {
				$(this).css( {
					width: toWidths[i],
					minWidth: toWidths[i]
				} );
			} );
		};

		var thWidths = get( 'th' );
		var tdWidths = get( 'td' );

		set( 'th', thWidths );
		set( 'td', tdWidths );
	},

	/**
	 * Remove assigned widths from the cells in an element. This is required
	 * when inserting the footer back into the main table so the size is defined
	 * by the header columns and also when auto width is disabled in the
	 * DataTable.
	 *
	 * @param  {string} item The `header` or `footer`
	 * @private
	 */
	_unsize: function ( item ) {
		var el = this.dom[ item ].floating;

		if ( el && (item === 'footer' || (item === 'header' && ! this.s.autoWidth)) ) {
			$('th, td', el).css( {
				width: '',
				minWidth: ''
			} );
		}
		else if ( el && item === 'header' ) {
			$('th, td', el).css( 'min-width', '' );
		}
	},

	/**
	 * Reposition the floating elements to take account of horizontal page
	 * scroll
	 *
	 * @param  {string} item       The `header` or `footer`
	 * @param  {int}    scrollLeft Document scrollLeft
	 * @private
	 */
	_horizontal: function ( item, scrollLeft )
	{
		var itemDom = this.dom[ item ];
		var position = this.s.position;
		var lastScrollLeft = this.s.scrollLeft;

		if ( itemDom.floating && lastScrollLeft[ item ] !== scrollLeft ) {
			itemDom.floating.css( 'left', position.left - scrollLeft );

			lastScrollLeft[ item ] = scrollLeft;
		}
	},

	/**
	 * Change from one display mode to another. Each fixed item can be in one
	 * of:
	 *
	 * * `in-place` - In the main DataTable
	 * * `in` - Floating over the DataTable
	 * * `below` - (Header only) Fixed to the bottom of the table body
	 * * `above` - (Footer only) Fixed to the top of the table body
	 * 
	 * @param  {string}  mode        Mode that the item should be shown in
	 * @param  {string}  item        'header' or 'footer'
	 * @param  {boolean} forceChange Force a redraw of the mode, even if already
	 *     in that mode.
	 * @private
	 */
	_modeChange: function ( mode, item, forceChange )
	{
		var dt = this.s.dt;
		var itemDom = this.dom[ item ];
		var position = this.s.position;

		// Record focus. Browser's will cause input elements to loose focus if
		// they are inserted else where in the doc
		var tablePart = this.dom[ item==='footer' ? 'tfoot' : 'thead' ];
		var focus = $.contains( tablePart[0], document.activeElement ) ?
			document.activeElement :
			null;
		
		if ( focus ) {
			focus.blur();
		}

		if ( mode === 'in-place' ) {
			// Insert the header back into the table's real header
			if ( itemDom.placeholder ) {
				itemDom.placeholder.remove();
				itemDom.placeholder = null;
			}

			this._unsize( item );

			if ( item === 'header' ) {
				itemDom.host.prepend( tablePart );
			}
			else {
				itemDom.host.append( tablePart );
			}

			if ( itemDom.floating ) {
				itemDom.floating.remove();
				itemDom.floating = null;
			}
		}
		else if ( mode === 'in' ) {
			// Remove the header from the read header and insert into a fixed
			// positioned floating table clone
			this._clone( item, forceChange );

			itemDom.floating
				.addClass( 'fixedHeader-floating' )
				.css( item === 'header' ? 'top' : 'bottom', this.c[item+'Offset'] )
				.css( 'left', position.left+'px' )
				.css( 'width', position.width+'px' );

			if ( item === 'footer' ) {
				itemDom.floating.css( 'top', '' );
			}
		}
		else if ( mode === 'below' ) { // only used for the header
			// Fix the position of the floating header at base of the table body
			this._clone( item, forceChange );

			itemDom.floating
				.addClass( 'fixedHeader-locked' )
				.css( 'top', position.tfootTop - position.theadHeight )
				.css( 'left', position.left+'px' )
				.css( 'width', position.width+'px' );
		}
		else if ( mode === 'above' ) { // only used for the footer
			// Fix the position of the floating footer at top of the table body
			this._clone( item, forceChange );

			itemDom.floating
				.addClass( 'fixedHeader-locked' )
				.css( 'top', position.tbodyTop )
				.css( 'left', position.left+'px' )
				.css( 'width', position.width+'px' );
		}

		// Restore focus if it was lost
		if ( focus && focus !== document.activeElement ) {
			setTimeout( function () {
				focus.focus();
			}, 10 );
		}

		this.s.scrollLeft.header = -1;
		this.s.scrollLeft.footer = -1;
		this.s[item+'Mode'] = mode;
	},

	/**
	 * Cache the positional information that is required for the mode
	 * calculations that FixedHeader performs.
	 *
	 * @private
	 */
	_positions: function ()
	{
		var dt = this.s.dt;
		var table = dt.table();
		var position = this.s.position;
		var dom = this.dom;
		var tableNode = $(table.node());

		// Need to use the header and footer that are in the main table,
		// regardless of if they are clones, since they hold the positions we
		// want to measure from
		var thead = tableNode.children('thead');
		var tfoot = tableNode.children('tfoot');
		var tbody = dom.tbody;

		position.visible = tableNode.is(':visible');
		position.width = tableNode.outerWidth();
		position.left = tableNode.offset().left;
		position.theadTop = thead.offset().top;
		position.tbodyTop = tbody.offset().top;
		position.theadHeight = position.tbodyTop - position.theadTop;

		if ( tfoot.length ) {
			position.tfootTop = tfoot.offset().top;
			position.tfootBottom = position.tfootTop + tfoot.outerHeight();
			position.tfootHeight = position.tfootBottom - position.tfootTop;
		}
		else {
			position.tfootTop = position.tbodyTop + tbody.outerHeight();
			position.tfootBottom = position.tfootTop;
			position.tfootHeight = position.tfootTop;
		}
	},


	/**
	 * Mode calculation - determine what mode the fixed items should be placed
	 * into.
	 *
	 * @param  {boolean} forceChange Force a redraw of the mode, even if already
	 *     in that mode.
	 * @private
	 */
	_scroll: function ( forceChange )
	{
		var windowTop = $(document).scrollTop();
		var windowLeft = $(document).scrollLeft();
		var position = this.s.position;
		var headerMode, footerMode;

		if ( ! this.s.enable ) {
			return;
		}

		if ( this.c.header ) {
			if ( ! position.visible || windowTop <= position.theadTop - this.c.headerOffset ) {
				headerMode = 'in-place';
			}
			else if ( windowTop <= position.tfootTop - position.theadHeight - this.c.headerOffset ) {
				headerMode = 'in';
			}
			else {
				headerMode = 'below';
			}

			if ( forceChange || headerMode !== this.s.headerMode ) {
				this._modeChange( headerMode, 'header', forceChange );
			}

			this._horizontal( 'header', windowLeft );
		}

		if ( this.c.footer && this.dom.tfoot.length ) {
			if ( ! position.visible || windowTop + position.windowHeight >= position.tfootBottom + this.c.footerOffset ) {
				footerMode = 'in-place';
			}
			else if ( position.windowHeight + windowTop > position.tbodyTop + position.tfootHeight + this.c.footerOffset ) {
				footerMode = 'in';
			}
			else {
				footerMode = 'above';
			}

			if ( forceChange || footerMode !== this.s.footerMode ) {
				this._modeChange( footerMode, 'footer', forceChange );
			}

			this._horizontal( 'footer', windowLeft );
		}
	}
} );


/**
 * Version
 * @type {String}
 * @static
 */
FixedHeader.version = "3.1.4";

/**
 * Defaults
 * @type {Object}
 * @static
 */
FixedHeader.defaults = {
	header: true,
	footer: false,
	headerOffset: 0,
	footerOffset: 0
};


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * DataTables interfaces
 */

// Attach for constructor access
$.fn.dataTable.FixedHeader = FixedHeader;
$.fn.DataTable.FixedHeader = FixedHeader;


// DataTables creation - check if the FixedHeader option has been defined on the
// table and if so, initialise
$(document).on( 'init.dt.dtfh', function (e, settings, json) {
	if ( e.namespace !== 'dt' ) {
		return;
	}

	var init = settings.oInit.fixedHeader;
	var defaults = DataTable.defaults.fixedHeader;

	if ( (init || defaults) && ! settings._fixedHeader ) {
		var opts = $.extend( {}, defaults, init );

		if ( init !== false ) {
			new FixedHeader( settings, opts );
		}
	}
} );

// DataTables API methods
DataTable.Api.register( 'fixedHeader()', function () {} );

DataTable.Api.register( 'fixedHeader.adjust()', function () {
	return this.iterator( 'table', function ( ctx ) {
		var fh = ctx._fixedHeader;

		if ( fh ) {
			fh.update();
		}
	} );
} );

DataTable.Api.register( 'fixedHeader.enable()', function ( flag ) {
	return this.iterator( 'table', function ( ctx ) {
		var fh = ctx._fixedHeader;

		flag = ( flag !== undefined ? flag : true );
		if ( fh && flag !== fh.s.enable ) {
			fh.enable( flag );
		}
	} );
} );

DataTable.Api.register( 'fixedHeader.disable()', function ( ) {
	return this.iterator( 'table', function ( ctx ) {
		var fh = ctx._fixedHeader;

		if ( fh && fh.s.enable ) {
			fh.enable( false );
		}
	} );
} );

$.each( ['header', 'footer'], function ( i, el ) {
	DataTable.Api.register( 'fixedHeader.'+el+'Offset()', function ( offset ) {
		var ctx = this.context;

		if ( offset === undefined ) {
			return ctx.length && ctx[0]._fixedHeader ?
				ctx[0]._fixedHeader[el +'Offset']() :
				undefined;
		}

		return this.iterator( 'table', function ( ctx ) {
			var fh = ctx._fixedHeader;

			if ( fh ) {
				fh[ el +'Offset' ]( offset );
			}
		} );
	} );
} );


return FixedHeader;
}));


/*! KeyTable 2.5.0
 * Â©2009-2018 SpryMedia Ltd - datatables.net/license
 */

/**
 * @summary     KeyTable
 * @description Spreadsheet like keyboard navigation for DataTables
 * @version     2.5.0
 * @file        dataTables.keyTable.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     www.sprymedia.co.uk/contact
 * @copyright   Copyright 2009-2018 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license/mit
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */

(function( factory ){
	if ( typeof define === 'function' && define.amd ) {
		// AMD
		define( ['jquery', 'datatables.net'], function ( $ ) {
			return factory( $, window, document );
		} );
	}
	else if ( typeof exports === 'object' ) {
		// CommonJS
		module.exports = function (root, $) {
			if ( ! root ) {
				root = window;
			}

			if ( ! $ || ! $.fn.dataTable ) {
				$ = require('datatables.net')(root, $).$;
			}

			return factory( $, root, root.document );
		};
	}
	else {
		// Browser
		factory( jQuery, window, document );
	}
}(function( $, window, document, undefined ) {
'use strict';
var DataTable = $.fn.dataTable;


var KeyTable = function ( dt, opts ) {
	// Sanity check that we are using DataTables 1.10 or newer
	if ( ! DataTable.versionCheck || ! DataTable.versionCheck( '1.10.8' ) ) {
		throw 'KeyTable requires DataTables 1.10.8 or newer';
	}

	// User and defaults configuration object
	this.c = $.extend( true, {},
		DataTable.defaults.keyTable,
		KeyTable.defaults,
		opts
	);

	// Internal settings
	this.s = {
		/** @type {DataTable.Api} DataTables' API instance */
		dt: new DataTable.Api( dt ),

		enable: true,

		/** @type {bool} Flag for if a draw is triggered by focus */
		focusDraw: false,

		/** @type {bool} Flag to indicate when waiting for a draw to happen.
		  *   Will ignore key presses at this point
		  */
		waitingForDraw: false,

		/** @type {object} Information about the last cell that was focused */
		lastFocus: null
	};

	// DOM items
	this.dom = {

	};

	// Check if row reorder has already been initialised on this table
	var settings = this.s.dt.settings()[0];
	var exisiting = settings.keytable;
	if ( exisiting ) {
		return exisiting;
	}

	settings.keytable = this;
	this._constructor();
};


$.extend( KeyTable.prototype, {
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * API methods for DataTables API interface
	 */

	/**
	 * Blur the table's cell focus
	 */
	blur: function ()
	{
		this._blur();
	},

	/**
	 * Enable cell focus for the table
	 *
	 * @param  {string} state Can be `true`, `false` or `-string navigation-only`
	 */
	enable: function ( state )
	{
		this.s.enable = state;
	},

	/**
	 * Focus on a cell
	 * @param  {integer} row    Row index
	 * @param  {integer} column Column index
	 */
	focus: function ( row, column )
	{
		this._focus( this.s.dt.cell( row, column ) );
	},

	/**
	 * Is the cell focused
	 * @param  {object} cell Cell index to check
	 * @returns {boolean} true if focused, false otherwise
	 */
	focused: function ( cell )
	{
		var lastFocus = this.s.lastFocus;

		if ( ! lastFocus ) {
			return false;
		}

		var lastIdx = this.s.lastFocus.cell.index();
		return cell.row === lastIdx.row && cell.column === lastIdx.column;
	},


	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Constructor
	 */

	/**
	 * Initialise the KeyTable instance
	 *
	 * @private
	 */
	_constructor: function ()
	{
		this._tabInput();

		var that = this;
		var dt = this.s.dt;
		var table = $( dt.table().node() );

		// Need to be able to calculate the cell positions relative to the table
		if ( table.css('position') === 'static' ) {
			table.css( 'position', 'relative' );
		}

		// Click to focus
		$( dt.table().body() ).on( 'click.keyTable', 'th, td', function (e) {
			if ( that.s.enable === false ) {
				return;
			}

			var cell = dt.cell( this );

			if ( ! cell.any() ) {
				return;
			}

			that._focus( cell, null, false, e );
		} );

		// Key events
		$( document ).on( 'keydown.keyTable', function (e) {
			that._key( e );
		} );

		// Click blur
		if ( this.c.blurable ) {
			$( document ).on( 'mousedown.keyTable', function ( e ) {
				// Click on the search input will blur focus
				if ( $(e.target).parents( '.dataTables_filter' ).length ) {
					that._blur();
				}

				// If the click was inside the DataTables container, don't blur
				if ( $(e.target).parents().filter( dt.table().container() ).length ) {
					return;
				}

				// Don't blur in Editor form
				if ( $(e.target).parents('div.DTE').length ) {
					return;
				}

				// Or an Editor date input
				if ( $(e.target).parents('div.editor-datetime').length ) {
					return;
				}

				//If the click was inside the fixed columns container, don't blur
				if ( $(e.target).parents().filter('.DTFC_Cloned').length ) {
					return;
				}

				that._blur();
			} );
		}

		if ( this.c.editor ) {
			var editor = this.c.editor;

			// Need to disable KeyTable when the main editor is shown
			editor.on( 'open.keyTableMain', function (e, mode, action) {
				if ( mode !== 'inline' && that.s.enable ) {
					that.enable( false );

					editor.one( 'close.keyTable', function () {
						that.enable( true );
					} );
				}
			} );

			if ( this.c.editOnFocus ) {
				dt.on( 'key-focus.keyTable key-refocus.keyTable', function ( e, dt, cell, orig ) {
					that._editor( null, orig, true );
				} );
			}

			// Activate Editor when a key is pressed (will be ignored, if
			// already active).
			dt.on( 'key.keyTable', function ( e, dt, key, cell, orig ) {
				that._editor( key, orig, false );
			} );

			// Active editing on double click - it will already have focus from
			// the click event handler above
			$( dt.table().body() ).on( 'dblclick.keyTable', 'th, td', function (e) {
				if ( that.s.enable === false ) {
					return;
				}

				var cell = dt.cell( this );

				if ( ! cell.any() ) {
					return;
				}

				that._editor( null, e, true );
			} );
		}

		// Stave saving
		if ( dt.settings()[0].oFeatures.bStateSave ) {
			dt.on( 'stateSaveParams.keyTable', function (e, s, d) {
				d.keyTable = that.s.lastFocus ?
					that.s.lastFocus.cell.index() :
					null;
			} );
		}

		// Redraw - retain focus on the current cell
		dt.on( 'draw.keyTable', function (e) {
			if ( that.s.focusDraw ) {
				return;
			}

			var lastFocus = that.s.lastFocus;

			if ( lastFocus && lastFocus.node && $(lastFocus.node).closest('body') === document.body ) {
				var relative = that.s.lastFocus.relative;
				var info = dt.page.info();
				var row = relative.row + info.start;

				if ( info.recordsDisplay === 0 ) {
					return;
				}

				// Reverse if needed
				if ( row >= info.recordsDisplay ) {
					row = info.recordsDisplay - 1;
				}

				that._focus( row, relative.column, true, e );
			}
		} );

		// Clipboard support
		if ( this.c.clipboard ) {
			this._clipboard();
		}

		dt.on( 'destroy.keyTable', function () {
			dt.off( '.keyTable' );
			$( dt.table().body() ).off( 'click.keyTable', 'th, td' );
			$( document )
				.off( 'keydown.keyTable' )
				.off( 'click.keyTable' )
				.off( 'copy.keyTable' )
				.off( 'paste.keyTable' );
		} );

		// Initial focus comes from state or options
		var state = dt.state.loaded();

		if ( state && state.keyTable ) {
			// Wait until init is done
			dt.one( 'init', function () {
				var cell = dt.cell( state.keyTable );

				// Ensure that the saved cell still exists
				if ( cell.any() ) {
					cell.focus();
				}
			} );
		}
		else if ( this.c.focus ) {
			dt.cell( this.c.focus ).focus();
		}
	},


	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Private methods
	 */

	/**
	 * Blur the control
	 *
	 * @private
	 */
	_blur: function ()
	{
		if ( ! this.s.enable || ! this.s.lastFocus ) {
			return;
		}

		var cell = this.s.lastFocus.cell;

		$( cell.node() ).removeClass( this.c.className );
		this.s.lastFocus = null;

		this._updateFixedColumns(cell.index().column);

		this._emitEvent( 'key-blur', [ this.s.dt, cell ] );
	},


	/**
	 * Clipboard interaction handlers
	 *
	 * @private
	 */
	_clipboard: function () {
		var dt = this.s.dt;
		var that = this;

		// IE8 doesn't support getting selected text
		if ( ! window.getSelection ) {
			return;
		}

		$(document).on( 'copy.keyTable', function (ejq) {
			var e = ejq.originalEvent;
			var selection = window.getSelection().toString();
			var focused = that.s.lastFocus;

			// Only copy cell text to clipboard if there is no other selection
			// and there is a focused cell
			if ( ! selection && focused ) {
				e.clipboardData.setData(
					'text/plain',
					focused.cell.render( that.c.clipboardOrthogonal )
				);
				e.preventDefault();
			}
		} );

		$(document).on( 'paste.keyTable', function (ejq) {
			var e = ejq.originalEvent;
			var focused = that.s.lastFocus;
			var activeEl = document.activeElement;
			var editor = that.c.editor;
			var pastedText;

			if ( focused && (! activeEl || activeEl.nodeName.toLowerCase() === 'body') ) {
				e.preventDefault();

				if ( window.clipboardData && window.clipboardData.getData ) {
					// IE
					pastedText = window.clipboardData.getData('Text');
				}
				else if ( e.clipboardData && e.clipboardData.getData ) {
					// Everything else
					pastedText = e.clipboardData.getData('text/plain');
				}

				if ( editor ) {
					// Got Editor - need to activate inline editing,
					// set the value and submit
					editor
						.inline( focused.cell.index() )
						.set( editor.displayed()[0], pastedText )
						.submit();
				}
				else {
					// No editor, so just dump the data in
					focused.cell.data( pastedText );
					dt.draw(false);
				}
			}
		} );
	},


	/**
	 * Get an array of the column indexes that KeyTable can operate on. This
	 * is a merge of the user supplied columns and the visible columns.
	 *
	 * @private
	 */
	_columns: function ()
	{
		var dt = this.s.dt;
		var user = dt.columns( this.c.columns ).indexes();
		var out = [];

		dt.columns( ':visible' ).every( function (i) {
			if ( user.indexOf( i ) !== -1 ) {
				out.push( i );
			}
		} );

		return out;
	},


	/**
	 * Perform excel like navigation for Editor by triggering an edit on key
	 * press
	 *
	 * @param  {integer} key Key code for the pressed key
	 * @param  {object} orig Original event
	 * @private
	 */
	_editor: function ( key, orig, hardEdit )
	{
		var that = this;
		var dt = this.s.dt;
		var editor = this.c.editor;
		var editCell = this.s.lastFocus.cell;

		// Do nothing if there is already an inline edit in this cell
		if ( $('div.DTE', editCell.node()).length ) {
			return;
		}

		// Don't activate Editor on control key presses
		if ( key !== null && (
			(key >= 0x00 && key <= 0x09) ||
			key === 0x0b ||
			key === 0x0c ||
			(key >= 0x0e && key <= 0x1f) ||
			(key >= 0x70 && key <= 0x7b) ||
			(key >= 0x7f && key <= 0x9f)
		) ) {
			return;
		}

		orig.stopPropagation();

		// Return key should do nothing - for textareas it would empty the
		// contents
		if ( key === 13 ) {
			orig.preventDefault();
		}

		var editInline = function () {
			editor
				.one( 'open.keyTable', function () {
					// Remove cancel open
					editor.off( 'cancelOpen.keyTable' );

					// Excel style - select all text
					if ( ! hardEdit ) {
						$('div.DTE_Field_InputControl input, div.DTE_Field_InputControl textarea').select();
					}

					// Reduce the keys the Keys listens for
					dt.keys.enable( hardEdit ? 'tab-only' : 'navigation-only' );

					// On blur of the navigation submit
					dt.on( 'key-blur.editor', function () {
						if ( editor.displayed() ) {
							editor.submit();
						}
					} );

					// Highlight the cell a different colour on full edit
					if ( hardEdit ) {
						$( dt.table().container() ).addClass('dtk-focus-alt');
					}

					editor.on( 'submitUnsuccessful.keyTable', function () {
						that._focus( editCell, null, false );
					} );

					// Restore full key navigation on close
					editor.one( 'close', function () {
						dt.keys.enable( true );
						dt.off( 'key-blur.editor' );
						editor.off( '.keyTable' );
						$( dt.table().container() ).removeClass('dtk-focus-alt');
					} );
				} )
				.one( 'cancelOpen.keyTable', function () {
					// `preOpen` can cancel the display of the form, so it
					// might be that the open event handler isn't needed
					editor.off( '.keyTable' );
				} )
				.inline( editCell.index() );
		};

		// Editor 1.7 listens for `return` on keyup, so if return is the trigger
		// key, we need to wait for `keyup` otherwise Editor would just submit
		// the content triggered by this keypress.
		if ( key === 13 ) {
			hardEdit = true;

			$(document).one( 'keyup', function () { // immediately removed
				editInline();
			} );
		}
		else {
			editInline();
		}
	},


	/**
	 * Emit an event on the DataTable for listeners
	 *
	 * @param  {string} name Event name
	 * @param  {array} args Event arguments
	 * @private
	 */
	_emitEvent: function ( name, args )
	{
		this.s.dt.iterator( 'table', function ( ctx, i ) {
			$(ctx.nTable).triggerHandler( name, args );
		} );
	},


	/**
	 * Focus on a particular cell, shifting the table's paging if required
	 *
	 * @param  {DataTables.Api|integer} row Can be given as an API instance that
	 *   contains the cell to focus or as an integer. As the latter it is the
	 *   visible row index (from the whole data set) - NOT the data index
	 * @param  {integer} [column] Not required if a cell is given as the first
	 *   parameter. Otherwise this is the column data index for the cell to
	 *   focus on
	 * @param {boolean} [shift=true] Should the viewport be moved to show cell
	 * @private
	 */
	_focus: function ( row, column, shift, originalEvent )
	{
		var that = this;
		var dt = this.s.dt;
		var pageInfo = dt.page.info();
		var lastFocus = this.s.lastFocus;

		if ( ! originalEvent) {
			originalEvent = null;
		}

		if ( ! this.s.enable ) {
			return;
		}

		if ( typeof row !== 'number' ) {
			// Its an API instance - check that there is actually a row
			if ( ! row.any() ) {
				return;
			}

			// Convert the cell to a row and column
			var index = row.index();
			column = index.column;
			row = dt
				.rows( { filter: 'applied', order: 'applied' } )
				.indexes()
				.indexOf( index.row );
			
			// Don't focus rows that were filtered out.
			if ( row < 0 ) {
				return;
			}

			// For server-side processing normalise the row by adding the start
			// point, since `rows().indexes()` includes only rows that are
			// available at the client-side
			if ( pageInfo.serverSide ) {
				row += pageInfo.start;
			}
		}

		// Is the row on the current page? If not, we need to redraw to show the
		// page
		if ( pageInfo.length !== -1 && (row < pageInfo.start || row >= pageInfo.start+pageInfo.length) ) {
			this.s.focusDraw = true;
			this.s.waitingForDraw = true;

			dt
				.one( 'draw', function () {
					that.s.focusDraw = false;
					that.s.waitingForDraw = false;
					that._focus( row, column, undefined, originalEvent );
				} )
				.page( Math.floor( row / pageInfo.length ) )
				.draw( false );

			return;
		}

		// In the available columns?
		if ( $.inArray( column, this._columns() ) === -1 ) {
			return;
		}

		// De-normalise the server-side processing row, so we select the row
		// in its displayed position
		if ( pageInfo.serverSide ) {
			row -= pageInfo.start;
		}

		// Get the cell from the current position - ignoring any cells which might
		// not have been rendered (therefore can't use `:eq()` selector).
		var cells = dt.cells( null, column, {search: 'applied', order: 'applied'} ).flatten();
		var cell = dt.cell( cells[ row ] );

		if ( lastFocus ) {
			// Don't trigger a refocus on the same cell
			if ( lastFocus.node === cell.node() ) {
				this._emitEvent( 'key-refocus', [ this.s.dt, cell, originalEvent || null ] );
				return;
			}

			// Otherwise blur the old focus
			this._blur();
		}

		var node = $( cell.node() );
		node.addClass( this.c.className );

		this._updateFixedColumns(column);

		// Shift viewpoint and page to make cell visible
		if ( shift === undefined || shift === true ) {
			this._scroll( $(window), $(document.body), node, 'offset' );

			var bodyParent = dt.table().body().parentNode;
			if ( bodyParent !== dt.table().header().parentNode ) {
				var parent = $(bodyParent.parentNode);

				this._scroll( parent, parent, node, 'position' );
			}
		}

		// Event and finish
		this.s.lastFocus = {
			cell: cell,
			node: cell.node(),
			relative: {
				row: dt.rows( { page: 'current' } ).indexes().indexOf( cell.index().row ),
				column: cell.index().column
			}
		};

		this._emitEvent( 'key-focus', [ this.s.dt, cell, originalEvent || null ] );
		dt.state.save();
	},


	/**
	 * Handle key press
	 *
	 * @param  {object} e Event
	 * @private
	 */
	_key: function ( e )
	{
		// If we are waiting for a draw to happen from another key event, then
		// do nothing for this new key press.
		if ( this.s.waitingForDraw ) {
			e.preventDefault();
			return;
		}

		var enable = this.s.enable;
		var navEnable = enable === true || enable === 'navigation-only';
		if ( ! enable ) {
			return;
		}

		if ( (e.keyCode === 0 || e.ctrlKey || e.metaKey || e.altKey) && !(e.ctrlKey && e.altKey) ) {
			return;
		}

		// If not focused, then there is no key action to take
		var lastFocus = this.s.lastFocus;
		if ( ! lastFocus ) {
			return;
		}

		var that = this;
		var dt = this.s.dt;
		var scrolling = this.s.dt.settings()[0].oScroll.sY ? true : false;

		// If we are not listening for this key, do nothing
		if ( this.c.keys && $.inArray( e.keyCode, this.c.keys ) === -1 ) {
			return;
		}

		switch( e.keyCode ) {
			case 9: // tab
				// `enable` can be tab-only
				this._shift( e, e.shiftKey ? 'left' : 'right', true );
				break;

			case 27: // esc
				if ( this.s.blurable && enable === true ) {
					this._blur();
				}
				break;

			case 33: // page up (previous page)
			case 34: // page down (next page)
				if ( navEnable && !scrolling ) {
					e.preventDefault();

					dt
						.page( e.keyCode === 33 ? 'previous' : 'next' )
						.draw( false );
				}
				break;

			case 35: // end (end of current page)
			case 36: // home (start of current page)
				if ( navEnable ) {
					e.preventDefault();
					var indexes = dt.cells( {page: 'current'} ).indexes();
					var colIndexes = this._columns();

					this._focus( dt.cell(
						indexes[ e.keyCode === 35 ? indexes.length-1 : colIndexes[0] ]
					), null, true, e );
				}
				break;

			case 37: // left arrow
				if ( navEnable ) {
					this._shift( e, 'left' );
				}
				break;

			case 38: // up arrow
				if ( navEnable ) {
					this._shift( e, 'up' );
				}
				break;

			case 39: // right arrow
				if ( navEnable ) {
					this._shift( e, 'right' );
				}
				break;

			case 40: // down arrow
				if ( navEnable ) {
					this._shift( e, 'down' );
				}
				break;

			default:
				// Everything else - pass through only when fully enabled
				if ( enable === true ) {
					this._emitEvent( 'key', [ dt, e.keyCode, this.s.lastFocus.cell, e ] );
				}
				break;
		}
	},


	/**
	 * Scroll a container to make a cell visible in it. This can be used for
	 * both DataTables scrolling and native window scrolling.
	 *
	 * @param  {jQuery} container Scrolling container
	 * @param  {jQuery} scroller  Item being scrolled
	 * @param  {jQuery} cell      Cell in the scroller
	 * @param  {string} posOff    `position` or `offset` - which to use for the
	 *   calculation. `offset` for the document, otherwise `position`
	 * @private
	 */
	_scroll: function ( container, scroller, cell, posOff )
	{
		var offset = cell[posOff]();
		var height = cell.outerHeight();
		var width = cell.outerWidth();

		var scrollTop = scroller.scrollTop();
		var scrollLeft = scroller.scrollLeft();
		var containerHeight = container.height();
		var containerWidth = container.width();

		// If Scroller is being used, the table can be `position: absolute` and that
		// needs to be taken account of in the offset. If no Scroller, this will be 0
		if ( posOff === 'position' ) {
			offset.top += parseInt( cell.closest('table').css('top'), 10 );
		}

		// Top correction
		if ( offset.top < scrollTop ) {
			scroller.scrollTop( offset.top );
		}

		// Left correction
		if ( offset.left < scrollLeft ) {
			scroller.scrollLeft( offset.left );
		}

		// Bottom correction
		if ( offset.top + height > scrollTop + containerHeight && height < containerHeight ) {
			scroller.scrollTop( offset.top + height - containerHeight );
		}

		// Right correction
		if ( offset.left + width > scrollLeft + containerWidth && width < containerWidth ) {
			scroller.scrollLeft( offset.left + width - containerWidth );
		}
	},


	/**
	 * Calculate a single offset movement in the table - up, down, left and
	 * right and then perform the focus if possible
	 *
	 * @param  {object}  e           Event object
	 * @param  {string}  direction   Movement direction
	 * @param  {boolean} keyBlurable `true` if the key press can result in the
	 *   table being blurred. This is so arrow keys won't blur the table, but
	 *   tab will.
	 * @private
	 */
	_shift: function ( e, direction, keyBlurable )
	{
		var that         = this;
		var dt           = this.s.dt;
		var pageInfo     = dt.page.info();
		var rows         = pageInfo.recordsDisplay;
		var currentCell  = this.s.lastFocus.cell;
		var columns      = this._columns();

		if ( ! currentCell ) {
			return;
		}

		var currRow = dt
			.rows( { filter: 'applied', order: 'applied' } )
			.indexes()
			.indexOf( currentCell.index().row );

		// When server-side processing, `rows().indexes()` only gives the rows
		// that are available at the client-side, so we need to normalise the
		// row's current position by the display start point
		if ( pageInfo.serverSide ) {
			currRow += pageInfo.start;
		}

		var currCol = dt
			.columns( columns )
			.indexes()
			.indexOf( currentCell.index().column );

		var
			row = currRow,
			column = columns[ currCol ]; // row is the display, column is an index

		if ( direction === 'right' ) {
			if ( currCol >= columns.length - 1 ) {
				row++;
				column = columns[0];
			}
			else {
				column = columns[ currCol+1 ];
			}
		}
		else if ( direction === 'left' ) {
			if ( currCol === 0 ) {
				row--;
				column = columns[ columns.length - 1 ];
			}
			else {
				column = columns[ currCol-1 ];
			}
		}
		else if ( direction === 'up' ) {
			row--;
		}
		else if ( direction === 'down' ) {
			row++;
		}

		if ( row >= 0 && row < rows && $.inArray( column, columns ) !== -1
		) {
			e.preventDefault();

			this._focus( row, column, true, e );
		}
		else if ( ! keyBlurable || ! this.c.blurable ) {
			// No new focus, but if the table isn't blurable, then don't loose
			// focus
			e.preventDefault();
		}
		else {
			this._blur();
		}
	},


	/**
	 * Create a hidden input element that can receive focus on behalf of the
	 * table
	 *
	 * @private
	 */
	_tabInput: function ()
	{
		var that = this;
		var dt = this.s.dt;
		var tabIndex = this.c.tabIndex !== null ?
			this.c.tabIndex :
			dt.settings()[0].iTabIndex;

		if ( tabIndex == -1 ) {
			return;
		}

		var div = $('<div><input type="text" tabindex="'+tabIndex+'"/></div>')
			.css( {
				position: 'absolute',
				height: 1,
				width: 0,
				overflow: 'hidden'
			} )
			.insertBefore( dt.table().node() );

		div.children().on( 'focus', function (e) {
			if ( dt.cell(':eq(0)', {page: 'current'}).any() ) {
				that._focus( dt.cell(':eq(0)', '0:visible', {page: 'current'}), null, true, e );
			}
		} );
	},

	/**
	 * Update fixed columns if they are enabled and if the cell we are
	 * focusing is inside a fixed column
	 * @param  {integer} column Index of the column being changed
	 * @private
	 */
	_updateFixedColumns: function( column )
	{
		var dt = this.s.dt;
		var settings = dt.settings()[0];

		if ( settings._oFixedColumns ) {
			var leftCols = settings._oFixedColumns.s.iLeftColumns;
			var rightCols = settings.aoColumns.length - settings._oFixedColumns.s.iRightColumns;

			if (column < leftCols || column >= rightCols) {
				dt.fixedColumns().update();
			}
		}
	}
} );


/**
 * KeyTable default settings for initialisation
 *
 * @namespace
 * @name KeyTable.defaults
 * @static
 */
KeyTable.defaults = {
	/**
	 * Can focus be removed from the table
	 * @type {Boolean}
	 */
	blurable: true,

	/**
	 * Class to give to the focused cell
	 * @type {String}
	 */
	className: 'focus',

	/**
	 * Enable or disable clipboard support
	 * @type {Boolean}
	 */
	clipboard: true,

	/**
	 * Orthogonal data that should be copied to clipboard
	 * @type {string}
	 */
	clipboardOrthogonal: 'display',

	/**
	 * Columns that can be focused. This is automatically merged with the
	 * visible columns as only visible columns can gain focus.
	 * @type {String}
	 */
	columns: '', // all

	/**
	 * Editor instance to automatically perform Excel like navigation
	 * @type {Editor}
	 */
	editor: null,

	/**
	 * Trigger editing immediately on focus
	 * @type {boolean}
	 */
	editOnFocus: false,

	/**
	 * Select a cell to automatically select on start up. `null` for no
	 * automatic selection
	 * @type {cell-selector}
	 */
	focus: null,

	/**
	 * Array of keys to listen for
	 * @type {null|array}
	 */
	keys: null,

	/**
	 * Tab index for where the table should sit in the document's tab flow
	 * @type {integer|null}
	 */
	tabIndex: null
};



KeyTable.version = "2.5.0";


$.fn.dataTable.KeyTable = KeyTable;
$.fn.DataTable.KeyTable = KeyTable;


DataTable.Api.register( 'cell.blur()', function () {
	return this.iterator( 'table', function (ctx) {
		if ( ctx.keytable ) {
			ctx.keytable.blur();
		}
	} );
} );

DataTable.Api.register( 'cell().focus()', function () {
	return this.iterator( 'cell', function (ctx, row, column) {
		if ( ctx.keytable ) {
			ctx.keytable.focus( row, column );
		}
	} );
} );

DataTable.Api.register( 'keys.disable()', function () {
	return this.iterator( 'table', function (ctx) {
		if ( ctx.keytable ) {
			ctx.keytable.enable( false );
		}
	} );
} );

DataTable.Api.register( 'keys.enable()', function ( opts ) {
	return this.iterator( 'table', function (ctx) {
		if ( ctx.keytable ) {
			ctx.keytable.enable( opts === undefined ? true : opts );
		}
	} );
} );

// Cell selector
DataTable.ext.selector.cell.push( function ( settings, opts, cells ) {
	var focused = opts.focused;
	var kt = settings.keytable;
	var out = [];

	if ( ! kt || focused === undefined ) {
		return cells;
	}

	for ( var i=0, ien=cells.length ; i<ien ; i++ ) {
		if ( (focused === true &&  kt.focused( cells[i] ) ) ||
			 (focused === false && ! kt.focused( cells[i] ) )
		) {
			out.push( cells[i] );
		}
	}

	return out;
} );


// Attach a listener to the document which listens for DataTables initialisation
// events so we can automatically initialise
$(document).on( 'preInit.dt.dtk', function (e, settings, json) {
	if ( e.namespace !== 'dt' ) {
		return;
	}

	var init = settings.oInit.keys;
	var defaults = DataTable.defaults.keys;

	if ( init || defaults ) {
		var opts = $.extend( {}, defaults, init );

		if ( init !== false ) {
			new KeyTable( settings, opts  );
		}
	}
} );


return KeyTable;
}));


/*! Responsive 2.2.2
 * 2014-2018 SpryMedia Ltd - datatables.net/license
 */

/**
 * @summary     Responsive
 * @description Responsive tables plug-in for DataTables
 * @version     2.2.2
 * @file        dataTables.responsive.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     www.sprymedia.co.uk/contact
 * @copyright   Copyright 2014-2018 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license/mit
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */
(function( factory ){
	if ( typeof define === 'function' && define.amd ) {
		// AMD
		define( ['jquery', 'datatables.net'], function ( $ ) {
			return factory( $, window, document );
		} );
	}
	else if ( typeof exports === 'object' ) {
		// CommonJS
		module.exports = function (root, $) {
			if ( ! root ) {
				root = window;
			}

			if ( ! $ || ! $.fn.dataTable ) {
				$ = require('datatables.net')(root, $).$;
			}

			return factory( $, root, root.document );
		};
	}
	else {
		// Browser
		factory( jQuery, window, document );
	}
}(function( $, window, document, undefined ) {
'use strict';
var DataTable = $.fn.dataTable;


/**
 * Responsive is a plug-in for the DataTables library that makes use of
 * DataTables' ability to change the visibility of columns, changing the
 * visibility of columns so the displayed columns fit into the table container.
 * The end result is that complex tables will be dynamically adjusted to fit
 * into the viewport, be it on a desktop, tablet or mobile browser.
 *
 * Responsive for DataTables has two modes of operation, which can used
 * individually or combined:
 *
 * * Class name based control - columns assigned class names that match the
 *   breakpoint logic can be shown / hidden as required for each breakpoint.
 * * Automatic control - columns are automatically hidden when there is no
 *   room left to display them. Columns removed from the right.
 *
 * In additional to column visibility control, Responsive also has built into
 * options to use DataTables' child row display to show / hide the information
 * from the table that has been hidden. There are also two modes of operation
 * for this child row display:
 *
 * * Inline - when the control element that the user can use to show / hide
 *   child rows is displayed inside the first column of the table.
 * * Column - where a whole column is dedicated to be the show / hide control.
 *
 * Initialisation of Responsive is performed by:
 *
 * * Adding the class `responsive` or `dt-responsive` to the table. In this case
 *   Responsive will automatically be initialised with the default configuration
 *   options when the DataTable is created.
 * * Using the `responsive` option in the DataTables configuration options. This
 *   can also be used to specify the configuration options, or simply set to
 *   `true` to use the defaults.
 *
 *  @class
 *  @param {object} settings DataTables settings object for the host table
 *  @param {object} [opts] Configuration options
 *  @requires jQuery 1.7+
 *  @requires DataTables 1.10.3+
 *
 *  @example
 *      $('#example').DataTable( {
 *        responsive: true
 *      } );
 *    } );
 */
var Responsive = function ( settings, opts ) {
	// Sanity check that we are using DataTables 1.10 or newer
	if ( ! DataTable.versionCheck || ! DataTable.versionCheck( '1.10.10' ) ) {
		throw 'DataTables Responsive requires DataTables 1.10.10 or newer';
	}

	this.s = {
		dt: new DataTable.Api( settings ),
		columns: [],
		current: []
	};

	// Check if responsive has already been initialised on this table
	if ( this.s.dt.settings()[0].responsive ) {
		return;
	}

	// details is an object, but for simplicity the user can give it as a string
	// or a boolean
	if ( opts && typeof opts.details === 'string' ) {
		opts.details = { type: opts.details };
	}
	else if ( opts && opts.details === false ) {
		opts.details = { type: false };
	}
	else if ( opts && opts.details === true ) {
		opts.details = { type: 'inline' };
	}

	this.c = $.extend( true, {}, Responsive.defaults, DataTable.defaults.responsive, opts );
	settings.responsive = this;
	this._constructor();
};

$.extend( Responsive.prototype, {
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Constructor
	 */

	/**
	 * Initialise the Responsive instance
	 *
	 * @private
	 */
	_constructor: function ()
	{
		var that = this;
		var dt = this.s.dt;
		var dtPrivateSettings = dt.settings()[0];
		var oldWindowWidth = $(window).width();

		dt.settings()[0]._responsive = this;

		// Use DataTables' throttle function to avoid processor thrashing on
		// resize
		$(window).on( 'resize.dtr orientationchange.dtr', DataTable.util.throttle( function () {
			// iOS has a bug whereby resize can fire when only scrolling
			// See: http://stackoverflow.com/questions/8898412
			var width = $(window).width();

			if ( width !== oldWindowWidth ) {
				that._resize();
				oldWindowWidth = width;
			}
		} ) );

		// DataTables doesn't currently trigger an event when a row is added, so
		// we need to hook into its private API to enforce the hidden rows when
		// new data is added
		dtPrivateSettings.oApi._fnCallbackReg( dtPrivateSettings, 'aoRowCreatedCallback', function (tr, data, idx) {
			if ( $.inArray( false, that.s.current ) !== -1 ) {
				$('>td, >th', tr).each( function ( i ) {
					var idx = dt.column.index( 'toData', i );

					if ( that.s.current[idx] === false ) {
						$(this).css('display', 'none');
					}
				} );
			}
		} );

		// Destroy event handler
		dt.on( 'destroy.dtr', function () {
			dt.off( '.dtr' );
			$( dt.table().body() ).off( '.dtr' );
			$(window).off( 'resize.dtr orientationchange.dtr' );

			// Restore the columns that we've hidden
			$.each( that.s.current, function ( i, val ) {
				if ( val === false ) {
					that._setColumnVis( i, true );
				}
			} );
		} );

		// Reorder the breakpoints array here in case they have been added out
		// of order
		this.c.breakpoints.sort( function (a, b) {
			return a.width < b.width ? 1 :
				a.width > b.width ? -1 : 0;
		} );

		this._classLogic();
		this._resizeAuto();

		// Details handler
		var details = this.c.details;

		if ( details.type !== false ) {
			that._detailsInit();

			// DataTables will trigger this event on every column it shows and
			// hides individually
			dt.on( 'column-visibility.dtr', function () {
				// Use a small debounce to allow multiple columns to be set together
				if ( that._timer ) {
					clearTimeout( that._timer );
				}

				that._timer = setTimeout( function () {
					that._timer = null;

					that._classLogic();
					that._resizeAuto();
					that._resize();

					that._redrawChildren();
				}, 100 );
			} );

			// Redraw the details box on each draw which will happen if the data
			// has changed. This is used until DataTables implements a native
			// `updated` event for rows
			dt.on( 'draw.dtr', function () {
				that._redrawChildren();
			} );

			$(dt.table().node()).addClass( 'dtr-'+details.type );
		}

		dt.on( 'column-reorder.dtr', function (e, settings, details) {
			that._classLogic();
			that._resizeAuto();
			that._resize();
		} );

		// Change in column sizes means we need to calc
		dt.on( 'column-sizing.dtr', function () {
			that._resizeAuto();
			that._resize();
		});

		// On Ajax reload we want to reopen any child rows which are displayed
		// by responsive
		dt.on( 'preXhr.dtr', function () {
			var rowIds = [];
			dt.rows().every( function () {
				if ( this.child.isShown() ) {
					rowIds.push( this.id(true) );
				}
			} );

			dt.one( 'draw.dtr', function () {
				that._resizeAuto();
				that._resize();

				dt.rows( rowIds ).every( function () {
					that._detailsDisplay( this, false );
				} );
			} );
		});

		dt.on( 'init.dtr', function (e, settings, details) {
			that._resizeAuto();
			that._resize();

			// If columns were hidden, then DataTables needs to adjust the
			// column sizing
			if ( $.inArray( false, that.s.current ) ) {
				dt.columns.adjust();
			}
		} );

		// First pass - draw the table for the current viewport size
		this._resize();
	},


	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Private methods
	 */

	/**
	 * Calculate the visibility for the columns in a table for a given
	 * breakpoint. The result is pre-determined based on the class logic if
	 * class names are used to control all columns, but the width of the table
	 * is also used if there are columns which are to be automatically shown
	 * and hidden.
	 *
	 * @param  {string} breakpoint Breakpoint name to use for the calculation
	 * @return {array} Array of boolean values initiating the visibility of each
	 *   column.
	 *  @private
	 */
	_columnsVisiblity: function ( breakpoint )
	{
		var dt = this.s.dt;
		var columns = this.s.columns;
		var i, ien;

		// Create an array that defines the column ordering based first on the
		// column's priority, and secondly the column index. This allows the
		// columns to be removed from the right if the priority matches
		var order = columns
			.map( function ( col, idx ) {
				return {
					columnIdx: idx,
					priority: col.priority
				};
			} )
			.sort( function ( a, b ) {
				if ( a.priority !== b.priority ) {
					return a.priority - b.priority;
				}
				return a.columnIdx - b.columnIdx;
			} );

		// Class logic - determine which columns are in this breakpoint based
		// on the classes. If no class control (i.e. `auto`) then `-` is used
		// to indicate this to the rest of the function
		var display = $.map( columns, function ( col, i ) {
			if ( dt.column(i).visible() === false ) {
				return 'not-visible';
			}
			return col.auto && col.minWidth === null ?
				false :
				col.auto === true ?
					'-' :
					$.inArray( breakpoint, col.includeIn ) !== -1;
		} );

		// Auto column control - first pass: how much width is taken by the
		// ones that must be included from the non-auto columns
		var requiredWidth = 0;
		for ( i=0, ien=display.length ; i<ien ; i++ ) {
			if ( display[i] === true ) {
				requiredWidth += columns[i].minWidth;
			}
		}

		// Second pass, use up any remaining width for other columns. For
		// scrolling tables we need to subtract the width of the scrollbar. It
		// may not be requires which makes this sub-optimal, but it would
		// require another full redraw to make complete use of those extra few
		// pixels
		var scrolling = dt.settings()[0].oScroll;
		var bar = scrolling.sY || scrolling.sX ? scrolling.iBarWidth : 0;
		var widthAvailable = dt.table().container().offsetWidth - bar;
		var usedWidth = widthAvailable - requiredWidth;

		// Control column needs to always be included. This makes it sub-
		// optimal in terms of using the available with, but to stop layout
		// thrashing or overflow. Also we need to account for the control column
		// width first so we know how much width is available for the other
		// columns, since the control column might not be the first one shown
		for ( i=0, ien=display.length ; i<ien ; i++ ) {
			if ( columns[i].control ) {
				usedWidth -= columns[i].minWidth;
			}
		}

		// Allow columns to be shown (counting by priority and then right to
		// left) until we run out of room
		var empty = false;
		for ( i=0, ien=order.length ; i<ien ; i++ ) {
			var colIdx = order[i].columnIdx;

			if ( display[colIdx] === '-' && ! columns[colIdx].control && columns[colIdx].minWidth ) {
				// Once we've found a column that won't fit we don't let any
				// others display either, or columns might disappear in the
				// middle of the table
				if ( empty || usedWidth - columns[colIdx].minWidth < 0 ) {
					empty = true;
					display[colIdx] = false;
				}
				else {
					display[colIdx] = true;
				}

				usedWidth -= columns[colIdx].minWidth;
			}
		}

		// Determine if the 'control' column should be shown (if there is one).
		// This is the case when there is a hidden column (that is not the
		// control column). The two loops look inefficient here, but they are
		// trivial and will fly through. We need to know the outcome from the
		// first , before the action in the second can be taken
		var showControl = false;

		for ( i=0, ien=columns.length ; i<ien ; i++ ) {
			if ( ! columns[i].control && ! columns[i].never && display[i] === false ) {
				showControl = true;
				break;
			}
		}

		for ( i=0, ien=columns.length ; i<ien ; i++ ) {
			if ( columns[i].control ) {
				display[i] = showControl;
			}

			// Replace not visible string with false from the control column detection above
			if ( display[i] === 'not-visible' ) {
				display[i] = false;
			}
		}

		// Finally we need to make sure that there is at least one column that
		// is visible
		if ( $.inArray( true, display ) === -1 ) {
			display[0] = true;
		}

		return display;
	},


	/**
	 * Create the internal `columns` array with information about the columns
	 * for the table. This includes determining which breakpoints the column
	 * will appear in, based upon class names in the column, which makes up the
	 * vast majority of this method.
	 *
	 * @private
	 */
	_classLogic: function ()
	{
		var that = this;
		var calc = {};
		var breakpoints = this.c.breakpoints;
		var dt = this.s.dt;
		var columns = dt.columns().eq(0).map( function (i) {
			var column = this.column(i);
			var className = column.header().className;
			var priority = dt.settings()[0].aoColumns[i].responsivePriority;

			if ( priority === undefined ) {
				var dataPriority = $(column.header()).data('priority');

				priority = dataPriority !== undefined ?
					dataPriority * 1 :
					10000;
			}

			return {
				className: className,
				includeIn: [],
				auto:      false,
				control:   false,
				never:     className.match(/\bnever\b/) ? true : false,
				priority:  priority
			};
		} );

		// Simply add a breakpoint to `includeIn` array, ensuring that there are
		// no duplicates
		var add = function ( colIdx, name ) {
			var includeIn = columns[ colIdx ].includeIn;

			if ( $.inArray( name, includeIn ) === -1 ) {
				includeIn.push( name );
			}
		};

		var column = function ( colIdx, name, operator, matched ) {
			var size, i, ien;

			if ( ! operator ) {
				columns[ colIdx ].includeIn.push( name );
			}
			else if ( operator === 'max-' ) {
				// Add this breakpoint and all smaller
				size = that._find( name ).width;

				for ( i=0, ien=breakpoints.length ; i<ien ; i++ ) {
					if ( breakpoints[i].width <= size ) {
						add( colIdx, breakpoints[i].name );
					}
				}
			}
			else if ( operator === 'min-' ) {
				// Add this breakpoint and all larger
				size = that._find( name ).width;

				for ( i=0, ien=breakpoints.length ; i<ien ; i++ ) {
					if ( breakpoints[i].width >= size ) {
						add( colIdx, breakpoints[i].name );
					}
				}
			}
			else if ( operator === 'not-' ) {
				// Add all but this breakpoint
				for ( i=0, ien=breakpoints.length ; i<ien ; i++ ) {
					if ( breakpoints[i].name.indexOf( matched ) === -1 ) {
						add( colIdx, breakpoints[i].name );
					}
				}
			}
		};

		// Loop over each column and determine if it has a responsive control
		// class
		columns.each( function ( col, i ) {
			var classNames = col.className.split(' ');
			var hasClass = false;

			// Split the class name up so multiple rules can be applied if needed
			for ( var k=0, ken=classNames.length ; k<ken ; k++ ) {
				var className = $.trim( classNames[k] );

				if ( className === 'all' ) {
					// Include in all
					hasClass = true;
					col.includeIn = $.map( breakpoints, function (a) {
						return a.name;
					} );
					return;
				}
				else if ( className === 'none' || col.never ) {
					// Include in none (default) and no auto
					hasClass = true;
					return;
				}
				else if ( className === 'control' ) {
					// Special column that is only visible, when one of the other
					// columns is hidden. This is used for the details control
					hasClass = true;
					col.control = true;
					return;
				}

				$.each( breakpoints, function ( j, breakpoint ) {
					// Does this column have a class that matches this breakpoint?
					var brokenPoint = breakpoint.name.split('-');
					var re = new RegExp( '(min\\-|max\\-|not\\-)?('+brokenPoint[0]+')(\\-[_a-zA-Z0-9])?' );
					var match = className.match( re );

					if ( match ) {
						hasClass = true;

						if ( match[2] === brokenPoint[0] && match[3] === '-'+brokenPoint[1] ) {
							// Class name matches breakpoint name fully
							column( i, breakpoint.name, match[1], match[2]+match[3] );
						}
						else if ( match[2] === brokenPoint[0] && ! match[3] ) {
							// Class name matched primary breakpoint name with no qualifier
							column( i, breakpoint.name, match[1], match[2] );
						}
					}
				} );
			}

			// If there was no control class, then automatic sizing is used
			if ( ! hasClass ) {
				col.auto = true;
			}
		} );

		this.s.columns = columns;
	},


	/**
	 * Show the details for the child row
	 *
	 * @param  {DataTables.Api} row    API instance for the row
	 * @param  {boolean}        update Update flag
	 * @private
	 */
	_detailsDisplay: function ( row, update )
	{
		var that = this;
		var dt = this.s.dt;
		var details = this.c.details;

		if ( details && details.type !== false ) {
			var res = details.display( row, update, function () {
				return details.renderer(
					dt, row[0], that._detailsObj(row[0])
				);
			} );

			if ( res === true || res === false ) {
				$(dt.table().node()).triggerHandler( 'responsive-display.dt', [dt, row, res, update] );
			}
		}
	},


	/**
	 * Initialisation for the details handler
	 *
	 * @private
	 */
	_detailsInit: function ()
	{
		var that    = this;
		var dt      = this.s.dt;
		var details = this.c.details;

		// The inline type always uses the first child as the target
		if ( details.type === 'inline' ) {
			details.target = 'td:first-child, th:first-child';
		}

		// Keyboard accessibility
		dt.on( 'draw.dtr', function () {
			that._tabIndexes();
		} );
		that._tabIndexes(); // Initial draw has already happened

		$( dt.table().body() ).on( 'keyup.dtr', 'td, th', function (e) {
			if ( e.keyCode === 13 && $(this).data('dtr-keyboard') ) {
				$(this).click();
			}
		} );

		// type.target can be a string jQuery selector or a column index
		var target   = details.target;
		var selector = typeof target === 'string' ? target : 'td, th';

		// Click handler to show / hide the details rows when they are available
		$( dt.table().body() )
			.on( 'click.dtr mousedown.dtr mouseup.dtr', selector, function (e) {
				// If the table is not collapsed (i.e. there is no hidden columns)
				// then take no action
				if ( ! $(dt.table().node()).hasClass('collapsed' ) ) {
					return;
				}

				// Check that the row is actually a DataTable's controlled node
				if ( $.inArray( $(this).closest('tr').get(0), dt.rows().nodes().toArray() ) === -1 ) {
					return;
				}

				// For column index, we determine if we should act or not in the
				// handler - otherwise it is already okay
				if ( typeof target === 'number' ) {
					var targetIdx = target < 0 ?
						dt.columns().eq(0).length + target :
						target;

					if ( dt.cell( this ).index().column !== targetIdx ) {
						return;
					}
				}

				// $().closest() includes itself in its check
				var row = dt.row( $(this).closest('tr') );

				// Check event type to do an action
				if ( e.type === 'click' ) {
					// The renderer is given as a function so the caller can execute it
					// only when they need (i.e. if hiding there is no point is running
					// the renderer)
					that._detailsDisplay( row, false );
				}
				else if ( e.type === 'mousedown' ) {
					// For mouse users, prevent the focus ring from showing
					$(this).css('outline', 'none');
				}
				else if ( e.type === 'mouseup' ) {
					// And then re-allow at the end of the click
					$(this).blur().css('outline', '');
				}
			} );
	},


	/**
	 * Get the details to pass to a renderer for a row
	 * @param  {int} rowIdx Row index
	 * @private
	 */
	_detailsObj: function ( rowIdx )
	{
		var that = this;
		var dt = this.s.dt;

		return $.map( this.s.columns, function( col, i ) {
			// Never and control columns should not be passed to the renderer
			if ( col.never || col.control ) {
				return;
			}

			return {
				title:       dt.settings()[0].aoColumns[ i ].sTitle,
				data:        dt.cell( rowIdx, i ).render( that.c.orthogonal ),
				hidden:      dt.column( i ).visible() && !that.s.current[ i ],
				columnIndex: i,
				rowIndex:    rowIdx
			};
		} );
	},


	/**
	 * Find a breakpoint object from a name
	 *
	 * @param  {string} name Breakpoint name to find
	 * @return {object}      Breakpoint description object
	 * @private
	 */
	_find: function ( name )
	{
		var breakpoints = this.c.breakpoints;

		for ( var i=0, ien=breakpoints.length ; i<ien ; i++ ) {
			if ( breakpoints[i].name === name ) {
				return breakpoints[i];
			}
		}
	},


	/**
	 * Re-create the contents of the child rows as the display has changed in
	 * some way.
	 *
	 * @private
	 */
	_redrawChildren: function ()
	{
		var that = this;
		var dt = this.s.dt;

		dt.rows( {page: 'current'} ).iterator( 'row', function ( settings, idx ) {
			var row = dt.row( idx );

			that._detailsDisplay( dt.row( idx ), true );
		} );
	},


	/**
	 * Alter the table display for a resized viewport. This involves first
	 * determining what breakpoint the window currently is in, getting the
	 * column visibilities to apply and then setting them.
	 *
	 * @private
	 */
	_resize: function ()
	{
		var that = this;
		var dt = this.s.dt;
		var width = $(window).width();
		var breakpoints = this.c.breakpoints;
		var breakpoint = breakpoints[0].name;
		var columns = this.s.columns;
		var i, ien;
		var oldVis = this.s.current.slice();

		// Determine what breakpoint we are currently at
		for ( i=breakpoints.length-1 ; i>=0 ; i-- ) {
			if ( width <= breakpoints[i].width ) {
				breakpoint = breakpoints[i].name;
				break;
			}
		}
		
		// Show the columns for that break point
		var columnsVis = this._columnsVisiblity( breakpoint );
		this.s.current = columnsVis;

		// Set the class before the column visibility is changed so event
		// listeners know what the state is. Need to determine if there are
		// any columns that are not visible but can be shown
		var collapsedClass = false;
		for ( i=0, ien=columns.length ; i<ien ; i++ ) {
			if ( columnsVis[i] === false && ! columns[i].never && ! columns[i].control && ! dt.column(i).visible() === false ) {
				collapsedClass = true;
				break;
			}
		}

		$( dt.table().node() ).toggleClass( 'collapsed', collapsedClass );

		var changed = false;
		var visible = 0;

		dt.columns().eq(0).each( function ( colIdx, i ) {
			if ( columnsVis[i] === true ) {
				visible++;
			}

			if ( columnsVis[i] !== oldVis[i] ) {
				changed = true;
				that._setColumnVis( colIdx, columnsVis[i] );
			}
		} );

		if ( changed ) {
			this._redrawChildren();

			// Inform listeners of the change
			$(dt.table().node()).trigger( 'responsive-resize.dt', [dt, this.s.current] );

			// If no records, update the "No records" display element
			if ( dt.page.info().recordsDisplay === 0 ) {
				$('td', dt.table().body()).eq(0).attr('colspan', visible);
			}
		}
	},


	/**
	 * Determine the width of each column in the table so the auto column hiding
	 * has that information to work with. This method is never going to be 100%
	 * perfect since column widths can change slightly per page, but without
	 * seriously compromising performance this is quite effective.
	 *
	 * @private
	 */
	_resizeAuto: function ()
	{
		var dt = this.s.dt;
		var columns = this.s.columns;

		// Are we allowed to do auto sizing?
		if ( ! this.c.auto ) {
			return;
		}

		// Are there any columns that actually need auto-sizing, or do they all
		// have classes defined
		if ( $.inArray( true, $.map( columns, function (c) { return c.auto; } ) ) === -1 ) {
			return;
		}

		// Need to restore all children. They will be reinstated by a re-render
		if ( ! $.isEmptyObject( _childNodeStore ) ) {
			$.each( _childNodeStore, function ( key ) {
				var idx = key.split('-');

				_childNodesRestore( dt, idx[0]*1, idx[1]*1 );
			} );
		}

		// Clone the table with the current data in it
		var tableWidth   = dt.table().node().offsetWidth;
		var columnWidths = dt.columns;
		var clonedTable  = dt.table().node().cloneNode( false );
		var clonedHeader = $( dt.table().header().cloneNode( false ) ).appendTo( clonedTable );
		var clonedBody   = $( dt.table().body() ).clone( false, false ).empty().appendTo( clonedTable ); // use jQuery because of IE8

		// Header
		var headerCells = dt.columns()
			.header()
			.filter( function (idx) {
				return dt.column(idx).visible();
			} )
			.to$()
			.clone( false )
			.css( 'display', 'table-cell' )
			.css( 'min-width', 0 );

		// Body rows - we don't need to take account of DataTables' column
		// visibility since we implement our own here (hence the `display` set)
		$(clonedBody)
			.append( $(dt.rows( { page: 'current' } ).nodes()).clone( false ) )
			.find( 'th, td' ).css( 'display', '' );

		// Footer
		var footer = dt.table().footer();
		if ( footer ) {
			var clonedFooter = $( footer.cloneNode( false ) ).appendTo( clonedTable );
			var footerCells = dt.columns()
				.footer()
				.filter( function (idx) {
					return dt.column(idx).visible();
				} )
				.to$()
				.clone( false )
				.css( 'display', 'table-cell' );

			$('<tr/>')
				.append( footerCells )
				.appendTo( clonedFooter );
		}

		$('<tr/>')
			.append( headerCells )
			.appendTo( clonedHeader );

		// In the inline case extra padding is applied to the first column to
		// give space for the show / hide icon. We need to use this in the
		// calculation
		if ( this.c.details.type === 'inline' ) {
			$(clonedTable).addClass( 'dtr-inline collapsed' );
		}
		
		// It is unsafe to insert elements with the same name into the DOM
		// multiple times. For example, cloning and inserting a checked radio
		// clears the chcecked state of the original radio.
		$( clonedTable ).find( '[name]' ).removeAttr( 'name' );

		// A position absolute table would take the table out of the flow of
		// our container element, bypassing the height and width (Scroller)
		$( clonedTable ).css( 'position', 'relative' )
		
		var inserted = $('<div/>')
			.css( {
				width: 1,
				height: 1,
				overflow: 'hidden',
				clear: 'both'
			} )
			.append( clonedTable );

		inserted.insertBefore( dt.table().node() );

		// The cloned header now contains the smallest that each column can be
		headerCells.each( function (i) {
			var idx = dt.column.index( 'fromVisible', i );
			columns[ idx ].minWidth =  this.offsetWidth || 0;
		} );

		inserted.remove();
	},

	/**
	 * Set a column's visibility.
	 *
	 * We don't use DataTables' column visibility controls in order to ensure
	 * that column visibility can Responsive can no-exist. Since only IE8+ is
	 * supported (and all evergreen browsers of course) the control of the
	 * display attribute works well.
	 *
	 * @param {integer} col      Column index
	 * @param {boolean} showHide Show or hide (true or false)
	 * @private
	 */
	_setColumnVis: function ( col, showHide )
	{
		var dt = this.s.dt;
		var display = showHide ? '' : 'none'; // empty string will remove the attr

		$( dt.column( col ).header() ).css( 'display', display );
		$( dt.column( col ).footer() ).css( 'display', display );
		dt.column( col ).nodes().to$().css( 'display', display );

		// If the are child nodes stored, we might need to reinsert them
		if ( ! $.isEmptyObject( _childNodeStore ) ) {
			dt.cells( null, col ).indexes().each( function (idx) {
				_childNodesRestore( dt, idx.row, idx.column );
			} );
		}
	},


	/**
	 * Update the cell tab indexes for keyboard accessibility. This is called on
	 * every table draw - that is potentially inefficient, but also the least
	 * complex option given that column visibility can change on the fly. Its a
	 * shame user-focus was removed from CSS 3 UI, as it would have solved this
	 * issue with a single CSS statement.
	 *
	 * @private
	 */
	_tabIndexes: function ()
	{
		var dt = this.s.dt;
		var cells = dt.cells( { page: 'current' } ).nodes().to$();
		var ctx = dt.settings()[0];
		var target = this.c.details.target;

		cells.filter( '[data-dtr-keyboard]' ).removeData( '[data-dtr-keyboard]' );

		if ( typeof target === 'number' ) {
			dt.cells( null, target, { page: 'current' } ).nodes().to$()
				.attr( 'tabIndex', ctx.iTabIndex )
				.data( 'dtr-keyboard', 1 );
		}
		else {
			// This is a bit of a hack - we need to limit the selected nodes to just
			// those of this table
			if ( target === 'td:first-child, th:first-child' ) {
				target = '>td:first-child, >th:first-child';
			}

			$( target, dt.rows( { page: 'current' } ).nodes() )
				.attr( 'tabIndex', ctx.iTabIndex )
				.data( 'dtr-keyboard', 1 );
		}
	}
} );


/**
 * List of default breakpoints. Each item in the array is an object with two
 * properties:
 *
 * * `name` - the breakpoint name.
 * * `width` - the breakpoint width
 *
 * @name Responsive.breakpoints
 * @static
 */
Responsive.breakpoints = [
	{ name: 'desktop',  width: Infinity },
	{ name: 'tablet-l', width: 1024 },
	{ name: 'tablet-p', width: 768 },
	{ name: 'mobile-l', width: 480 },
	{ name: 'mobile-p', width: 320 }
];


/**
 * Display methods - functions which define how the hidden data should be shown
 * in the table.
 *
 * @namespace
 * @name Responsive.defaults
 * @static
 */
Responsive.display = {
	childRow: function ( row, update, render ) {
		if ( update ) {
			if ( $(row.node()).hasClass('parent') ) {
				row.child( render(), 'child' ).show();

				return true;
			}
		}
		else {
			if ( ! row.child.isShown()  ) {
				row.child( render(), 'child' ).show();
				$( row.node() ).addClass( 'parent' );

				return true;
			}
			else {
				row.child( false );
				$( row.node() ).removeClass( 'parent' );

				return false;
			}
		}
	},

	childRowImmediate: function ( row, update, render ) {
		if ( (! update && row.child.isShown()) || ! row.responsive.hasHidden() ) {
			// User interaction and the row is show, or nothing to show
			row.child( false );
			$( row.node() ).removeClass( 'parent' );

			return false;
		}
		else {
			// Display
			row.child( render(), 'child' ).show();
			$( row.node() ).addClass( 'parent' );

			return true;
		}
	},

	// This is a wrapper so the modal options for Bootstrap and jQuery UI can
	// have options passed into them. This specific one doesn't need to be a
	// function but it is for consistency in the `modal` name
	modal: function ( options ) {
		return function ( row, update, render ) {
			if ( ! update ) {
				// Show a modal
				var close = function () {
					modal.remove(); // will tidy events for us
					$(document).off( 'keypress.dtr' );
				};

				var modal = $('<div class="dtr-modal"/>')
					.append( $('<div class="dtr-modal-display"/>')
						.append( $('<div class="dtr-modal-content"/>')
							.append( render() )
						)
						.append( $('<div class="dtr-modal-close">&times;</div>' )
							.click( function () {
								close();
							} )
						)
					)
					.append( $('<div class="dtr-modal-background"/>')
						.click( function () {
							close();
						} )
					)
					.appendTo( 'body' );

				$(document).on( 'keyup.dtr', function (e) {
					if ( e.keyCode === 27 ) {
						e.stopPropagation();

						close();
					}
				} );
			}
			else {
				$('div.dtr-modal-content')
					.empty()
					.append( render() );
			}

			if ( options && options.header ) {
				$('div.dtr-modal-content').prepend(
					'<h2>'+options.header( row )+'</h2>'
				);
			}
		};
	}
};


var _childNodeStore = {};

function _childNodes( dt, row, col ) {
	var name = row+'-'+col;

	if ( _childNodeStore[ name ] ) {
		return _childNodeStore[ name ];
	}

	// https://jsperf.com/childnodes-array-slice-vs-loop
	var nodes = [];
	var children = dt.cell( row, col ).node().childNodes;
	for ( var i=0, ien=children.length ; i<ien ; i++ ) {
		nodes.push( children[i] );
	}

	_childNodeStore[ name ] = nodes;

	return nodes;
}

function _childNodesRestore( dt, row, col ) {
	var name = row+'-'+col;

	if ( ! _childNodeStore[ name ] ) {
		return;
	}

	var node = dt.cell( row, col ).node();
	var store = _childNodeStore[ name ];
	var parent = store[0].parentNode;
	var parentChildren = parent.childNodes;
	var a = [];

	for ( var i=0, ien=parentChildren.length ; i<ien ; i++ ) {
		a.push( parentChildren[i] );
	}

	for ( var j=0, jen=a.length ; j<jen ; j++ ) {
		node.appendChild( a[j] );
	}

	_childNodeStore[ name ] = undefined;
}


/**
 * Display methods - functions which define how the hidden data should be shown
 * in the table.
 *
 * @namespace
 * @name Responsive.defaults
 * @static
 */
Responsive.renderer = {
	listHiddenNodes: function () {
		return function ( api, rowIdx, columns ) {
			var ul = $('<ul data-dtr-index="'+rowIdx+'" class="dtr-details"/>');
			var found = false;

			var data = $.each( columns, function ( i, col ) {
				if ( col.hidden ) {
					$(
						'<li data-dtr-index="'+col.columnIndex+'" data-dt-row="'+col.rowIndex+'" data-dt-column="'+col.columnIndex+'">'+
							'<span class="dtr-title">'+
								col.title+
							'</span> '+
						'</li>'
					)
						.append( $('<span class="dtr-data"/>').append( _childNodes( api, col.rowIndex, col.columnIndex ) ) )// api.cell( col.rowIndex, col.columnIndex ).node().childNodes ) )
						.appendTo( ul );

					found = true;
				}
			} );

			return found ?
				ul :
				false;
		};
	},

	listHidden: function () {
		return function ( api, rowIdx, columns ) {
			var data = $.map( columns, function ( col ) {
				return col.hidden ?
					'<li data-dtr-index="'+col.columnIndex+'" data-dt-row="'+col.rowIndex+'" data-dt-column="'+col.columnIndex+'">'+
						'<span class="dtr-title">'+
							col.title+
						'</span> '+
						'<span class="dtr-data">'+
							col.data+
						'</span>'+
					'</li>' :
					'';
			} ).join('');

			return data ?
				$('<ul data-dtr-index="'+rowIdx+'" class="dtr-details"/>').append( data ) :
				false;
		}
	},

	tableAll: function ( options ) {
		options = $.extend( {
			tableClass: ''
		}, options );

		return function ( api, rowIdx, columns ) {
			var data = $.map( columns, function ( col ) {
				return '<tr data-dt-row="'+col.rowIndex+'" data-dt-column="'+col.columnIndex+'">'+
						'<td>'+col.title+':'+'</td> '+
						'<td>'+col.data+'</td>'+
					'</tr>';
			} ).join('');

			return $('<table class="'+options.tableClass+' dtr-details" width="100%"/>').append( data );
		}
	}
};

/**
 * Responsive default settings for initialisation
 *
 * @namespace
 * @name Responsive.defaults
 * @static
 */
Responsive.defaults = {
	/**
	 * List of breakpoints for the instance. Note that this means that each
	 * instance can have its own breakpoints. Additionally, the breakpoints
	 * cannot be changed once an instance has been creased.
	 *
	 * @type {Array}
	 * @default Takes the value of `Responsive.breakpoints`
	 */
	breakpoints: Responsive.breakpoints,

	/**
	 * Enable / disable auto hiding calculations. It can help to increase
	 * performance slightly if you disable this option, but all columns would
	 * need to have breakpoint classes assigned to them
	 *
	 * @type {Boolean}
	 * @default  `true`
	 */
	auto: true,

	/**
	 * Details control. If given as a string value, the `type` property of the
	 * default object is set to that value, and the defaults used for the rest
	 * of the object - this is for ease of implementation.
	 *
	 * The object consists of the following properties:
	 *
	 * * `display` - A function that is used to show and hide the hidden details
	 * * `renderer` - function that is called for display of the child row data.
	 *   The default function will show the data from the hidden columns
	 * * `target` - Used as the selector for what objects to attach the child
	 *   open / close to
	 * * `type` - `false` to disable the details display, `inline` or `column`
	 *   for the two control types
	 *
	 * @type {Object|string}
	 */
	details: {
		display: Responsive.display.childRow,

		renderer: Responsive.renderer.listHidden(),

		target: 0,

		type: 'inline'
	},

	/**
	 * Orthogonal data request option. This is used to define the data type
	 * requested when Responsive gets the data to show in the child row.
	 *
	 * @type {String}
	 */
	orthogonal: 'display'
};


/*
 * API
 */
var Api = $.fn.dataTable.Api;

// Doesn't do anything - work around for a bug in DT... Not documented
Api.register( 'responsive()', function () {
	return this;
} );

Api.register( 'responsive.index()', function ( li ) {
	li = $(li);

	return {
		column: li.data('dtr-index'),
		row:    li.parent().data('dtr-index')
	};
} );

Api.register( 'responsive.rebuild()', function () {
	return this.iterator( 'table', function ( ctx ) {
		if ( ctx._responsive ) {
			ctx._responsive._classLogic();
		}
	} );
} );

Api.register( 'responsive.recalc()', function () {
	return this.iterator( 'table', function ( ctx ) {
		if ( ctx._responsive ) {
			ctx._responsive._resizeAuto();
			ctx._responsive._resize();
		}
	} );
} );

Api.register( 'responsive.hasHidden()', function () {
	var ctx = this.context[0];

	return ctx._responsive ?
		$.inArray( false, ctx._responsive.s.current ) !== -1 :
		false;
} );

Api.registerPlural( 'columns().responsiveHidden()', 'column().responsiveHidden()', function () {
	return this.iterator( 'column', function ( settings, column ) {
		return settings._responsive ?
			settings._responsive.s.current[ column ] :
			false;
	}, 1 );
} );


/**
 * Version information
 *
 * @name Responsive.version
 * @static
 */
Responsive.version = '2.2.2';


$.fn.dataTable.Responsive = Responsive;
$.fn.DataTable.Responsive = Responsive;

// Attach a listener to the document which listens for DataTables initialisation
// events so we can automatically initialise
$(document).on( 'preInit.dt.dtr', function (e, settings, json) {
	if ( e.namespace !== 'dt' ) {
		return;
	}

	if ( $(settings.nTable).hasClass( 'responsive' ) ||
		 $(settings.nTable).hasClass( 'dt-responsive' ) ||
		 settings.oInit.responsive ||
		 DataTable.defaults.responsive
	) {
		var init = settings.oInit.responsive;

		if ( init !== false ) {
			new Responsive( settings, $.isPlainObject( init ) ? init : {}  );
		}
	}
} );


return Responsive;
}));


/*! RowGroup 1.1.0
 * Â©2017-2018 SpryMedia Ltd - datatables.net/license
 */

/**
 * @summary     RowGroup
 * @description RowGrouping for DataTables
 * @version     1.1.0
 * @file        dataTables.rowGroup.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     datatables.net
 * @copyright   Copyright 2017-2018 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license/mit
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */

(function( factory ){
	if ( typeof define === 'function' && define.amd ) {
		// AMD
		define( ['jquery', 'datatables.net'], function ( $ ) {
			return factory( $, window, document );
		} );
	}
	else if ( typeof exports === 'object' ) {
		// CommonJS
		module.exports = function (root, $) {
			if ( ! root ) {
				root = window;
			}

			if ( ! $ || ! $.fn.dataTable ) {
				$ = require('datatables.net')(root, $).$;
			}

			return factory( $, root, root.document );
		};
	}
	else {
		// Browser
		factory( jQuery, window, document );
	}
}(function( $, window, document, undefined ) {
'use strict';
var DataTable = $.fn.dataTable;


var RowGroup = function ( dt, opts ) {
	// Sanity check that we are using DataTables 1.10 or newer
	if ( ! DataTable.versionCheck || ! DataTable.versionCheck( '1.10.8' ) ) {
		throw 'RowGroup requires DataTables 1.10.8 or newer';
	}

	// User and defaults configuration object
	this.c = $.extend( true, {},
		DataTable.defaults.rowGroup,
		RowGroup.defaults,
		opts
	);

	// Internal settings
	this.s = {
		dt: new DataTable.Api( dt )
	};

	// DOM items
	this.dom = {

	};

	// Check if row grouping has already been initialised on this table
	var settings = this.s.dt.settings()[0];
	var existing = settings.rowGroup;
	if ( existing ) {
		return existing;
	}

	settings.rowGroup = this;
	this._constructor();
};


$.extend( RowGroup.prototype, {
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * API methods for DataTables API interface
	 */

	/**
	 * Get/set the grouping data source - need to call draw after this is
	 * executed as a setter
	 * @returns string~RowGroup
	 */
	dataSrc: function ( val )
	{
		if ( val === undefined ) {
			return this.c.dataSrc;
		}

		var dt = this.s.dt;

		this.c.dataSrc = val;

		$(dt.table().node()).triggerHandler( 'rowgroup-datasrc.dt', [ dt, val ] );

		return this;
	},

	/**
	 * Disable - need to call draw after this is executed
	 * @returns RowGroup
	 */
	disable: function ()
	{
		this.c.enable = false;
		return this;
	},

	/**
	 * Enable - need to call draw after this is executed
	 * @returns RowGroup
	 */
	enable: function ( flag )
	{
		if ( flag === false ) {
			return this.disable();
		}

		this.c.enable = true;
		return this;
	},


	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Constructor
	 */
	_constructor: function ()
	{
		var that = this;
		var dt = this.s.dt;

		dt.on( 'draw.dtrg', function () {
			if ( that.c.enable ) {
				that._draw();
			}
		} );

		dt.on( 'column-visibility.dt.dtrg responsive-resize.dt.dtrg', function () {
			that._adjustColspan();
		} );

		dt.on( 'destroy', function () {
			dt.off( '.dtrg' );
		} );

		dt.on('responsive-resize.dt', function () {
			that._adjustColspan();
		})
	},


	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Private methods
	 */

	/**
	 * Adjust column span when column visibility changes
	 * @private
	 */
	_adjustColspan: function ()
	{
		$( 'tr.'+this.c.className, this.s.dt.table().body() ).find('td')
			.attr( 'colspan', this._colspan() );
	},

	/**
	 * Get the number of columns that a grouping row should span
	 * @private
	 */
	_colspan: function ()
	{
		return this.s.dt.columns().visible().reduce( function (a, b) {
			return a + b;
		}, 0 );
	},


	/**
	 * Update function that is called whenever we need to draw the grouping rows.
	 * This is basically a bootstrap for the self iterative _group and _groupDisplay
	 * methods
	 * @private
	 */
	_draw: function ()
	{
		var dt = this.s.dt;
		var groupedRows = this._group( 0, dt.rows( { page: 'current' } ).indexes() );

		this._groupDisplay( 0, groupedRows );
	},

	/**
	 * Get the grouping information from a data set (index) of rows
	 * @param {number} level Nesting level
	 * @param {DataTables.Api} rows API of the rows to consider for this group
	 * @returns {object[]} Nested grouping information - it is structured like this:
	 *	{
	 *		dataPoint: 'Edinburgh',
	 *		rows: [ 1,2,3,4,5,6,7 ],
	 *		children: [ {
	 *			dataPoint: 'developer'
	 *			rows: [ 1, 2, 3 ]
	 *		},
	 *		{
	 *			dataPoint: 'support',
	 *			rows: [ 4, 5, 6, 7 ]
	 *		} ]
	 *	}
	 * @private
	 */
	_group: function ( level, rows ) {
		var fns = $.isArray( this.c.dataSrc ) ? this.c.dataSrc : [ this.c.dataSrc ];
		var fn = DataTable.ext.oApi._fnGetObjectDataFn( fns[ level ] );
		var dt = this.s.dt;
		var group, last;
		var data = [];

		for ( var i=0, ien=rows.length ; i<ien ; i++ ) {
			var rowIndex = rows[i];
			var rowData = dt.row( rowIndex ).data();
			var group = fn( rowData );

			if ( group === null || group === undefined ) {
				group = that.c.emptyDataGroup;
			}
			
			if ( last === undefined || group !== last ) {
				data.push( {
					dataPoint: group,
					rows: []
				} );

				last = group;
			}

			data[ data.length-1 ].rows.push( rowIndex );
		}

		if ( fns[ level+1 ] !== undefined ) {
			for ( var i=0, ien=data.length ; i<ien ; i++ ) {
				data[i].children = this._group( level+1, data[i].rows );
			}
		}

		return data;
	},

	/**
	 * Row group display - insert the rows into the document
	 * @param {number} level Nesting level
	 * @param {object[]} groups Takes the nested array from `_group`
	 * @private
	 */
	_groupDisplay: function ( level, groups )
	{
		var dt = this.s.dt;
		var display;
	
		for ( var i=0, ien=groups.length ; i<ien ; i++ ) {
			var group = groups[i];
			var groupName = group.dataPoint;
			var row;
			var rows = group.rows;

			if ( this.c.startRender ) {
				display = this.c.startRender.call( this, dt.rows(rows), groupName, level );
				row = this._rowWrap( display, this.c.startClassName, level );

				if ( row ) {
					row.insertBefore( dt.row( rows[0] ).node() );
				}
			}

			if ( this.c.endRender ) {
				display = this.c.endRender.call( this, dt.rows(rows), groupName, level );
				row = this._rowWrap( display, this.c.endClassName, level );

				if ( row ) {
					row.insertAfter( dt.row( rows[ rows.length-1 ] ).node() );
				}
			}

			if ( group.children ) {
				this._groupDisplay( level+1, group.children );
			}
		}
	},

	/**
	 * Take a rendered value from an end user and make it suitable for display
	 * as a row, by wrapping it in a row, or detecting that it is a row.
	 * @param {node|jQuery|string} display Display value
	 * @param {string} className Class to add to the row
	 * @param {array} group
	 * @param {number} group level
	 * @private
	 */
	_rowWrap: function ( display, className, level )
	{
		var row;
		
		if ( display === null || display === '' ) {
			display = this.c.emptyDataGroup;
		}

		if ( display === undefined ) {
			return null;
		}
		
		if ( typeof display === 'object' && display.nodeName && display.nodeName.toLowerCase() === 'tr') {
			row = $(display);
		}
		else if (display instanceof $ && display.length && display[0].nodeName.toLowerCase() === 'tr') {
			row = display;
		}
		else {
			row = $('<tr/>')
				.append(
					$('<td/>')
						.attr( 'colspan', this._colspan() )
						.append( display  )
				);
		}

		return row
			.addClass( this.c.className )
			.addClass( className )
			.addClass( 'dtrg-level-'+level );
	}
} );


/**
 * RowGroup default settings for initialisation
 *
 * @namespace
 * @name RowGroup.defaults
 * @static
 */
RowGroup.defaults = {
	/**
	 * Class to apply to grouping rows - applied to both the start and
	 * end grouping rows.
	 * @type string
	 */
	className: 'dtrg-group',

	/**
	 * Data property from which to read the grouping information
	 * @type string|integer|array
	 */
	dataSrc: 0,

	/**
	 * Text to show if no data is found for a group
	 * @type string
	 */
	emptyDataGroup: 'No group',

	/**
	 * Initial enablement state
	 * @boolean
	 */
	enable: true,

	/**
	 * Class name to give to the end grouping row
	 * @type string
	 */
	endClassName: 'dtrg-end',

	/**
	 * End grouping label function
	 * @function
	 */
	endRender: null,

	/**
	 * Class name to give to the start grouping row
	 * @type string
	 */
	startClassName: 'dtrg-start',

	/**
	 * Start grouping label function
	 * @function
	 */
	startRender: function ( rows, group ) {
		return group;
	}
};


RowGroup.version = "1.1.0";


$.fn.dataTable.RowGroup = RowGroup;
$.fn.DataTable.RowGroup = RowGroup;


DataTable.Api.register( 'rowGroup()', function () {
	return this;
} );

DataTable.Api.register( 'rowGroup().disable()', function () {
	return this.iterator( 'table', function (ctx) {
		if ( ctx.rowGroup ) {
			ctx.rowGroup.enable( false );
		}
	} );
} );

DataTable.Api.register( 'rowGroup().enable()', function ( opts ) {
	return this.iterator( 'table', function (ctx) {
		if ( ctx.rowGroup ) {
			ctx.rowGroup.enable( opts === undefined ? true : opts );
		}
	} );
} );

DataTable.Api.register( 'rowGroup().dataSrc()', function ( val ) {
	if ( val === undefined ) {
		return this.context[0].rowGroup.dataSrc();
	}

	return this.iterator( 'table', function (ctx) {
		if ( ctx.rowGroup ) {
			ctx.rowGroup.dataSrc( val );
		}
	} );
} );


// Attach a listener to the document which listens for DataTables initialisation
// events so we can automatically initialise
$(document).on( 'preInit.dt.dtrg', function (e, settings, json) {
	if ( e.namespace !== 'dt' ) {
		return;
	}

	var init = settings.oInit.rowGroup;
	var defaults = DataTable.defaults.rowGroup;

	if ( init || defaults ) {
		var opts = $.extend( {}, defaults, init );

		if ( init !== false ) {
			new RowGroup( settings, opts  );
		}
	}
} );


return RowGroup;

}));


/*! RowReorder 1.2.4
 * 2015-2018 SpryMedia Ltd - datatables.net/license
 */

/**
 * @summary     RowReorder
 * @description Row reordering extension for DataTables
 * @version     1.2.4
 * @file        dataTables.rowReorder.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     www.sprymedia.co.uk/contact
 * @copyright   Copyright 2015-2018 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license/mit
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */

(function( factory ){
	if ( typeof define === 'function' && define.amd ) {
		// AMD
		define( ['jquery', 'datatables.net'], function ( $ ) {
			return factory( $, window, document );
		} );
	}
	else if ( typeof exports === 'object' ) {
		// CommonJS
		module.exports = function (root, $) {
			if ( ! root ) {
				root = window;
			}

			if ( ! $ || ! $.fn.dataTable ) {
				$ = require('datatables.net')(root, $).$;
			}

			return factory( $, root, root.document );
		};
	}
	else {
		// Browser
		factory( jQuery, window, document );
	}
}(function( $, window, document, undefined ) {
'use strict';
var DataTable = $.fn.dataTable;


/**
 * RowReorder provides the ability in DataTables to click and drag rows to
 * reorder them. When a row is dropped the data for the rows effected will be
 * updated to reflect the change. Normally this data point should also be the
 * column being sorted upon in the DataTable but this does not need to be the
 * case. RowReorder implements a "data swap" method - so the rows being
 * reordered take the value of the data point from the row that used to occupy
 * the row's new position.
 *
 * Initialisation is done by either:
 *
 * * `rowReorder` parameter in the DataTable initialisation object
 * * `new $.fn.dataTable.RowReorder( table, opts )` after DataTables
 *   initialisation.
 * 
 *  @class
 *  @param {object} settings DataTables settings object for the host table
 *  @param {object} [opts] Configuration options
 *  @requires jQuery 1.7+
 *  @requires DataTables 1.10.7+
 */
var RowReorder = function ( dt, opts ) {
	// Sanity check that we are using DataTables 1.10 or newer
	if ( ! DataTable.versionCheck || ! DataTable.versionCheck( '1.10.8' ) ) {
		throw 'DataTables RowReorder requires DataTables 1.10.8 or newer';
	}

	// User and defaults configuration object
	this.c = $.extend( true, {},
		DataTable.defaults.rowReorder,
		RowReorder.defaults,
		opts
	);

	// Internal settings
	this.s = {
		/** @type {integer} Scroll body top cache */
		bodyTop: null,

		/** @type {DataTable.Api} DataTables' API instance */
		dt: new DataTable.Api( dt ),

		/** @type {function} Data fetch function */
		getDataFn: DataTable.ext.oApi._fnGetObjectDataFn( this.c.dataSrc ),

		/** @type {array} Pixel positions for row insertion calculation */
		middles: null,

		/** @type {Object} Cached dimension information for use in the mouse move event handler */
		scroll: {},

		/** @type {integer} Interval object used for smooth scrolling */
		scrollInterval: null,

		/** @type {function} Data set function */
		setDataFn: DataTable.ext.oApi._fnSetObjectDataFn( this.c.dataSrc ),

		/** @type {Object} Mouse down information */
		start: {
			top: 0,
			left: 0,
			offsetTop: 0,
			offsetLeft: 0,
			nodes: []
		},

		/** @type {integer} Window height cached value */
		windowHeight: 0,

		/** @type {integer} Document outer height cached value */
		documentOuterHeight: 0,

		/** @type {integer} DOM clone outer height cached value */
		domCloneOuterHeight: 0
	};

	// DOM items
	this.dom = {
		/** @type {jQuery} Cloned row being moved around */
		clone: null,

		/** @type {jQuery} DataTables scrolling container */
		dtScroll: $('div.dataTables_scrollBody', this.s.dt.table().container())
	};

	// Check if row reorder has already been initialised on this table
	var settings = this.s.dt.settings()[0];
	var exisiting = settings.rowreorder;
	if ( exisiting ) {
		return exisiting;
	}

	settings.rowreorder = this;
	this._constructor();
};


$.extend( RowReorder.prototype, {
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Constructor
	 */

	/**
	 * Initialise the RowReorder instance
	 *
	 * @private
	 */
	_constructor: function ()
	{
		var that = this;
		var dt = this.s.dt;
		var table = $( dt.table().node() );

		// Need to be able to calculate the row positions relative to the table
		if ( table.css('position') === 'static' ) {
			table.css( 'position', 'relative' );
		}

		// listen for mouse down on the target column - we have to implement
		// this rather than using HTML5 drag and drop as drag and drop doesn't
		// appear to work on table rows at this time. Also mobile browsers are
		// not supported.
		// Use `table().container()` rather than just the table node for IE8 -
		// otherwise it only works once...
		$(dt.table().container()).on( 'mousedown.rowReorder touchstart.rowReorder', this.c.selector, function (e) {
			if ( ! that.c.enable ) {
				return;
			}

			// Ignore excluded children of the selector
			if ( $(e.target).is(that.c.excludedChildren) ) {
				return true;
			}

			var tr = $(this).closest('tr');
			var row = dt.row( tr );

			// Double check that it is a DataTable row
			if ( row.any() ) {
				that._emitEvent( 'pre-row-reorder', {
					node: row.node(),
					index: row.index()
				} );

				that._mouseDown( e, tr );
				return false;
			}
		} );

		dt.on( 'destroy.rowReorder', function () {
			$(dt.table().container()).off( '.rowReorder' );
			dt.off( '.rowReorder' );
		} );
	},


	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Private methods
	 */
	
	/**
	 * Cache the measurements that RowReorder needs in the mouse move handler
	 * to attempt to speed things up, rather than reading from the DOM.
	 *
	 * @private
	 */
	_cachePositions: function ()
	{
		var dt = this.s.dt;

		// Frustratingly, if we add `position:relative` to the tbody, the
		// position is still relatively to the parent. So we need to adjust
		// for that
		var headerHeight = $( dt.table().node() ).find('thead').outerHeight();

		// Need to pass the nodes through jQuery to get them in document order,
		// not what DataTables thinks it is, since we have been altering the
		// order
		var nodes = $.unique( dt.rows( { page: 'current' } ).nodes().toArray() );
		var tops = $.map( nodes, function ( node, i ) {
			return $(node).position().top - headerHeight;
		} );

		var middles = $.map( tops, function ( top, i ) {
			return tops.length < i-1 ?
				(top + tops[i+1]) / 2 :
				(top + top + $( dt.row( ':last-child' ).node() ).outerHeight() ) / 2;
		} );

		this.s.middles = middles;
		this.s.bodyTop = $( dt.table().body() ).offset().top;
		this.s.windowHeight = $(window).height();
		this.s.documentOuterHeight = $(document).outerHeight();
	},


	/**
	 * Clone a row so it can be floated around the screen
	 *
	 * @param  {jQuery} target Node to be cloned
	 * @private
	 */
	_clone: function ( target )
	{
		var dt = this.s.dt;
		var clone = $( dt.table().node().cloneNode(false) )
			.addClass( 'dt-rowReorder-float' )
			.append('<tbody/>')
			.append( target.clone( false ) );

		// Match the table and column widths - read all sizes before setting
		// to reduce reflows
		var tableWidth = target.outerWidth();
		var tableHeight = target.outerHeight();
		var sizes = target.children().map( function () {
			return $(this).width();
		} );

		clone
			.width( tableWidth )
			.height( tableHeight )
			.find('tr').children().each( function (i) {
				this.style.width = sizes[i]+'px';
			} );

		// Insert into the document to have it floating around
		clone.appendTo( 'body' );

		this.dom.clone = clone;
		this.s.domCloneOuterHeight = clone.outerHeight();
	},


	/**
	 * Update the cloned item's position in the document
	 *
	 * @param  {object} e Event giving the mouse's position
	 * @private
	 */
	_clonePosition: function ( e )
	{
		var start = this.s.start;
		var topDiff = this._eventToPage( e, 'Y' ) - start.top;
		var leftDiff = this._eventToPage( e, 'X' ) - start.left;
		var snap = this.c.snapX;
		var left;
		var top = topDiff + start.offsetTop;

		if ( snap === true ) {
			left = start.offsetLeft;
		}
		else if ( typeof snap === 'number' ) {
			left = start.offsetLeft + snap;
		}
		else {
			left = leftDiff + start.offsetLeft;
		}

		if(top < 0) {
			top = 0
		}
		else if(top + this.s.domCloneOuterHeight > this.s.documentOuterHeight) {
			top = this.s.documentOuterHeight - this.s.domCloneOuterHeight;
		}

		this.dom.clone.css( {
			top: top,
			left: left
		} );
	},


	/**
	 * Emit an event on the DataTable for listeners
	 *
	 * @param  {string} name Event name
	 * @param  {array} args Event arguments
	 * @private
	 */
	_emitEvent: function ( name, args )
	{
		this.s.dt.iterator( 'table', function ( ctx, i ) {
			$(ctx.nTable).triggerHandler( name+'.dt', args );
		} );
	},


	/**
	 * Get pageX/Y position from an event, regardless of if it is a mouse or
	 * touch event.
	 *
	 * @param  {object} e Event
	 * @param  {string} pos X or Y (must be a capital)
	 * @private
	 */
	_eventToPage: function ( e, pos )
	{
		if ( e.type.indexOf( 'touch' ) !== -1 ) {
			return e.originalEvent.touches[0][ 'page'+pos ];
		}

		return e[ 'page'+pos ];
	},


	/**
	 * Mouse down event handler. Read initial positions and add event handlers
	 * for the move.
	 *
	 * @param  {object} e      Mouse event
	 * @param  {jQuery} target TR element that is to be moved
	 * @private
	 */
	_mouseDown: function ( e, target )
	{
		var that = this;
		var dt = this.s.dt;
		var start = this.s.start;

		var offset = target.offset();
		start.top = this._eventToPage( e, 'Y' );
		start.left = this._eventToPage( e, 'X' );
		start.offsetTop = offset.top;
		start.offsetLeft = offset.left;
		start.nodes = $.unique( dt.rows( { page: 'current' } ).nodes().toArray() );

		this._cachePositions();
		this._clone( target );
		this._clonePosition( e );

		this.dom.target = target;
		target.addClass( 'dt-rowReorder-moving' );

		$( document )
			.on( 'mouseup.rowReorder touchend.rowReorder', function (e) {
				that._mouseUp(e);
			} )
			.on( 'mousemove.rowReorder touchmove.rowReorder', function (e) {
				that._mouseMove(e);
			} );

		// Check if window is x-scrolling - if not, disable it for the duration
		// of the drag
		if ( $(window).width() === $(document).width() ) {
			$(document.body).addClass( 'dt-rowReorder-noOverflow' );
		}

		// Cache scrolling information so mouse move doesn't need to read.
		// This assumes that the window and DT scroller will not change size
		// during an row drag, which I think is a fair assumption
		var scrollWrapper = this.dom.dtScroll;
		this.s.scroll = {
			windowHeight: $(window).height(),
			windowWidth:  $(window).width(),
			dtTop:        scrollWrapper.length ? scrollWrapper.offset().top : null,
			dtLeft:       scrollWrapper.length ? scrollWrapper.offset().left : null,
			dtHeight:     scrollWrapper.length ? scrollWrapper.outerHeight() : null,
			dtWidth:      scrollWrapper.length ? scrollWrapper.outerWidth() : null
		};
	},


	/**
	 * Mouse move event handler - move the cloned row and shuffle the table's
	 * rows if required.
	 *
	 * @param  {object} e Mouse event
	 * @private
	 */
	_mouseMove: function ( e )
	{
		this._clonePosition( e );

		// Transform the mouse position into a position in the table's body
		var bodyY = this._eventToPage( e, 'Y' ) - this.s.bodyTop;
		var middles = this.s.middles;
		var insertPoint = null;
		var dt = this.s.dt;
		var body = dt.table().body();

		// Determine where the row should be inserted based on the mouse
		// position
		for ( var i=0, ien=middles.length ; i<ien ; i++ ) {
			if ( bodyY < middles[i] ) {
				insertPoint = i;
				break;
			}
		}

		if ( insertPoint === null ) {
			insertPoint = middles.length;
		}

		// Perform the DOM shuffle if it has changed from last time
		if ( this.s.lastInsert === null || this.s.lastInsert !== insertPoint ) {
			if ( insertPoint === 0 ) {
				this.dom.target.prependTo( body );
			}
			else {
				var nodes = $.unique( dt.rows( { page: 'current' } ).nodes().toArray() );

				if ( insertPoint > this.s.lastInsert ) {
					this.dom.target.insertAfter( nodes[ insertPoint-1 ] );
				}
				else {
					this.dom.target.insertBefore( nodes[ insertPoint ] );
				}
			}

			this._cachePositions();

			this.s.lastInsert = insertPoint;
		}

		this._shiftScroll( e );
	},


	/**
	 * Mouse up event handler - release the event handlers and perform the
	 * table updates
	 *
	 * @param  {object} e Mouse event
	 * @private
	 */
	_mouseUp: function ( e )
	{
		var that = this;
		var dt = this.s.dt;
		var i, ien;
		var dataSrc = this.c.dataSrc;

		this.dom.clone.remove();
		this.dom.clone = null;

		this.dom.target.removeClass( 'dt-rowReorder-moving' );
		//this.dom.target = null;

		$(document).off( '.rowReorder' );
		$(document.body).removeClass( 'dt-rowReorder-noOverflow' );

		clearInterval( this.s.scrollInterval );
		this.s.scrollInterval = null;

		// Calculate the difference
		var startNodes = this.s.start.nodes;
		var endNodes = $.unique( dt.rows( { page: 'current' } ).nodes().toArray() );
		var idDiff = {};
		var fullDiff = [];
		var diffNodes = [];
		var getDataFn = this.s.getDataFn;
		var setDataFn = this.s.setDataFn;

		for ( i=0, ien=startNodes.length ; i<ien ; i++ ) {
			if ( startNodes[i] !== endNodes[i] ) {
				var id = dt.row( endNodes[i] ).id();
				var endRowData = dt.row( endNodes[i] ).data();
				var startRowData = dt.row( startNodes[i] ).data();

				if ( id ) {
					idDiff[ id ] = getDataFn( startRowData );
				}

				fullDiff.push( {
					node: endNodes[i],
					oldData: getDataFn( endRowData ),
					newData: getDataFn( startRowData ),
					newPosition: i,
					oldPosition: $.inArray( endNodes[i], startNodes )
				} );

				diffNodes.push( endNodes[i] );
			}
		}
		
		// Create event args
		var eventArgs = [ fullDiff, {
			dataSrc:    dataSrc,
			nodes:      diffNodes,
			values:     idDiff,
			triggerRow: dt.row( this.dom.target )
		} ];
		
		// Emit event
		this._emitEvent( 'row-reorder', eventArgs );

		var update = function () {
			if ( that.c.update ) {
				for ( i=0, ien=fullDiff.length ; i<ien ; i++ ) {
					var row = dt.row( fullDiff[i].node );
					var rowData = row.data();

					setDataFn( rowData, fullDiff[i].newData );

					// Invalidate the cell that has the same data source as the dataSrc
					dt.columns().every( function () {
						if ( this.dataSrc() === dataSrc ) {
							dt.cell( fullDiff[i].node, this.index() ).invalidate( 'data' );
						}
					} );
				}

				// Trigger row reordered event
				that._emitEvent( 'row-reordered', eventArgs );

				dt.draw( false );
			}
		};

		// Editor interface
		if ( this.c.editor ) {
			// Disable user interaction while Editor is submitting
			this.c.enable = false;

			this.c.editor
				.edit(
					diffNodes,
					false,
					$.extend( {submit: 'changed'}, this.c.formOptions )
				)
				.multiSet( dataSrc, idDiff )
				.one( 'preSubmitCancelled.rowReorder', function () {
					that.c.enable = true;
					that.c.editor.off( '.rowReorder' );
					dt.draw( false );
				} )
				.one( 'submitUnsuccessful.rowReorder', function () {
					dt.draw( false );
				} )
				.one( 'submitSuccess.rowReorder', function () {
					update();
				} )
				.one( 'submitComplete', function () {
					that.c.enable = true;
					that.c.editor.off( '.rowReorder' );
				} )
				.submit();
		}
		else {
			update();
		}
	},


	/**
	 * Move the window and DataTables scrolling during a drag to scroll new
	 * content into view.
	 *
	 * This matches the `_shiftScroll` method used in AutoFill, but only
	 * horizontal scrolling is considered here.
	 *
	 * @param  {object} e Mouse move event object
	 * @private
	 */
	_shiftScroll: function ( e )
	{
		var that = this;
		var dt = this.s.dt;
		var scroll = this.s.scroll;
		var runInterval = false;
		var scrollSpeed = 5;
		var buffer = 65;
		var
			windowY = e.pageY - document.body.scrollTop,
			windowVert,
			dtVert;

		// Window calculations - based on the mouse position in the window,
		// regardless of scrolling
		if ( windowY < buffer ) {
			windowVert = scrollSpeed * -1;
		}
		else if ( windowY > scroll.windowHeight - buffer ) {
			windowVert = scrollSpeed;
		}

		// DataTables scrolling calculations - based on the table's position in
		// the document and the mouse position on the page
		if ( scroll.dtTop !== null && e.pageY < scroll.dtTop + buffer ) {
			dtVert = scrollSpeed * -1;
		}
		else if ( scroll.dtTop !== null && e.pageY > scroll.dtTop + scroll.dtHeight - buffer ) {
			dtVert = scrollSpeed;
		}

		// This is where it gets interesting. We want to continue scrolling
		// without requiring a mouse move, so we need an interval to be
		// triggered. The interval should continue until it is no longer needed,
		// but it must also use the latest scroll commands (for example consider
		// that the mouse might move from scrolling up to scrolling left, all
		// with the same interval running. We use the `scroll` object to "pass"
		// this information to the interval. Can't use local variables as they
		// wouldn't be the ones that are used by an already existing interval!
		if ( windowVert || dtVert ) {
			scroll.windowVert = windowVert;
			scroll.dtVert = dtVert;
			runInterval = true;
		}
		else if ( this.s.scrollInterval ) {
			// Don't need to scroll - remove any existing timer
			clearInterval( this.s.scrollInterval );
			this.s.scrollInterval = null;
		}

		// If we need to run the interval to scroll and there is no existing
		// interval (if there is an existing one, it will continue to run)
		if ( ! this.s.scrollInterval && runInterval ) {
			this.s.scrollInterval = setInterval( function () {
				// Don't need to worry about setting scroll <0 or beyond the
				// scroll bound as the browser will just reject that.
				if ( scroll.windowVert ) {
					document.body.scrollTop += scroll.windowVert;
				}

				// DataTables scrolling
				if ( scroll.dtVert ) {
					var scroller = that.dom.dtScroll[0];

					if ( scroll.dtVert ) {
						scroller.scrollTop += scroll.dtVert;
					}
				}
			}, 20 );
		}
	}
} );



/**
 * RowReorder default settings for initialisation
 *
 * @namespace
 * @name RowReorder.defaults
 * @static
 */
RowReorder.defaults = {
	/**
	 * Data point in the host row's data source object for where to get and set
	 * the data to reorder. This will normally also be the sorting column.
	 *
	 * @type {Number}
	 */
	dataSrc: 0,

	/**
	 * Editor instance that will be used to perform the update
	 *
	 * @type {DataTable.Editor}
	 */
	editor: null,

	/**
	 * Enable / disable RowReorder's user interaction
	 * @type {Boolean}
	 */
	enable: true,

	/**
	 * Form options to pass to Editor when submitting a change in the row order.
	 * See the Editor `from-options` object for details of the options
	 * available.
	 * @type {Object}
	 */
	formOptions: {},

	/**
	 * Drag handle selector. This defines the element that when dragged will
	 * reorder a row.
	 *
	 * @type {String}
	 */
	selector: 'td:first-child',

	/**
	 * Optionally lock the dragged row's x-position. This can be `true` to
	 * fix the position match the host table's, `false` to allow free movement
	 * of the row, or a number to define an offset from the host table.
	 *
	 * @type {Boolean|number}
	 */
	snapX: false,

	/**
	 * Update the table's data on drop
	 *
	 * @type {Boolean}
	 */
	update: true,

	/**
	 * Selector for children of the drag handle selector that mouseDown events
	 * will be passed through to and drag will not activate
	 *
	 * @type {String}
	 */
	excludedChildren: 'a'
};


/*
 * API
 */
var Api = $.fn.dataTable.Api;

// Doesn't do anything - work around for a bug in DT... Not documented
Api.register( 'rowReorder()', function () {
	return this;
} );

Api.register( 'rowReorder.enable()', function ( toggle ) {
	if ( toggle === undefined ) {
		toggle = true;
	}

	return this.iterator( 'table', function ( ctx ) {
		if ( ctx.rowreorder ) {
			ctx.rowreorder.c.enable = toggle;
		}
	} );
} );

Api.register( 'rowReorder.disable()', function () {
	return this.iterator( 'table', function ( ctx ) {
		if ( ctx.rowreorder ) {
			ctx.rowreorder.c.enable = false;
		}
	} );
} );


/**
 * Version information
 *
 * @name RowReorder.version
 * @static
 */
RowReorder.version = '1.2.4';


$.fn.dataTable.RowReorder = RowReorder;
$.fn.DataTable.RowReorder = RowReorder;

// Attach a listener to the document which listens for DataTables initialisation
// events so we can automatically initialise
$(document).on( 'init.dt.dtr', function (e, settings, json) {
	if ( e.namespace !== 'dt' ) {
		return;
	}

	var init = settings.oInit.rowReorder;
	var defaults = DataTable.defaults.rowReorder;

	if ( init || defaults ) {
		var opts = $.extend( {}, init, defaults );

		if ( init !== false ) {
			new RowReorder( settings, opts  );
		}
	}
} );


return RowReorder;
}));


/*! Scroller 2.0.0
 * Â©2011-2018 SpryMedia Ltd - datatables.net/license
 */

/**
 * @summary     Scroller
 * @description Virtual rendering for DataTables
 * @version     2.0.0
 * @file        dataTables.scroller.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     www.sprymedia.co.uk/contact
 * @copyright   Copyright 2011-2018 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license/mit
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */

(function( factory ){
	if ( typeof define === 'function' && define.amd ) {
		// AMD
		define( ['jquery', 'datatables.net'], function ( $ ) {
			return factory( $, window, document );
		} );
	}
	else if ( typeof exports === 'object' ) {
		// CommonJS
		module.exports = function (root, $) {
			if ( ! root ) {
				root = window;
			}

			if ( ! $ || ! $.fn.dataTable ) {
				$ = require('datatables.net')(root, $).$;
			}

			return factory( $, root, root.document );
		};
	}
	else {
		// Browser
		factory( jQuery, window, document );
	}
}(function( $, window, document, undefined ) {
'use strict';
var DataTable = $.fn.dataTable;


/**
 * Scroller is a virtual rendering plug-in for DataTables which allows large
 * datasets to be drawn on screen every quickly. What the virtual rendering means
 * is that only the visible portion of the table (and a bit to either side to make
 * the scrolling smooth) is drawn, while the scrolling container gives the
 * visual impression that the whole table is visible. This is done by making use
 * of the pagination abilities of DataTables and moving the table around in the
 * scrolling container DataTables adds to the page. The scrolling container is
 * forced to the height it would be for the full table display using an extra
 * element.
 *
 * Note that rows in the table MUST all be the same height. Information in a cell
 * which expands on to multiple lines will cause some odd behaviour in the scrolling.
 *
 * Scroller is initialised by simply including the letter 'S' in the sDom for the
 * table you want to have this feature enabled on. Note that the 'S' must come
 * AFTER the 't' parameter in `dom`.
 *
 * Key features include:
 *   <ul class="limit_length">
 *     <li>Speed! The aim of Scroller for DataTables is to make rendering large data sets fast</li>
 *     <li>Full compatibility with deferred rendering in DataTables for maximum speed</li>
 *     <li>Display millions of rows</li>
 *     <li>Integration with state saving in DataTables (scrolling position is saved)</li>
 *     <li>Easy to use</li>
 *   </ul>
 *
 *  @class
 *  @constructor
 *  @global
 *  @param {object} dt DataTables settings object or API instance
 *  @param {object} [opts={}] Configuration object for FixedColumns. Options 
 *    are defined by {@link Scroller.defaults}
 *
 *  @requires jQuery 1.7+
 *  @requires DataTables 1.10.0+
 *
 *  @example
 *    $(document).ready(function() {
 *        $('#example').DataTable( {
 *            "scrollY": "200px",
 *            "ajax": "media/dataset/large.txt",
 *            "scroller": true,
 *            "deferRender": true
 *        } );
 *    } );
 */
var Scroller = function ( dt, opts ) {
	/* Sanity check - you just know it will happen */
	if ( ! (this instanceof Scroller) ) {
		alert( "Scroller warning: Scroller must be initialised with the 'new' keyword." );
		return;
	}

	if ( opts === undefined ) {
		opts = {};
	}

	var dtApi = $.fn.dataTable.Api( dt );

	/**
	 * Settings object which contains customisable information for the Scroller instance
	 * @namespace
	 * @private
	 * @extends Scroller.defaults
	 */
	this.s = {
		/**
		 * DataTables settings object
		 *  @type     object
		 *  @default  Passed in as first parameter to constructor
		 */
		dt: dtApi.settings()[0],

		/**
		 * DataTables API instance
		 *  @type     DataTable.Api
		 */
		dtApi: dtApi,

		/**
		 * Pixel location of the top of the drawn table in the viewport
		 *  @type     int
		 *  @default  0
		 */
		tableTop: 0,

		/**
		 * Pixel location of the bottom of the drawn table in the viewport
		 *  @type     int
		 *  @default  0
		 */
		tableBottom: 0,

		/**
		 * Pixel location of the boundary for when the next data set should be loaded and drawn
		 * when scrolling up the way.
		 *  @type     int
		 *  @default  0
		 *  @private
		 */
		redrawTop: 0,

		/**
		 * Pixel location of the boundary for when the next data set should be loaded and drawn
		 * when scrolling down the way. Note that this is actually calculated as the offset from
		 * the top.
		 *  @type     int
		 *  @default  0
		 *  @private
		 */
		redrawBottom: 0,

		/**
		 * Auto row height or not indicator
		 *  @type     bool
		 *  @default  0
		 */
		autoHeight: true,

		/**
		 * Number of rows calculated as visible in the visible viewport
		 *  @type     int
		 *  @default  0
		 */
		viewportRows: 0,

		/**
		 * setTimeout reference for state saving, used when state saving is enabled in the DataTable
		 * and when the user scrolls the viewport in order to stop the cookie set taking too much
		 * CPU!
		 *  @type     int
		 *  @default  0
		 */
		stateTO: null,

		/**
		 * setTimeout reference for the redraw, used when server-side processing is enabled in the
		 * DataTables in order to prevent DoSing the server
		 *  @type     int
		 *  @default  null
		 */
		drawTO: null,

		heights: {
			jump: null,
			page: null,
			virtual: null,
			scroll: null,

			/**
			 * Height of rows in the table
			 *  @type     int
			 *  @default  0
			 */
			row: null,

			/**
			 * Pixel height of the viewport
			 *  @type     int
			 *  @default  0
			 */
			viewport: null,
			labelFactor: 1
		},

		topRowFloat: 0,
		scrollDrawDiff: null,
		loaderVisible: false,
		forceReposition: false,
		baseRowTop: 0,
		baseScrollTop: 0,
		mousedown: false,
		lastScrollTop: 0
	};

	// @todo The defaults should extend a `c` property and the internal settings
	// only held in the `s` property. At the moment they are mixed
	this.s = $.extend( this.s, Scroller.oDefaults, opts );

	// Workaround for row height being read from height object (see above comment)
	this.s.heights.row = this.s.rowHeight;

	/**
	 * DOM elements used by the class instance
	 * @private
	 * @namespace
	 *
	 */
	this.dom = {
		"force":    document.createElement('div'),
		"label":    $('<div class="dts_label">0</div>'),
		"scroller": null,
		"table":    null,
		"loader":   null
	};

	// Attach the instance to the DataTables instance so it can be accessed in
	// future. Don't initialise Scroller twice on the same table
	if ( this.s.dt.oScroller ) {
		return;
	}

	this.s.dt.oScroller = this;

	/* Let's do it */
	this.construct();
};



$.extend( Scroller.prototype, {
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Public methods - to be exposed via the DataTables API
	 */

	/**
	 * Calculate and store information about how many rows are to be displayed
	 * in the scrolling viewport, based on current dimensions in the browser's
	 * rendering. This can be particularly useful if the table is initially
	 * drawn in a hidden element - for example in a tab.
	 *  @param {bool} [redraw=true] Redraw the table automatically after the recalculation, with
	 *    the new dimensions forming the basis for the draw.
	 *  @returns {void}
	 */
	measure: function ( redraw )
	{
		if ( this.s.autoHeight )
		{
			this._calcRowHeight();
		}

		var heights = this.s.heights;

		if ( heights.row ) {
			heights.viewport = $.contains(document, this.dom.scroller) ?
				this.dom.scroller.clientHeight :
				this._parseHeight($(this.dom.scroller).css('height'));

			// If collapsed (no height) use the max-height parameter
			if ( ! heights.viewport ) {
				heights.viewport = this._parseHeight($(this.dom.scroller).css('max-height'));
			}

			this.s.viewportRows = parseInt( heights.viewport / heights.row, 10 )+1;
			this.s.dt._iDisplayLength = this.s.viewportRows * this.s.displayBuffer;
		}

		var label = this.dom.label.outerHeight();
		heights.labelFactor = (heights.viewport-label) / heights.scroll;

		if ( redraw === undefined || redraw )
		{
			this.s.dt.oInstance.fnDraw( false );
		}
	},

	/**
	 * Get information about current displayed record range. This corresponds to
	 * the information usually displayed in the "Info" block of the table.
	 *
	 * @returns {object} info as an object:
	 *  {
	 *      start: {int}, // the 0-indexed record at the top of the viewport
	 *      end:   {int}, // the 0-indexed record at the bottom of the viewport
	 *  }
	*/
	pageInfo: function()
	{
		var 
			dt = this.s.dt,
			iScrollTop = this.dom.scroller.scrollTop,
			iTotal = dt.fnRecordsDisplay(),
			iPossibleEnd = Math.ceil(this.pixelsToRow(iScrollTop + this.s.heights.viewport, false, this.s.ani));

		return {
			start: Math.floor(this.pixelsToRow(iScrollTop, false, this.s.ani)),
			end: iTotal < iPossibleEnd ? iTotal-1 : iPossibleEnd-1
		};
	},

	/**
	 * Calculate the row number that will be found at the given pixel position
	 * (y-scroll).
	 *
	 * Please note that when the height of the full table exceeds 1 million
	 * pixels, Scroller switches into a non-linear mode for the scrollbar to fit
	 * all of the records into a finite area, but this function returns a linear
	 * value (relative to the last non-linear positioning).
	 *  @param {int} pixels Offset from top to calculate the row number of
	 *  @param {int} [intParse=true] If an integer value should be returned
	 *  @param {int} [virtual=false] Perform the calculations in the virtual domain
	 *  @returns {int} Row index
	 */
	pixelsToRow: function ( pixels, intParse, virtual )
	{
		var diff = pixels - this.s.baseScrollTop;
		var row = virtual ?
			(this._domain( 'physicalToVirtual', this.s.baseScrollTop ) + diff) / this.s.heights.row :
			( diff / this.s.heights.row ) + this.s.baseRowTop;

		return intParse || intParse === undefined ?
			parseInt( row, 10 ) :
			row;
	},

	/**
	 * Calculate the pixel position from the top of the scrolling container for
	 * a given row
	 *  @param {int} iRow Row number to calculate the position of
	 *  @returns {int} Pixels
	 */
	rowToPixels: function ( rowIdx, intParse, virtual )
	{
		var pixels;
		var diff = rowIdx - this.s.baseRowTop;

		if ( virtual ) {
			pixels = this._domain( 'virtualToPhysical', this.s.baseScrollTop );
			pixels += diff * this.s.heights.row;
		}
		else {
			pixels = this.s.baseScrollTop;
			pixels += diff * this.s.heights.row;
		}

		return intParse || intParse === undefined ?
			parseInt( pixels, 10 ) :
			pixels;
	},


	/**
	 * Calculate the row number that will be found at the given pixel position (y-scroll)
	 *  @param {int} row Row index to scroll to
	 *  @param {bool} [animate=true] Animate the transition or not
	 *  @returns {void}
	 */
	scrollToRow: function ( row, animate )
	{
		var that = this;
		var ani = false;
		var px = this.rowToPixels( row );

		// We need to know if the table will redraw or not before doing the
		// scroll. If it will not redraw, then we need to use the currently
		// displayed table, and scroll with the physical pixels. Otherwise, we
		// need to calculate the table's new position from the virtual
		// transform.
		var preRows = ((this.s.displayBuffer-1)/2) * this.s.viewportRows;
		var drawRow = row - preRows;
		if ( drawRow < 0 ) {
			drawRow = 0;
		}

		if ( (px > this.s.redrawBottom || px < this.s.redrawTop) && this.s.dt._iDisplayStart !== drawRow ) {
			ani = true;
			px = this._domain( 'virtualToPhysical', row * this.s.heights.row );

			// If we need records outside the current draw region, but the new
			// scrolling position is inside that (due to the non-linear nature
			// for larger numbers of records), we need to force position update.
			if ( this.s.redrawTop < px && px < this.s.redrawBottom ) {
				this.s.forceReposition = true;
				animate = false;
			}
		}

		if ( typeof animate == 'undefined' || animate )
		{
			this.s.ani = ani;
			$(this.dom.scroller).animate( {
				"scrollTop": px
			}, function () {
				// This needs to happen after the animation has completed and
				// the final scroll event fired
				setTimeout( function () {
					that.s.ani = false;
				}, 25 );
			} );
		}
		else
		{
			$(this.dom.scroller).scrollTop( px );
		}
	},


	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Constructor
	 */

	/**
	 * Initialisation for Scroller
	 *  @returns {void}
	 *  @private
	 */
	construct: function ()
	{
		var that = this;
		var dt = this.s.dtApi;

		/* Sanity check */
		if ( !this.s.dt.oFeatures.bPaginate ) {
			this.s.dt.oApi._fnLog( this.s.dt, 0, 'Pagination must be enabled for Scroller' );
			return;
		}

		/* Insert a div element that we can use to force the DT scrolling container to
		 * the height that would be required if the whole table was being displayed
		 */
		this.dom.force.style.position = "relative";
		this.dom.force.style.top = "0px";
		this.dom.force.style.left = "0px";
		this.dom.force.style.width = "1px";

		this.dom.scroller = $('div.'+this.s.dt.oClasses.sScrollBody, this.s.dt.nTableWrapper)[0];
		this.dom.scroller.appendChild( this.dom.force );
		this.dom.scroller.style.position = "relative";

		this.dom.table = $('>table', this.dom.scroller)[0];
		this.dom.table.style.position = "absolute";
		this.dom.table.style.top = "0px";
		this.dom.table.style.left = "0px";

		// Add class to 'announce' that we are a Scroller table
		$(dt.table().container()).addClass('dts DTS');

		// Add a 'loading' indicator
		if ( this.s.loadingIndicator )
		{
			this.dom.loader = $('<div class="dataTables_processing dts_loading">'+this.s.dt.oLanguage.sLoadingRecords+'</div>')
				.css('display', 'none');

			$(this.dom.scroller.parentNode)
				.css('position', 'relative')
				.append( this.dom.loader );
		}

		this.dom.label.appendTo(this.dom.scroller);

		/* Initial size calculations */
		if ( this.s.heights.row && this.s.heights.row != 'auto' )
		{
			this.s.autoHeight = false;
		}
		this.measure( false );

		// Scrolling callback to see if a page change is needed - use a throttled
		// function for the save save callback so we aren't hitting it on every
		// scroll
		this.s.ingnoreScroll = true;
		this.s.stateSaveThrottle = this.s.dt.oApi._fnThrottle( function () {
			that.s.dtApi.state.save();
		}, 500 );
		$(this.dom.scroller).on( 'scroll.dt-scroller', function (e) {
			that._scroll.call( that );
		} );

		// In iOS we catch the touchstart event in case the user tries to scroll
		// while the display is already scrolling
		$(this.dom.scroller).on('touchstart.dt-scroller', function () {
			that._scroll.call( that );
		} );

		$(this.dom.scroller)
			.on('mousedown.dt-scroller', function () {
				that.s.mousedown = true;
			})
			.on('mouseup.dt-scroller', function () {
				that.s.mouseup = false;
				that.dom.label.css('display', 'none');
			});

		// On resize, update the information element, since the number of rows shown might change
		$(window).on( 'resize.dt-scroller', function () {
			that.measure( false );
			that._info();
		} );

		// Add a state saving parameter to the DT state saving so we can restore the exact
		// position of the scrolling. Slightly surprisingly the scroll position isn't actually
		// stored, but rather tha base units which are needed to calculate it. This allows for
		// virtual scrolling as well.
		var initialStateSave = true;
		var loadedState = dt.state.loaded();

		dt.on( 'stateSaveParams.scroller', function ( e, settings, data ) {
			// Need to used the saved position on init
			data.scroller = {
				topRow: initialStateSave && loadedState && loadedState.scroller ?
					loadedState.scroller.topRow :
					that.s.topRowFloat,
				baseScrollTop: that.s.baseScrollTop,
				baseRowTop: that.s.baseRowTop
			};

			initialStateSave = false;
		} );

		if ( loadedState && loadedState.scroller ) {
			this.s.topRowFloat = loadedState.scroller.topRow;
			this.s.baseScrollTop = loadedState.scroller.baseScrollTop;
			this.s.baseRowTop = loadedState.scroller.baseRowTop;
		}

		dt.on( 'init.scroller', function () {
			that.measure( false );

			that._draw();

			// Update the scroller when the DataTable is redrawn
			dt.on( 'draw.scroller', function () {
				that._draw();
			});
		} );

		// Set height before the draw happens, allowing everything else to update
		// on draw complete without worry for roder.
		dt.on( 'preDraw.dt.scroller', function () {
			that._scrollForce();
		} );

		// Destructor
		dt.on( 'destroy.scroller', function () {
			$(window).off( 'resize.dt-scroller' );
			$(that.dom.scroller).off('.dt-scroller');
			$(that.s.dt.nTable).off( '.scroller' );

			$(that.s.dt.nTableWrapper).removeClass('DTS');
			$('div.DTS_Loading', that.dom.scroller.parentNode).remove();

			that.dom.table.style.position = "";
			that.dom.table.style.top = "";
			that.dom.table.style.left = "";
		} );
	},


	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Private methods
	 */

	/**
	 * Automatic calculation of table row height. This is just a little tricky here as using
	 * initialisation DataTables has tale the table out of the document, so we need to create
	 * a new table and insert it into the document, calculate the row height and then whip the
	 * table out.
	 *  @returns {void}
	 *  @private
	 */
	_calcRowHeight: function ()
	{
		var dt = this.s.dt;
		var origTable = dt.nTable;
		var nTable = origTable.cloneNode( false );
		var tbody = $('<tbody/>').appendTo( nTable );
		var container = $(
			'<div class="'+dt.oClasses.sWrapper+' DTS">'+
				'<div class="'+dt.oClasses.sScrollWrapper+'">'+
					'<div class="'+dt.oClasses.sScrollBody+'"></div>'+
				'</div>'+
			'</div>'
		);

		// Want 3 rows in the sizing table so :first-child and :last-child
		// CSS styles don't come into play - take the size of the middle row
		$('tbody tr:lt(4)', origTable).clone().appendTo( tbody );
        var rowsCount = $('tr', tbody).length;

        if ( rowsCount === 1 ) {
            tbody.prepend('<tr><td>&#160;</td></tr>');
            tbody.append('<tr><td>&#160;</td></tr>');
		}
		else {
            for (; rowsCount < 3; rowsCount++) {
                tbody.append('<tr><td>&#160;</td></tr>');
            }
		}
	
		$('div.'+dt.oClasses.sScrollBody, container).append( nTable );

		// If initialised using `dom`, use the holding element as the insert point
		var insertEl = this.s.dt.nHolding || origTable.parentNode;

		if ( ! $(insertEl).is(':visible') ) {
			insertEl = 'body';
		}

		container.appendTo( insertEl );
		this.s.heights.row = $('tr', tbody).eq(1).outerHeight();

		container.remove();
	},

	/**
	 * Draw callback function which is fired when the DataTable is redrawn. The main function of
	 * this method is to position the drawn table correctly the scrolling container for the rows
	 * that is displays as a result of the scrolling position.
	 *  @returns {void}
	 *  @private
	 */
	_draw: function ()
	{
		var
			that = this,
			heights = this.s.heights,
			iScrollTop = this.dom.scroller.scrollTop,
			iActualScrollTop = iScrollTop,
			iScrollBottom = iScrollTop + heights.viewport,
			iTableHeight = $(this.s.dt.nTable).height(),
			displayStart = this.s.dt._iDisplayStart,
			displayLen = this.s.dt._iDisplayLength,
			displayEnd = this.s.dt.fnRecordsDisplay();

		// Disable the scroll event listener while we are updating the DOM
		this.s.skip = true;

		// If paging is reset
		if ( (this.s.dt.bSorted || this.s.dt.bFiltered) && displayStart === 0 && !this.s.dt._drawHold ) {
			this.s.topRowFloat = 0;
		}

		iScrollTop = this.scrollType === 'jump' ?
			this._domain( 'physicalToVirtual', this.s.topRowFloat * heights.row ) :
			iScrollTop;

		// This doesn't work when scrolling with the mouse wheel
		$(that.dom.scroller).scrollTop(iScrollTop);

		// Store positional information so positional calculations can be based
		// upon the current table draw position
		this.s.baseScrollTop = iScrollTop;
		this.s.baseRowTop = this.s.topRowFloat;

		// Position the table in the virtual scroller
		var tableTop = iScrollTop - ((this.s.topRowFloat - displayStart) * heights.row);
		if ( displayStart === 0 ) {
			tableTop = 0;
		}
		else if ( displayStart + displayLen >= displayEnd ) {
			tableTop = heights.scroll - iTableHeight;
		}

		this.dom.table.style.top = tableTop+'px';

		/* Cache some information for the scroller */
		this.s.tableTop = tableTop;
		this.s.tableBottom = iTableHeight + this.s.tableTop;

		// Calculate the boundaries for where a redraw will be triggered by the
		// scroll event listener
		var boundaryPx = (iScrollTop - this.s.tableTop) * this.s.boundaryScale;
		this.s.redrawTop = iScrollTop - boundaryPx;
		this.s.redrawBottom = iScrollTop + boundaryPx > heights.scroll - heights.viewport - heights.row ?
			heights.scroll - heights.viewport - heights.row :
			iScrollTop + boundaryPx;

		this.s.skip = false;

		// Restore the scrolling position that was saved by DataTable's state
		// saving Note that this is done on the second draw when data is Ajax
		// sourced, and the first draw when DOM soured
		if ( this.s.dt.oFeatures.bStateSave && this.s.dt.oLoadedState !== null &&
			 typeof this.s.dt.oLoadedState.iScroller != 'undefined' )
		{
			// A quirk of DataTables is that the draw callback will occur on an
			// empty set if Ajax sourced, but not if server-side processing.
			var ajaxSourced = (this.s.dt.sAjaxSource || that.s.dt.ajax) && ! this.s.dt.oFeatures.bServerSide ?
				true :
				false;

			if ( ( ajaxSourced && this.s.dt.iDraw == 2) ||
			     (!ajaxSourced && this.s.dt.iDraw == 1) )
			{
				setTimeout( function () {
					$(that.dom.scroller).scrollTop( that.s.dt.oLoadedState.iScroller );
					that.s.redrawTop = that.s.dt.oLoadedState.iScroller - (heights.viewport/2);

					// In order to prevent layout thrashing we need another
					// small delay
					setTimeout( function () {
						that.s.ingnoreScroll = false;
					}, 0 );
				}, 0 );
			}
		}
		else {
			that.s.ingnoreScroll = false;
		}

		// Because of the order of the DT callbacks, the info update will
		// take precedence over the one we want here. So a 'thread' break is
		// needed.  Only add the thread break if bInfo is set
		if ( this.s.dt.oFeatures.bInfo ) {
			setTimeout( function () {
				that._info.call( that );
			}, 0 );
		}

		// Hide the loading indicator
		if ( this.dom.loader && this.s.loaderVisible ) {
			this.dom.loader.css( 'display', 'none' );
			this.s.loaderVisible = false;
		}
	},

	/**
	 * Convert from one domain to another. The physical domain is the actual
	 * pixel count on the screen, while the virtual is if we had browsers which
	 * had scrolling containers of infinite height (i.e. the absolute value)
	 *
	 *  @param {string} dir Domain transform direction, `virtualToPhysical` or
	 *    `physicalToVirtual` 
	 *  @returns {number} Calculated transform
	 *  @private
	 */
	_domain: function ( dir, val )
	{
		var heights = this.s.heights;
		var diff;
		var magic = 10000; // the point at which the non-linear calculations start to happen

		// If the virtual and physical height match, then we use a linear
		// transform between the two, allowing the scrollbar to be linear
		if ( heights.virtual === heights.scroll ) {
			return val;
		}

		// In the first 10k pixels and the last 10k pixels, we want the scrolling
		// to be linear. After that it can be non-linear. It would be unusual for
		// anyone to mouse wheel through that much.
		if ( val < magic ) {
			return val;
		}
		else if ( dir === 'virtualToPhysical' && val > heights.virtual - magic ) {
			diff = heights.virtual - val;
			return heights.scroll - diff;
		}
		else if ( dir === 'physicalToVirtual' && val > heights.scroll - magic ) {
			diff = heights.scroll - val;
			return heights.virtual - diff;
		}

		// Otherwise, we want a non-linear scrollbar to take account of the
		// redrawing regions at the start and end of the table, otherwise these
		// can stutter badly - on large tables 30px (for example) scroll might
		// be hundreds of rows, so the table would be redrawing every few px at
		// the start and end. Use a simple linear eq. to stop this, effectively
		// causing a kink in the scrolling ratio. It does mean the scrollbar is
		// non-linear, but with such massive data sets, the scrollbar is going
		// to be a best guess anyway
		var xMax = dir === 'virtualToPhysical' ?
			heights.virtual :
			heights.scroll;
		var yMax = dir === 'virtualToPhysical' ?
			heights.scroll :
			heights.virtual;

		var m = (yMax - magic) / (xMax - magic);
		var c = magic - (m*magic);

		return (m*val) + c;
	},

	/**
	 * Update any information elements that are controlled by the DataTable based on the scrolling
	 * viewport and what rows are visible in it. This function basically acts in the same way as
	 * _fnUpdateInfo in DataTables, and effectively replaces that function.
	 *  @returns {void}
	 *  @private
	 */
	_info: function ()
	{
		if ( !this.s.dt.oFeatures.bInfo )
		{
			return;
		}

		var
			dt = this.s.dt,
			language = dt.oLanguage,
			iScrollTop = this.dom.scroller.scrollTop,
			iStart = Math.floor( this.pixelsToRow(iScrollTop, false, this.s.ani)+1 ),
			iMax = dt.fnRecordsTotal(),
			iTotal = dt.fnRecordsDisplay(),
			iPossibleEnd = Math.ceil( this.pixelsToRow(iScrollTop+this.s.heights.viewport, false, this.s.ani) ),
			iEnd = iTotal < iPossibleEnd ? iTotal : iPossibleEnd,
			sStart = dt.fnFormatNumber( iStart ),
			sEnd = dt.fnFormatNumber( iEnd ),
			sMax = dt.fnFormatNumber( iMax ),
			sTotal = dt.fnFormatNumber( iTotal ),
			sOut;

		if ( dt.fnRecordsDisplay() === 0 &&
			   dt.fnRecordsDisplay() == dt.fnRecordsTotal() )
		{
			/* Empty record set */
			sOut = language.sInfoEmpty+ language.sInfoPostFix;
		}
		else if ( dt.fnRecordsDisplay() === 0 )
		{
			/* Empty record set after filtering */
			sOut = language.sInfoEmpty +' '+
				language.sInfoFiltered.replace('_MAX_', sMax)+
					language.sInfoPostFix;
		}
		else if ( dt.fnRecordsDisplay() == dt.fnRecordsTotal() )
		{
			/* Normal record set */
			sOut = language.sInfo.
					replace('_START_', sStart).
					replace('_END_',   sEnd).
					replace('_MAX_',   sMax).
					replace('_TOTAL_', sTotal)+
				language.sInfoPostFix;
		}
		else
		{
			/* Record set after filtering */
			sOut = language.sInfo.
					replace('_START_', sStart).
					replace('_END_',   sEnd).
					replace('_MAX_',   sMax).
					replace('_TOTAL_', sTotal) +' '+
				language.sInfoFiltered.replace(
					'_MAX_',
					dt.fnFormatNumber(dt.fnRecordsTotal())
				)+
				language.sInfoPostFix;
		}

		var callback = language.fnInfoCallback;
		if ( callback ) {
			sOut = callback.call( dt.oInstance,
				dt, iStart, iEnd, iMax, iTotal, sOut
			);
		}

		var n = dt.aanFeatures.i;
		if ( typeof n != 'undefined' )
		{
			for ( var i=0, iLen=n.length ; i<iLen ; i++ )
			{
				$(n[i]).html( sOut );
			}
		}

		// DT doesn't actually (yet) trigger this event, but it will in future
		$(dt.nTable).triggerHandler( 'info.dt' );
	},

	/**
	 * Parse CSS height property string as number
	 *
	 * An attempt is made to parse the string as a number. Currently supported units are 'px',
	 * 'vh', and 'rem'. 'em' is partially supported; it works as long as the parent element's
	 * font size matches the body element. Zero is returned for unrecognized strings.
	 *  @param {string} cssHeight CSS height property string
	 *  @returns {number} height
	 *  @private
	 */
	_parseHeight: function(cssHeight) {
		var height;
		var matches = /^([+-]?(?:\d+(?:\.\d+)?|\.\d+))(px|em|rem|vh)$/.exec(cssHeight);

		if (matches === null) {
			return 0;
		}

		var value = parseFloat(matches[1]);
		var unit = matches[2];

		if ( unit === 'px' ) {
			height = value;
		}
		else if ( unit === 'vh' ) {
			height = ( value / 100 ) * $(window).height();
		}
		else if ( unit === 'rem' ) {
			height = value * parseFloat($(':root').css('font-size'));
		}
		else if ( unit === 'em' ) {
			height = value * parseFloat($('body').css('font-size'));
		}

		return height ?
			height :
			0;
	},

	/**
	 * Scrolling function - fired whenever the scrolling position is changed.
	 * This method needs to use the stored values to see if the table should be
	 * redrawn as we are moving towards the end of the information that is
	 * currently drawn or not. If needed, then it will redraw the table based on
	 * the new position.
	 *  @returns {void}
	 *  @private
	 */
	_scroll: function ()
	{
		var
			that = this,
			heights = this.s.heights,
			iScrollTop = this.dom.scroller.scrollTop,
			iTopRow;

		if ( this.s.skip ) {
			return;
		}

		if ( this.s.ingnoreScroll ) {
			return;
		}

		if ( iScrollTop === this.s.lastScrollTop ) {
			return;
		}

		/* If the table has been sorted or filtered, then we use the redraw that
		 * DataTables as done, rather than performing our own
		 */
		if ( this.s.dt.bFiltered || this.s.dt.bSorted ) {
			this.s.lastScrollTop = 0;
			return;
		}

		/* Update the table's information display for what is now in the viewport */
		this._info();

		/* We don't want to state save on every scroll event - that's heavy
		 * handed, so use a timeout to update the state saving only when the
		 * scrolling has finished
		 */
		clearTimeout( this.s.stateTO );
		this.s.stateTO = setTimeout( function () {
			that.s.dtApi.state.save();
		}, 250 );

		this.s.scrollType = Math.abs(iScrollTop - this.s.lastScrollTop) > heights.viewport ?
			'jump' :
			'cont';

		this.s.topRowFloat = this.s.scrollType === 'cont' ?
			this.pixelsToRow( iScrollTop, false, false ) :
			this._domain( 'physicalToVirtual', iScrollTop ) / heights.row;

		if ( this.s.topRowFloat < 0 ) {
			this.s.topRowFloat = 0;
		}

		/* Check if the scroll point is outside the trigger boundary which would required
		 * a DataTables redraw
		 */
		if ( this.s.forceReposition || iScrollTop < this.s.redrawTop || iScrollTop > this.s.redrawBottom ) {
			var preRows = Math.ceil( ((this.s.displayBuffer-1)/2) * this.s.viewportRows );

			iTopRow = parseInt(this.s.topRowFloat, 10) - preRows;
			this.s.forceReposition = false;

			if ( iTopRow <= 0 ) {
				/* At the start of the table */
				iTopRow = 0;
			}
			else if ( iTopRow + this.s.dt._iDisplayLength > this.s.dt.fnRecordsDisplay() ) {
				/* At the end of the table */
				iTopRow = this.s.dt.fnRecordsDisplay() - this.s.dt._iDisplayLength;
				if ( iTopRow < 0 ) {
					iTopRow = 0;
				}
			}
			else if ( iTopRow % 2 !== 0 ) {
				// For the row-striping classes (odd/even) we want only to start
				// on evens otherwise the stripes will change between draws and
				// look rubbish
				iTopRow++;
			}


			if ( iTopRow != this.s.dt._iDisplayStart ) {
				/* Cache the new table position for quick lookups */
				this.s.tableTop = $(this.s.dt.nTable).offset().top;
				this.s.tableBottom = $(this.s.dt.nTable).height() + this.s.tableTop;

				var draw =  function () {
					if ( that.s.scrollDrawReq === null ) {
						that.s.scrollDrawReq = iScrollTop;
					}

					that.s.dt._iDisplayStart = iTopRow;
					that.s.dt.oApi._fnDraw( that.s.dt );
				};

				/* Do the DataTables redraw based on the calculated start point - note that when
				 * using server-side processing we introduce a small delay to not DoS the server...
				 */
				if ( this.s.dt.oFeatures.bServerSide ) {
					clearTimeout( this.s.drawTO );
					this.s.drawTO = setTimeout( draw, this.s.serverWait );
				}
				else {
					draw();
				}

				if ( this.dom.loader && ! this.s.loaderVisible ) {
					this.dom.loader.css( 'display', 'block' );
					this.s.loaderVisible = true;
				}
			}
		}
		else {
			this.s.topRowFloat = this.pixelsToRow( iScrollTop, false, true );
		}

		this.s.lastScrollTop = iScrollTop;
		this.s.stateSaveThrottle();

		if ( this.s.scrollType === 'jump' && this.s.mousedown ) {
			this.dom.label
				.html( this.s.dt.fnFormatNumber( parseInt( this.s.topRowFloat, 10 )+1 ) )
				.css( 'top', iScrollTop + (iScrollTop * heights.labelFactor ) )
				.css( 'display', 'block' );
		}
	},

	/**
	 * Force the scrolling container to have height beyond that of just the
	 * table that has been drawn so the user can scroll the whole data set.
	 *
	 * Note that if the calculated required scrolling height exceeds a maximum
	 * value (1 million pixels - hard-coded) the forcing element will be set
	 * only to that maximum value and virtual / physical domain transforms will
	 * be used to allow Scroller to display tables of any number of records.
	 *  @returns {void}
	 *  @private
	 */
	_scrollForce: function ()
	{
		var heights = this.s.heights;
		var max = 1000000;

		heights.virtual = heights.row * this.s.dt.fnRecordsDisplay();
		heights.scroll = heights.virtual;

		if ( heights.scroll > max ) {
			heights.scroll = max;
		}

		// Minimum height so there is always a row visible (the 'no rows found'
		// if reduced to zero filtering)
		this.dom.force.style.height = heights.scroll > this.s.heights.row ?
			heights.scroll+'px' :
			this.s.heights.row+'px';
	}
} );



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Statics
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


/**
 * Scroller default settings for initialisation
 *  @namespace
 *  @name Scroller.defaults
 *  @static
 */
Scroller.defaults = {
	/**
	 * Scroller uses the boundary scaling factor to decide when to redraw the table - which it
	 * typically does before you reach the end of the currently loaded data set (in order to
	 * allow the data to look continuous to a user scrolling through the data). If given as 0
	 * then the table will be redrawn whenever the viewport is scrolled, while 1 would not
	 * redraw the table until the currently loaded data has all been shown. You will want
	 * something in the middle - the default factor of 0.5 is usually suitable.
	 *  @type     float
	 *  @default  0.5
	 *  @static
	 */
	boundaryScale: 0.5,

	/**
	 * The display buffer is what Scroller uses to calculate how many rows it should pre-fetch
	 * for scrolling. Scroller automatically adjusts DataTables' display length to pre-fetch
	 * rows that will be shown in "near scrolling" (i.e. just beyond the current display area).
	 * The value is based upon the number of rows that can be displayed in the viewport (i.e.
	 * a value of 1), and will apply the display range to records before before and after the
	 * current viewport - i.e. a factor of 3 will allow Scroller to pre-fetch 1 viewport's worth
	 * of rows before the current viewport, the current viewport's rows and 1 viewport's worth
	 * of rows after the current viewport. Adjusting this value can be useful for ensuring
	 * smooth scrolling based on your data set.
	 *  @type     int
	 *  @default  7
	 *  @static
	 */
	displayBuffer: 9,

	/**
	 * Show (or not) the loading element in the background of the table. Note that you should
	 * include the dataTables.scroller.css file for this to be displayed correctly.
	 *  @type     boolean
	 *  @default  false
	 *  @static
	 */
	loadingIndicator: false,

	/**
	 * Scroller will attempt to automatically calculate the height of rows for it's internal
	 * calculations. However the height that is used can be overridden using this parameter.
	 *  @type     int|string
	 *  @default  auto
	 *  @static
	 */
	rowHeight: "auto",

	/**
	 * When using server-side processing, Scroller will wait a small amount of time to allow
	 * the scrolling to finish before requesting more data from the server. This prevents
	 * you from DoSing your own server! The wait time can be configured by this parameter.
	 *  @type     int
	 *  @default  200
	 *  @static
	 */
	serverWait: 200
};

Scroller.oDefaults = Scroller.defaults;



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Constants
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/**
 * Scroller version
 *  @type      String
 *  @default   See code
 *  @name      Scroller.version
 *  @static
 */
Scroller.version = "2.0.0";



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Initialisation
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

// Attach a listener to the document which listens for DataTables initialisation
// events so we can automatically initialise
$(document).on( 'preInit.dt.dtscroller', function (e, settings) {
	if ( e.namespace !== 'dt' ) {
		return;
	}

	var init = settings.oInit.scroller;
	var defaults = DataTable.defaults.scroller;

	if ( init || defaults ) {
		var opts = $.extend( {}, init, defaults );

		if ( init !== false ) {
			new Scroller( settings, opts  );
		}
	}
} );


// Attach Scroller to DataTables so it can be accessed as an 'extra'
$.fn.dataTable.Scroller = Scroller;
$.fn.DataTable.Scroller = Scroller;


// DataTables 1.10 API method aliases
var Api = $.fn.dataTable.Api;

Api.register( 'scroller()', function () {
	return this;
} );

// Undocumented and deprecated - is it actually useful at all?
Api.register( 'scroller().rowToPixels()', function ( rowIdx, intParse, virtual ) {
	var ctx = this.context;

	if ( ctx.length && ctx[0].oScroller ) {
		return ctx[0].oScroller.rowToPixels( rowIdx, intParse, virtual );
	}
	// undefined
} );

// Undocumented and deprecated - is it actually useful at all?
Api.register( 'scroller().pixelsToRow()', function ( pixels, intParse, virtual ) {
	var ctx = this.context;

	if ( ctx.length && ctx[0].oScroller ) {
		return ctx[0].oScroller.pixelsToRow( pixels, intParse, virtual );
	}
	// undefined
} );

// `scroller().scrollToRow()` is undocumented and deprecated. Use `scroller.toPosition()
Api.register( ['scroller().scrollToRow()', 'scroller.toPosition()'], function ( idx, ani ) {
	this.iterator( 'table', function ( ctx ) {
		if ( ctx.oScroller ) {
			ctx.oScroller.scrollToRow( idx, ani );
		}
	} );

	return this;
} );

Api.register( 'row().scrollTo()', function ( ani ) {
	var that = this;

	this.iterator( 'row', function ( ctx, rowIdx ) {
		if ( ctx.oScroller ) {
			var displayIdx = that
				.rows( { order: 'applied', search: 'applied' } )
				.indexes()
				.indexOf( rowIdx );

			ctx.oScroller.scrollToRow( displayIdx, ani );
		}
	} );

	return this;
} );

Api.register( 'scroller.measure()', function ( redraw ) {
	this.iterator( 'table', function ( ctx ) {
		if ( ctx.oScroller ) {
			ctx.oScroller.measure( redraw );
		}
	} );

	return this;
} );

Api.register( 'scroller.page()', function() {
	var ctx = this.context;

	if ( ctx.length && ctx[0].oScroller ) {
		return ctx[0].oScroller.pageInfo();
	}
	// undefined
} );

return Scroller;
}));


/*! Select for DataTables 1.3.0
 * 2015-2018 SpryMedia Ltd - datatables.net/license/mit
 */

/**
 * @summary     Select for DataTables
 * @description A collection of API methods, events and buttons for DataTables
 *   that provides selection options of the items in a DataTable
 * @version     1.3.0
 * @file        dataTables.select.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     datatables.net/forums
 * @copyright   Copyright 2015-2018 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license/mit
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net/extensions/select
 */
(function( factory ){
	if ( typeof define === 'function' && define.amd ) {
		// AMD
		define( ['jquery', 'datatables.net'], function ( $ ) {
			return factory( $, window, document );
		} );
	}
	else if ( typeof exports === 'object' ) {
		// CommonJS
		module.exports = function (root, $) {
			if ( ! root ) {
				root = window;
			}

			if ( ! $ || ! $.fn.dataTable ) {
				$ = require('datatables.net')(root, $).$;
			}

			return factory( $, root, root.document );
		};
	}
	else {
		// Browser
		factory( jQuery, window, document );
	}
}(function( $, window, document, undefined ) {
'use strict';
var DataTable = $.fn.dataTable;


// Version information for debugger
DataTable.select = {};

DataTable.select.version = '1.3.0';

DataTable.select.init = function ( dt ) {
	var ctx = dt.settings()[0];
	var init = ctx.oInit.select;
	var defaults = DataTable.defaults.select;
	var opts = init === undefined ?
		defaults :
		init;

	// Set defaults
	var items = 'row';
	var style = 'api';
	var blurable = false;
	var info = true;
	var selector = 'td, th';
	var className = 'selected';
	var setStyle = false;

	ctx._select = {};

	// Initialisation customisations
	if ( opts === true ) {
		style = 'os';
		setStyle = true;
	}
	else if ( typeof opts === 'string' ) {
		style = opts;
		setStyle = true;
	}
	else if ( $.isPlainObject( opts ) ) {
		if ( opts.blurable !== undefined ) {
			blurable = opts.blurable;
		}

		if ( opts.info !== undefined ) {
			info = opts.info;
		}

		if ( opts.items !== undefined ) {
			items = opts.items;
		}

		if ( opts.style !== undefined ) {
			style = opts.style;
			setStyle = true;
		}
		else {
			style = 'os';
			setStyle = true;
		}

		if ( opts.selector !== undefined ) {
			selector = opts.selector;
		}

		if ( opts.className !== undefined ) {
			className = opts.className;
		}
	}

	dt.select.selector( selector );
	dt.select.items( items );
	dt.select.style( style );
	dt.select.blurable( blurable );
	dt.select.info( info );
	ctx._select.className = className;


	// Sort table based on selected rows. Requires Select Datatables extension
	$.fn.dataTable.ext.order['select-checkbox'] = function ( settings, col ) {
		return this.api().column( col, {order: 'index'} ).nodes().map( function ( td ) {
			if ( settings._select.items === 'row' ) {
				return $( td ).parent().hasClass( settings._select.className );
			} else if ( settings._select.items === 'cell' ) {
				return $( td ).hasClass( settings._select.className );
			}
			return false;
		});
	};

	// If the init options haven't enabled select, but there is a selectable
	// class name, then enable
	if ( ! setStyle && $( dt.table().node() ).hasClass( 'selectable' ) ) {
		dt.select.style( 'os' );
	}
};

/*

Select is a collection of API methods, event handlers, event emitters and
buttons (for the `Buttons` extension) for DataTables. It provides the following
features, with an overview of how they are implemented:

## Selection of rows, columns and cells. Whether an item is selected or not is
   stored in:

* rows: a `_select_selected` property which contains a boolean value of the
  DataTables' `aoData` object for each row
* columns: a `_select_selected` property which contains a boolean value of the
  DataTables' `aoColumns` object for each column
* cells: a `_selected_cells` property which contains an array of boolean values
  of the `aoData` object for each row. The array is the same length as the
  columns array, with each element of it representing a cell.

This method of using boolean flags allows Select to operate when nodes have not
been created for rows / cells (DataTables' defer rendering feature).

## API methods

A range of API methods are available for triggering selection and de-selection
of rows. Methods are also available to configure the selection events that can
be triggered by an end user (such as which items are to be selected). To a large
extent, these of API methods *is* Select. It is basically a collection of helper
functions that can be used to select items in a DataTable.

Configuration of select is held in the object `_select` which is attached to the
DataTables settings object on initialisation. Select being available on a table
is not optional when Select is loaded, but its default is for selection only to
be available via the API - so the end user wouldn't be able to select rows
without additional configuration.

The `_select` object contains the following properties:

```
{
	items:string     - Can be `rows`, `columns` or `cells`. Defines what item 
	                   will be selected if the user is allowed to activate row
	                   selection using the mouse.
	style:string     - Can be `none`, `single`, `multi` or `os`. Defines the
	                   interaction style when selecting items
	blurable:boolean - If row selection can be cleared by clicking outside of
	                   the table
	info:boolean     - If the selection summary should be shown in the table
	                   information elements
}
```

In addition to the API methods, Select also extends the DataTables selector
options for rows, columns and cells adding a `selected` option to the selector
options object, allowing the developer to select only selected items or
unselected items.

## Mouse selection of items

Clicking on items can be used to select items. This is done by a simple event
handler that will select the items using the API methods.

 */


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Local functions
 */

/**
 * Add one or more cells to the selection when shift clicking in OS selection
 * style cell selection.
 *
 * Cell range is more complicated than row and column as we want to select
 * in the visible grid rather than by index in sequence. For example, if you
 * click first in cell 1-1 and then shift click in 2-2 - cells 1-2 and 2-1
 * should also be selected (and not 1-3, 1-4. etc)
 * 
 * @param  {DataTable.Api} dt   DataTable
 * @param  {object}        idx  Cell index to select to
 * @param  {object}        last Cell index to select from
 * @private
 */
function cellRange( dt, idx, last )
{
	var indexes;
	var columnIndexes;
	var rowIndexes;
	var selectColumns = function ( start, end ) {
		if ( start > end ) {
			var tmp = end;
			end = start;
			start = tmp;
		}
		
		var record = false;
		return dt.columns( ':visible' ).indexes().filter( function (i) {
			if ( i === start ) {
				record = true;
			}
			
			if ( i === end ) { // not else if, as start might === end
				record = false;
				return true;
			}

			return record;
		} );
	};

	var selectRows = function ( start, end ) {
		var indexes = dt.rows( { search: 'applied' } ).indexes();

		// Which comes first - might need to swap
		if ( indexes.indexOf( start ) > indexes.indexOf( end ) ) {
			var tmp = end;
			end = start;
			start = tmp;
		}

		var record = false;
		return indexes.filter( function (i) {
			if ( i === start ) {
				record = true;
			}
			
			if ( i === end ) {
				record = false;
				return true;
			}

			return record;
		} );
	};

	if ( ! dt.cells( { selected: true } ).any() && ! last ) {
		// select from the top left cell to this one
		columnIndexes = selectColumns( 0, idx.column );
		rowIndexes = selectRows( 0 , idx.row );
	}
	else {
		// Get column indexes between old and new
		columnIndexes = selectColumns( last.column, idx.column );
		rowIndexes = selectRows( last.row , idx.row );
	}

	indexes = dt.cells( rowIndexes, columnIndexes ).flatten();

	if ( ! dt.cells( idx, { selected: true } ).any() ) {
		// Select range
		dt.cells( indexes ).select();
	}
	else {
		// Deselect range
		dt.cells( indexes ).deselect();
	}
}

/**
 * Disable mouse selection by removing the selectors
 *
 * @param {DataTable.Api} dt DataTable to remove events from
 * @private
 */
function disableMouseSelection( dt )
{
	var ctx = dt.settings()[0];
	var selector = ctx._select.selector;

	$( dt.table().container() )
		.off( 'mousedown.dtSelect', selector )
		.off( 'mouseup.dtSelect', selector )
		.off( 'click.dtSelect', selector );

	$('body').off( 'click.dtSelect' + dt.table().node().id );
}

/**
 * Attach mouse listeners to the table to allow mouse selection of items
 *
 * @param {DataTable.Api} dt DataTable to remove events from
 * @private
 */
function enableMouseSelection ( dt )
{
	var container = $( dt.table().container() );
	var ctx = dt.settings()[0];
	var selector = ctx._select.selector;
	var matchSelection;

	container
		.on( 'mousedown.dtSelect', selector, function(e) {
			// Disallow text selection for shift clicking on the table so multi
			// element selection doesn't look terrible!
			if ( e.shiftKey || e.metaKey || e.ctrlKey ) {
				container
					.css( '-moz-user-select', 'none' )
					.one('selectstart.dtSelect', selector, function () {
						return false;
					} );
			}

			if ( window.getSelection ) {
				matchSelection = window.getSelection();
			}
		} )
		.on( 'mouseup.dtSelect', selector, function() {
			// Allow text selection to occur again, Mozilla style (tested in FF
			// 35.0.1 - still required)
			container.css( '-moz-user-select', '' );
		} )
		.on( 'click.dtSelect', selector, function ( e ) {
			var items = dt.select.items();
			var idx;

			// If text was selected (click and drag), then we shouldn't change
			// the row's selected state
			if ( matchSelection ) {
				var selection = window.getSelection();

				// If the element that contains the selection is not in the table, we can ignore it
				// This can happen if the developer selects text from the click event
				if ( ! selection.anchorNode || $(selection.anchorNode).closest('table')[0] === dt.table().node() ) {
					if ( selection !== matchSelection ) {
						return;
					}
				}
			}

			var ctx = dt.settings()[0];
			var wrapperClass = $.trim(dt.settings()[0].oClasses.sWrapper).replace(/ +/g, '.');

			// Ignore clicks inside a sub-table
			if ( $(e.target).closest('div.'+wrapperClass)[0] != dt.table().container() ) {
				return;
			}

			var cell = dt.cell( $(e.target).closest('td, th') );

			// Check the cell actually belongs to the host DataTable (so child
			// rows, etc, are ignored)
			if ( ! cell.any() ) {
				return;
			}

			var event = $.Event('user-select.dt');
			eventTrigger( dt, event, [ items, cell, e ] );

			if ( event.isDefaultPrevented() ) {
				return;
			}

			var cellIndex = cell.index();
			if ( items === 'row' ) {
				idx = cellIndex.row;
				typeSelect( e, dt, ctx, 'row', idx );
			}
			else if ( items === 'column' ) {
				idx = cell.index().column;
				typeSelect( e, dt, ctx, 'column', idx );
			}
			else if ( items === 'cell' ) {
				idx = cell.index();
				typeSelect( e, dt, ctx, 'cell', idx );
			}

			ctx._select_lastCell = cellIndex;
		} );

	// Blurable
	$('body').on( 'click.dtSelect' + dt.table().node().id, function ( e ) {
		if ( ctx._select.blurable ) {
			// If the click was inside the DataTables container, don't blur
			if ( $(e.target).parents().filter( dt.table().container() ).length ) {
				return;
			}

			// Ignore elements which have been removed from the DOM (i.e. paging
			// buttons)
			if ( $(e.target).parents('html').length === 0 ) {
			 	return;
			}

			// Don't blur in Editor form
			if ( $(e.target).parents('div.DTE').length ) {
				return;
			}

			clear( ctx, true );
		}
	} );
}

/**
 * Trigger an event on a DataTable
 *
 * @param {DataTable.Api} api      DataTable to trigger events on
 * @param  {boolean}      selected true if selected, false if deselected
 * @param  {string}       type     Item type acting on
 * @param  {boolean}      any      Require that there are values before
 *     triggering
 * @private
 */
function eventTrigger ( api, type, args, any )
{
	if ( any && ! api.flatten().length ) {
		return;
	}

	if ( typeof type === 'string' ) {
		type = type +'.dt';
	}

	args.unshift( api );

	$(api.table().node()).trigger( type, args );
}

/**
 * Update the information element of the DataTable showing information about the
 * items selected. This is done by adding tags to the existing text
 * 
 * @param {DataTable.Api} api DataTable to update
 * @private
 */
function info ( api )
{
	var ctx = api.settings()[0];

	if ( ! ctx._select.info || ! ctx.aanFeatures.i ) {
		return;
	}

	if ( api.select.style() === 'api' ) {
		return;
	}

	var rows    = api.rows( { selected: true } ).flatten().length;
	var columns = api.columns( { selected: true } ).flatten().length;
	var cells   = api.cells( { selected: true } ).flatten().length;

	var add = function ( el, name, num ) {
		el.append( $('<span class="select-item"/>').append( api.i18n(
			'select.'+name+'s',
			{ _: '%d '+name+'s selected', 0: '', 1: '1 '+name+' selected' },
			num
		) ) );
	};

	// Internal knowledge of DataTables to loop over all information elements
	$.each( ctx.aanFeatures.i, function ( i, el ) {
		el = $(el);

		var output  = $('<span class="select-info"/>');
		add( output, 'row', rows );
		add( output, 'column', columns );
		add( output, 'cell', cells  );

		var exisiting = el.children('span.select-info');
		if ( exisiting.length ) {
			exisiting.remove();
		}

		if ( output.text() !== '' ) {
			el.append( output );
		}
	} );
}

/**
 * Initialisation of a new table. Attach event handlers and callbacks to allow
 * Select to operate correctly.
 *
 * This will occur _after_ the initial DataTables initialisation, although
 * before Ajax data is rendered, if there is ajax data
 *
 * @param  {DataTable.settings} ctx Settings object to operate on
 * @private
 */
function init ( ctx ) {
	var api = new DataTable.Api( ctx );

	// Row callback so that classes can be added to rows and cells if the item
	// was selected before the element was created. This will happen with the
	// `deferRender` option enabled.
	// 
	// This method of attaching to `aoRowCreatedCallback` is a hack until
	// DataTables has proper events for row manipulation If you are reviewing
	// this code to create your own plug-ins, please do not do this!
	ctx.aoRowCreatedCallback.push( {
		fn: function ( row, data, index ) {
			var i, ien;
			var d = ctx.aoData[ index ];

			// Row
			if ( d._select_selected ) {
				$( row ).addClass( ctx._select.className );
			}

			// Cells and columns - if separated out, we would need to do two
			// loops, so it makes sense to combine them into a single one
			for ( i=0, ien=ctx.aoColumns.length ; i<ien ; i++ ) {
				if ( ctx.aoColumns[i]._select_selected || (d._selected_cells && d._selected_cells[i]) ) {
					$(d.anCells[i]).addClass( ctx._select.className );
				}
			}
		},
		sName: 'select-deferRender'
	} );

	// On Ajax reload we want to reselect all rows which are currently selected,
	// if there is an rowId (i.e. a unique value to identify each row with)
	api.on( 'preXhr.dt.dtSelect', function () {
		// note that column selection doesn't need to be cached and then
		// reselected, as they are already selected
		var rows = api.rows( { selected: true } ).ids( true ).filter( function ( d ) {
			return d !== undefined;
		} );

		var cells = api.cells( { selected: true } ).eq(0).map( function ( cellIdx ) {
			var id = api.row( cellIdx.row ).id( true );
			return id ?
				{ row: id, column: cellIdx.column } :
				undefined;
		} ).filter( function ( d ) {
			return d !== undefined;
		} );

		// On the next draw, reselect the currently selected items
		api.one( 'draw.dt.dtSelect', function () {
			api.rows( rows ).select();

			// `cells` is not a cell index selector, so it needs a loop
			if ( cells.any() ) {
				cells.each( function ( id ) {
					api.cells( id.row, id.column ).select();
				} );
			}
		} );
	} );

	// Update the table information element with selected item summary
	api.on( 'draw.dtSelect.dt select.dtSelect.dt deselect.dtSelect.dt info.dt', function () {
		info( api );
	} );

	// Clean up and release
	api.on( 'destroy.dtSelect', function () {
		disableMouseSelection( api );
		api.off( '.dtSelect' );
	} );
}

/**
 * Add one or more items (rows or columns) to the selection when shift clicking
 * in OS selection style
 *
 * @param  {DataTable.Api} dt   DataTable
 * @param  {string}        type Row or column range selector
 * @param  {object}        idx  Item index to select to
 * @param  {object}        last Item index to select from
 * @private
 */
function rowColumnRange( dt, type, idx, last )
{
	// Add a range of rows from the last selected row to this one
	var indexes = dt[type+'s']( { search: 'applied' } ).indexes();
	var idx1 = $.inArray( last, indexes );
	var idx2 = $.inArray( idx, indexes );

	if ( ! dt[type+'s']( { selected: true } ).any() && idx1 === -1 ) {
		// select from top to here - slightly odd, but both Windows and Mac OS
		// do this
		indexes.splice( $.inArray( idx, indexes )+1, indexes.length );
	}
	else {
		// reverse so we can shift click 'up' as well as down
		if ( idx1 > idx2 ) {
			var tmp = idx2;
			idx2 = idx1;
			idx1 = tmp;
		}

		indexes.splice( idx2+1, indexes.length );
		indexes.splice( 0, idx1 );
	}

	if ( ! dt[type]( idx, { selected: true } ).any() ) {
		// Select range
		dt[type+'s']( indexes ).select();
	}
	else {
		// Deselect range - need to keep the clicked on row selected
		indexes.splice( $.inArray( idx, indexes ), 1 );
		dt[type+'s']( indexes ).deselect();
	}
}

/**
 * Clear all selected items
 *
 * @param  {DataTable.settings} ctx Settings object of the host DataTable
 * @param  {boolean} [force=false] Force the de-selection to happen, regardless
 *     of selection style
 * @private
 */
function clear( ctx, force )
{
	if ( force || ctx._select.style === 'single' ) {
		var api = new DataTable.Api( ctx );
		
		api.rows( { selected: true } ).deselect();
		api.columns( { selected: true } ).deselect();
		api.cells( { selected: true } ).deselect();
	}
}

/**
 * Select items based on the current configuration for style and items.
 *
 * @param  {object}             e    Mouse event object
 * @param  {DataTables.Api}     dt   DataTable
 * @param  {DataTable.settings} ctx  Settings object of the host DataTable
 * @param  {string}             type Items to select
 * @param  {int|object}         idx  Index of the item to select
 * @private
 */
function typeSelect ( e, dt, ctx, type, idx )
{
	var style = dt.select.style();
	var isSelected = dt[type]( idx, { selected: true } ).any();

	if ( style === 'os' ) {
		if ( e.ctrlKey || e.metaKey ) {
			// Add or remove from the selection
			dt[type]( idx ).select( ! isSelected );
		}
		else if ( e.shiftKey ) {
			if ( type === 'cell' ) {
				cellRange( dt, idx, ctx._select_lastCell || null );
			}
			else {
				rowColumnRange( dt, type, idx, ctx._select_lastCell ?
					ctx._select_lastCell[type] :
					null
				);
			}
		}
		else {
			// No cmd or shift click - deselect if selected, or select
			// this row only
			var selected = dt[type+'s']( { selected: true } );

			if ( isSelected && selected.flatten().length === 1 ) {
				dt[type]( idx ).deselect();
			}
			else {
				selected.deselect();
				dt[type]( idx ).select();
			}
		}
	} else if ( style == 'multi+shift' ) {
		if ( e.shiftKey ) {
			if ( type === 'cell' ) {
				cellRange( dt, idx, ctx._select_lastCell || null );
			}
			else {
				rowColumnRange( dt, type, idx, ctx._select_lastCell ?
					ctx._select_lastCell[type] :
					null
				);
			}
		}
		else {
			dt[ type ]( idx ).select( ! isSelected );
		}
	}
	else {
		dt[ type ]( idx ).select( ! isSelected );
	}
}



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * DataTables selectors
 */

// row and column are basically identical just assigned to different properties
// and checking a different array, so we can dynamically create the functions to
// reduce the code size
$.each( [
	{ type: 'row', prop: 'aoData' },
	{ type: 'column', prop: 'aoColumns' }
], function ( i, o ) {
	DataTable.ext.selector[ o.type ].push( function ( settings, opts, indexes ) {
		var selected = opts.selected;
		var data;
		var out = [];

		if ( selected !== true && selected !== false ) {
			return indexes;
		}

		for ( var i=0, ien=indexes.length ; i<ien ; i++ ) {
			data = settings[ o.prop ][ indexes[i] ];

			if ( (selected === true && data._select_selected === true) ||
			     (selected === false && ! data._select_selected )
			) {
				out.push( indexes[i] );
			}
		}

		return out;
	} );
} );

DataTable.ext.selector.cell.push( function ( settings, opts, cells ) {
	var selected = opts.selected;
	var rowData;
	var out = [];

	if ( selected === undefined ) {
		return cells;
	}

	for ( var i=0, ien=cells.length ; i<ien ; i++ ) {
		rowData = settings.aoData[ cells[i].row ];

		if ( (selected === true && rowData._selected_cells && rowData._selected_cells[ cells[i].column ] === true) ||
		     (selected === false && ( ! rowData._selected_cells || ! rowData._selected_cells[ cells[i].column ] ) )
		) {
			out.push( cells[i] );
		}
	}

	return out;
} );



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * DataTables API
 *
 * For complete documentation, please refer to the docs/api directory or the
 * DataTables site
 */

// Local variables to improve compression
var apiRegister = DataTable.Api.register;
var apiRegisterPlural = DataTable.Api.registerPlural;

apiRegister( 'select()', function () {
	return this.iterator( 'table', function ( ctx ) {
		DataTable.select.init( new DataTable.Api( ctx ) );
	} );
} );

apiRegister( 'select.blurable()', function ( flag ) {
	if ( flag === undefined ) {
		return this.context[0]._select.blurable;
	}

	return this.iterator( 'table', function ( ctx ) {
		ctx._select.blurable = flag;
	} );
} );

apiRegister( 'select.info()', function ( flag ) {
	if ( info === undefined ) {
		return this.context[0]._select.info;
	}

	return this.iterator( 'table', function ( ctx ) {
		ctx._select.info = flag;
	} );
} );

apiRegister( 'select.items()', function ( items ) {
	if ( items === undefined ) {
		return this.context[0]._select.items;
	}

	return this.iterator( 'table', function ( ctx ) {
		ctx._select.items = items;

		eventTrigger( new DataTable.Api( ctx ), 'selectItems', [ items ] );
	} );
} );

// Takes effect from the _next_ selection. None disables future selection, but
// does not clear the current selection. Use the `deselect` methods for that
apiRegister( 'select.style()', function ( style ) {
	if ( style === undefined ) {
		return this.context[0]._select.style;
	}

	return this.iterator( 'table', function ( ctx ) {
		ctx._select.style = style;

		if ( ! ctx._select_init ) {
			init( ctx );
		}

		// Add / remove mouse event handlers. They aren't required when only
		// API selection is available
		var dt = new DataTable.Api( ctx );
		disableMouseSelection( dt );
		
		if ( style !== 'api' ) {
			enableMouseSelection( dt );
		}

		eventTrigger( new DataTable.Api( ctx ), 'selectStyle', [ style ] );
	} );
} );

apiRegister( 'select.selector()', function ( selector ) {
	if ( selector === undefined ) {
		return this.context[0]._select.selector;
	}

	return this.iterator( 'table', function ( ctx ) {
		disableMouseSelection( new DataTable.Api( ctx ) );

		ctx._select.selector = selector;

		if ( ctx._select.style !== 'api' ) {
			enableMouseSelection( new DataTable.Api( ctx ) );
		}
	} );
} );



apiRegisterPlural( 'rows().select()', 'row().select()', function ( select ) {
	var api = this;

	if ( select === false ) {
		return this.deselect();
	}

	this.iterator( 'row', function ( ctx, idx ) {
		clear( ctx );

		ctx.aoData[ idx ]._select_selected = true;
		$( ctx.aoData[ idx ].nTr ).addClass( ctx._select.className );
	} );

	this.iterator( 'table', function ( ctx, i ) {
		eventTrigger( api, 'select', [ 'row', api[i] ], true );
	} );

	return this;
} );

apiRegisterPlural( 'columns().select()', 'column().select()', function ( select ) {
	var api = this;

	if ( select === false ) {
		return this.deselect();
	}

	this.iterator( 'column', function ( ctx, idx ) {
		clear( ctx );

		ctx.aoColumns[ idx ]._select_selected = true;

		var column = new DataTable.Api( ctx ).column( idx );

		$( column.header() ).addClass( ctx._select.className );
		$( column.footer() ).addClass( ctx._select.className );

		column.nodes().to$().addClass( ctx._select.className );
	} );

	this.iterator( 'table', function ( ctx, i ) {
		eventTrigger( api, 'select', [ 'column', api[i] ], true );
	} );

	return this;
} );

apiRegisterPlural( 'cells().select()', 'cell().select()', function ( select ) {
	var api = this;

	if ( select === false ) {
		return this.deselect();
	}

	this.iterator( 'cell', function ( ctx, rowIdx, colIdx ) {
		clear( ctx );

		var data = ctx.aoData[ rowIdx ];

		if ( data._selected_cells === undefined ) {
			data._selected_cells = [];
		}

		data._selected_cells[ colIdx ] = true;

		if ( data.anCells ) {
			$( data.anCells[ colIdx ] ).addClass( ctx._select.className );
		}
	} );

	this.iterator( 'table', function ( ctx, i ) {
		eventTrigger( api, 'select', [ 'cell', api[i] ], true );
	} );

	return this;
} );


apiRegisterPlural( 'rows().deselect()', 'row().deselect()', function () {
	var api = this;

	this.iterator( 'row', function ( ctx, idx ) {
		ctx.aoData[ idx ]._select_selected = false;
		$( ctx.aoData[ idx ].nTr ).removeClass( ctx._select.className );
	} );

	this.iterator( 'table', function ( ctx, i ) {
		eventTrigger( api, 'deselect', [ 'row', api[i] ], true );
	} );

	return this;
} );

apiRegisterPlural( 'columns().deselect()', 'column().deselect()', function () {
	var api = this;

	this.iterator( 'column', function ( ctx, idx ) {
		ctx.aoColumns[ idx ]._select_selected = false;

		var api = new DataTable.Api( ctx );
		var column = api.column( idx );

		$( column.header() ).removeClass( ctx._select.className );
		$( column.footer() ).removeClass( ctx._select.className );

		// Need to loop over each cell, rather than just using
		// `column().nodes()` as cells which are individually selected should
		// not have the `selected` class removed from them
		api.cells( null, idx ).indexes().each( function (cellIdx) {
			var data = ctx.aoData[ cellIdx.row ];
			var cellSelected = data._selected_cells;

			if ( data.anCells && (! cellSelected || ! cellSelected[ cellIdx.column ]) ) {
				$( data.anCells[ cellIdx.column  ] ).removeClass( ctx._select.className );
			}
		} );
	} );

	this.iterator( 'table', function ( ctx, i ) {
		eventTrigger( api, 'deselect', [ 'column', api[i] ], true );
	} );

	return this;
} );

apiRegisterPlural( 'cells().deselect()', 'cell().deselect()', function () {
	var api = this;

	this.iterator( 'cell', function ( ctx, rowIdx, colIdx ) {
		var data = ctx.aoData[ rowIdx ];

		data._selected_cells[ colIdx ] = false;

		// Remove class only if the cells exist, and the cell is not column
		// selected, in which case the class should remain (since it is selected
		// in the column)
		if ( data.anCells && ! ctx.aoColumns[ colIdx ]._select_selected ) {
			$( data.anCells[ colIdx ] ).removeClass( ctx._select.className );
		}
	} );

	this.iterator( 'table', function ( ctx, i ) {
		eventTrigger( api, 'deselect', [ 'cell', api[i] ], true );
	} );

	return this;
} );



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Buttons
 */
function i18n( label, def ) {
	return function (dt) {
		return dt.i18n( 'buttons.'+label, def );
	};
}

// Common events with suitable namespaces
function namespacedEvents ( config ) {
	var unique = config._eventNamespace;

	return 'draw.dt.DT'+unique+' select.dt.DT'+unique+' deselect.dt.DT'+unique;
}

function enabled ( dt, config ) {
	if ( $.inArray( 'rows', config.limitTo ) !== -1 && dt.rows( { selected: true } ).any() ) {
		return true;
	}

	if ( $.inArray( 'columns', config.limitTo ) !== -1 && dt.columns( { selected: true } ).any() ) {
		return true;
	}

	if ( $.inArray( 'cells', config.limitTo ) !== -1 && dt.cells( { selected: true } ).any() ) {
		return true;
	}

	return false;
}

var _buttonNamespace = 0;

$.extend( DataTable.ext.buttons, {
	selected: {
		text: i18n( 'selected', 'Selected' ),
		className: 'buttons-selected',
		limitTo: [ 'rows', 'columns', 'cells' ],
		init: function ( dt, node, config ) {
			var that = this;
			config._eventNamespace = '.select'+(_buttonNamespace++);

			// .DT namespace listeners are removed by DataTables automatically
			// on table destroy
			dt.on( namespacedEvents(config), function () {
				that.enable( enabled(dt, config) );
			} );

			this.disable();
		},
		destroy: function ( dt, node, config ) {
			dt.off( config._eventNamespace );
		}
	},
	selectedSingle: {
		text: i18n( 'selectedSingle', 'Selected single' ),
		className: 'buttons-selected-single',
		init: function ( dt, node, config ) {
			var that = this;
			config._eventNamespace = '.select'+(_buttonNamespace++);

			dt.on( namespacedEvents(config), function () {
				var count = dt.rows( { selected: true } ).flatten().length +
				            dt.columns( { selected: true } ).flatten().length +
				            dt.cells( { selected: true } ).flatten().length;

				that.enable( count === 1 );
			} );

			this.disable();
		},
		destroy: function ( dt, node, config ) {
			dt.off( config._eventNamespace );
		}
	},
	selectAll: {
		text: i18n( 'selectAll', 'Select all' ),
		className: 'buttons-select-all',
		action: function () {
			var items = this.select.items();
			this[ items+'s' ]().select();
		}
	},
	selectNone: {
		text: i18n( 'selectNone', 'Deselect all' ),
		className: 'buttons-select-none',
		action: function () {
			clear( this.settings()[0], true );
		},
		init: function ( dt, node, config ) {
			var that = this;
			config._eventNamespace = '.select'+(_buttonNamespace++);

			dt.on( namespacedEvents(config), function () {
				var count = dt.rows( { selected: true } ).flatten().length +
				            dt.columns( { selected: true } ).flatten().length +
				            dt.cells( { selected: true } ).flatten().length;

				that.enable( count > 0 );
			} );

			this.disable();
		},
		destroy: function ( dt, node, config ) {
			dt.off( config._eventNamespace );
		}
	}
} );

$.each( [ 'Row', 'Column', 'Cell' ], function ( i, item ) {
	var lc = item.toLowerCase();

	DataTable.ext.buttons[ 'select'+item+'s' ] = {
		text: i18n( 'select'+item+'s', 'Select '+lc+'s' ),
		className: 'buttons-select-'+lc+'s',
		action: function () {
			this.select.items( lc );
		},
		init: function ( dt ) {
			var that = this;

			dt.on( 'selectItems.dt.DT', function ( e, ctx, items ) {
				that.active( items === lc );
			} );
		}
	};
} );



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Initialisation
 */

// DataTables creation - check if select has been defined in the options. Note
// this required that the table be in the document! If it isn't then something
// needs to trigger this method unfortunately. The next major release of
// DataTables will rework the events and address this.
$(document).on( 'preInit.dt.dtSelect', function (e, ctx) {
	if ( e.namespace !== 'dt' ) {
		return;
	}

	DataTable.select.init( new DataTable.Api( ctx ) );
} );


return DataTable.select;
}));


